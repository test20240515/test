/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/runtypes/lib/reflect.js
var require_reflect = __commonJS({
  "node_modules/runtypes/lib/reflect.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/runtypes/lib/result.js
var require_result = __commonJS({
  "node_modules/runtypes/lib/result.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Failcode = void 0;
    exports.Failcode = {
      /** The type of the received primitive value is incompatible with expected one. */
      TYPE_INCORRECT: "TYPE_INCORRECT",
      /** The received primitive value is incorrect. */
      VALUE_INCORRECT: "VALUE_INCORRECT",
      /** The key of the property is incorrect. */
      KEY_INCORRECT: "KEY_INCORRECT",
      /** One or more elements or properties of the received object are incorrect. */
      CONTENT_INCORRECT: "CONTENT_INCORRECT",
      /** One or more arguments passed to the function is incorrect. */
      ARGUMENT_INCORRECT: "ARGUMENT_INCORRECT",
      /** The value returned by the function is incorrect. */
      RETURN_INCORRECT: "RETURN_INCORRECT",
      /** The received value does not fulfill the constraint. */
      CONSTRAINT_FAILED: "CONSTRAINT_FAILED",
      /** The property must be present but missing. */
      PROPERTY_MISSING: "PROPERTY_MISSING",
      /** The property must not be present but present. */
      PROPERTY_PRESENT: "PROPERTY_PRESENT",
      /** The value must not be present but present. */
      NOTHING_EXPECTED: "NOTHING_EXPECTED"
    };
  }
});

// node_modules/runtypes/lib/errors.js
var require_errors = __commonJS({
  "node_modules/runtypes/lib/errors.js"(exports) {
    "use strict";
    var __extends2 = exports && exports.__extends || function() {
      var extendStatics2 = function(d, b) {
        extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics2(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics2(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ValidationError = void 0;
    var ValidationError = (
      /** @class */
      function(_super) {
        __extends2(ValidationError2, _super);
        function ValidationError2(failure) {
          var _this = _super.call(this, failure.message) || this;
          _this.name = "ValidationError";
          _this.code = failure.code;
          if (failure.details !== void 0)
            _this.details = failure.details;
          Object.setPrototypeOf(_this, ValidationError2.prototype);
          return _this;
        }
        return ValidationError2;
      }(Error)
    );
    exports.ValidationError = ValidationError;
  }
});

// node_modules/runtypes/lib/show.js
var require_show = __commonJS({
  "node_modules/runtypes/lib/show.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var showStringified = function(circular) {
      return function(refl) {
        switch (refl.tag) {
          case "literal":
            return '"'.concat(String(refl.value), '"');
          case "string":
            return "string";
          case "brand":
            return refl.brand;
          case "constraint":
            return refl.name || showStringified(circular)(refl.underlying);
          case "union":
            return refl.alternatives.map(showStringified(circular)).join(" | ");
          case "intersect":
            return refl.intersectees.map(showStringified(circular)).join(" & ");
          default:
            break;
        }
        return "`${".concat(show(false, circular)(refl), "}`");
      };
    };
    var showEmbedded = function(circular) {
      return function(refl) {
        switch (refl.tag) {
          case "literal":
            return String(refl.value);
          case "brand":
            return "${".concat(refl.brand, "}");
          case "constraint":
            return refl.name ? "${".concat(refl.name, "}") : showEmbedded(circular)(refl.underlying);
          case "union":
            if (refl.alternatives.length === 1) {
              var inner = refl.alternatives[0];
              return showEmbedded(circular)(inner.reflect);
            }
            break;
          case "intersect":
            if (refl.intersectees.length === 1) {
              var inner = refl.intersectees[0];
              return showEmbedded(circular)(inner.reflect);
            }
            break;
          default:
            break;
        }
        return "${".concat(show(false, circular)(refl), "}");
      };
    };
    var show = function(needsParens, circular) {
      return function(refl) {
        var parenthesize = function(s) {
          return needsParens ? "(".concat(s, ")") : s;
        };
        if (circular.has(refl))
          return parenthesize("CIRCULAR ".concat(refl.tag));
        else
          circular.add(refl);
        try {
          switch (refl.tag) {
            case "unknown":
            case "never":
            case "void":
            case "boolean":
            case "number":
            case "bigint":
            case "string":
            case "symbol":
            case "function":
              return refl.tag;
            case "literal": {
              var value = refl.value;
              return typeof value === "string" ? '"'.concat(value, '"') : String(value);
            }
            case "template": {
              if (refl.strings.length === 0)
                return '""';
              else if (refl.strings.length === 1)
                return '"'.concat(refl.strings[0], '"');
              else if (refl.strings.length === 2) {
                if (refl.strings.every(function(string) {
                  return string === "";
                })) {
                  var runtype = refl.runtypes[0];
                  return showStringified(circular)(runtype.reflect);
                }
              }
              var backtick_1 = false;
              var inner = refl.strings.reduce(function(inner2, string, i) {
                var prefix = inner2 + string;
                var runtype2 = refl.runtypes[i];
                if (runtype2) {
                  var suffix = showEmbedded(circular)(runtype2.reflect);
                  if (!backtick_1 && suffix.startsWith("$"))
                    backtick_1 = true;
                  return prefix + suffix;
                } else
                  return prefix;
              }, "");
              return backtick_1 ? "`".concat(inner, "`") : '"'.concat(inner, '"');
            }
            case "array":
              return "".concat(readonlyTag(refl)).concat(show(true, circular)(refl.element), "[]");
            case "dictionary":
              return "{ [_: ".concat(refl.key, "]: ").concat(show(false, circular)(refl.value), " }");
            case "record": {
              var keys = Object.keys(refl.fields);
              return keys.length ? "{ ".concat(keys.map(function(k) {
                return "".concat(readonlyTag(refl)).concat(k).concat(partialTag(refl, k), ": ").concat(refl.fields[k].tag === "optional" ? show(false, circular)(refl.fields[k].underlying) : show(false, circular)(refl.fields[k]), ";");
              }).join(" "), " }") : "{}";
            }
            case "tuple":
              return "[".concat(refl.components.map(show(false, circular)).join(", "), "]");
            case "union":
              return parenthesize("".concat(refl.alternatives.map(show(true, circular)).join(" | ")));
            case "intersect":
              return parenthesize("".concat(refl.intersectees.map(show(true, circular)).join(" & ")));
            case "optional":
              return show(needsParens, circular)(refl.underlying) + " | undefined";
            case "constraint":
              return refl.name || show(needsParens, circular)(refl.underlying);
            case "instanceof":
              return refl.ctor.name;
            case "brand":
              return show(needsParens, circular)(refl.entity);
          }
        } finally {
          circular.delete(refl);
        }
        throw Error("impossible");
      };
    };
    exports.default = show(false, /* @__PURE__ */ new Set());
    function partialTag(_a, key) {
      var isPartial = _a.isPartial, fields = _a.fields;
      return isPartial || key !== void 0 && fields[key].tag === "optional" ? "?" : "";
    }
    function readonlyTag(_a) {
      var isReadonly = _a.isReadonly;
      return isReadonly ? "readonly " : "";
    }
  }
});

// node_modules/runtypes/lib/util.js
var require_util = __commonJS({
  "node_modules/runtypes/lib/util.js"(exports) {
    "use strict";
    var __assign2 = exports && exports.__assign || function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FAILURE = exports.SUCCESS = exports.enumerableKeysOf = exports.typeOf = exports.hasKey = void 0;
    var result_1 = require_result();
    var show_1 = require_show();
    function hasKey(key, object) {
      return typeof object === "object" && object !== null && key in object;
    }
    exports.hasKey = hasKey;
    var typeOf = function(value) {
      var _a, _b, _c;
      return typeof value === "object" ? value === null ? "null" : Array.isArray(value) ? "array" : ((_a = value.constructor) === null || _a === void 0 ? void 0 : _a.name) === "Object" ? "object" : (_c = (_b = value.constructor) === null || _b === void 0 ? void 0 : _b.name) !== null && _c !== void 0 ? _c : typeof value : typeof value;
    };
    exports.typeOf = typeOf;
    var enumerableKeysOf = function(object) {
      return typeof object === "object" && object !== null ? (
        // Objects with a null prototype may not have `propertyIsEnumerable`
        Reflect.ownKeys(object).filter(function(key) {
          var _a, _b;
          return (_b = (_a = object.propertyIsEnumerable) === null || _a === void 0 ? void 0 : _a.call(object, key)) !== null && _b !== void 0 ? _b : true;
        })
      ) : [];
    };
    exports.enumerableKeysOf = enumerableKeysOf;
    function SUCCESS(value) {
      return { success: true, value };
    }
    exports.SUCCESS = SUCCESS;
    exports.FAILURE = Object.assign(function(code, message, details) {
      return __assign2({ success: false, code, message }, details ? { details } : {});
    }, {
      TYPE_INCORRECT: function(self, value) {
        var message = "Expected ".concat(self.tag === "template" ? "string ".concat((0, show_1.default)(self)) : (0, show_1.default)(self), ", but was ").concat((0, exports.typeOf)(value));
        return (0, exports.FAILURE)(result_1.Failcode.TYPE_INCORRECT, message);
      },
      VALUE_INCORRECT: function(name, expected, received) {
        return (0, exports.FAILURE)(result_1.Failcode.VALUE_INCORRECT, "Expected ".concat(name, " ").concat(String(expected), ", but was ").concat(String(received)));
      },
      KEY_INCORRECT: function(self, expected, value) {
        return (0, exports.FAILURE)(result_1.Failcode.KEY_INCORRECT, "Expected ".concat((0, show_1.default)(self), " key to be ").concat((0, show_1.default)(expected), ", but was ").concat((0, exports.typeOf)(value)));
      },
      CONTENT_INCORRECT: function(self, details) {
        var formattedDetails = JSON.stringify(details, null, 2).replace(/^ *null,\n/gm, "");
        var message = "Validation failed:\n".concat(formattedDetails, ".\nObject should match ").concat((0, show_1.default)(self));
        return (0, exports.FAILURE)(result_1.Failcode.CONTENT_INCORRECT, message, details);
      },
      ARGUMENT_INCORRECT: function(message) {
        return (0, exports.FAILURE)(result_1.Failcode.ARGUMENT_INCORRECT, message);
      },
      RETURN_INCORRECT: function(message) {
        return (0, exports.FAILURE)(result_1.Failcode.RETURN_INCORRECT, message);
      },
      CONSTRAINT_FAILED: function(self, message) {
        var info = message ? ": ".concat(message) : "";
        return (0, exports.FAILURE)(result_1.Failcode.CONSTRAINT_FAILED, "Failed constraint check for ".concat((0, show_1.default)(self)).concat(info));
      },
      PROPERTY_MISSING: function(self) {
        var message = "Expected ".concat((0, show_1.default)(self), ", but was missing");
        return (0, exports.FAILURE)(result_1.Failcode.PROPERTY_MISSING, message);
      },
      PROPERTY_PRESENT: function(value) {
        var message = "Expected nothing, but was ".concat((0, exports.typeOf)(value));
        return (0, exports.FAILURE)(result_1.Failcode.PROPERTY_PRESENT, message);
      },
      NOTHING_EXPECTED: function(value) {
        var message = "Expected nothing, but was ".concat((0, exports.typeOf)(value));
        return (0, exports.FAILURE)(result_1.Failcode.NOTHING_EXPECTED, message);
      }
    });
  }
});

// node_modules/runtypes/lib/contract.js
var require_contract = __commonJS({
  "node_modules/runtypes/lib/contract.js"(exports) {
    "use strict";
    var __read2 = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray2 = exports && exports.__spreadArray || function(to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar)
              ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Contract = void 0;
    var errors_1 = require_errors();
    var util_1 = require_util();
    function Contract() {
      var runtypes = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        runtypes[_i] = arguments[_i];
      }
      var lastIndex = runtypes.length - 1;
      var argRuntypes = runtypes.slice(0, lastIndex);
      var returnRuntype = runtypes[lastIndex];
      return {
        enforce: function(f) {
          return function() {
            var args = [];
            for (var _i2 = 0; _i2 < arguments.length; _i2++) {
              args[_i2] = arguments[_i2];
            }
            if (args.length < argRuntypes.length) {
              var message = "Expected ".concat(argRuntypes.length, " arguments but only received ").concat(args.length);
              var failure = util_1.FAILURE.ARGUMENT_INCORRECT(message);
              throw new errors_1.ValidationError(failure);
            }
            for (var i = 0; i < argRuntypes.length; i++)
              argRuntypes[i].check(args[i]);
            return returnRuntype.check(f.apply(void 0, __spreadArray2([], __read2(args), false)));
          };
        }
      };
    }
    exports.Contract = Contract;
  }
});

// node_modules/runtypes/lib/asynccontract.js
var require_asynccontract = __commonJS({
  "node_modules/runtypes/lib/asynccontract.js"(exports) {
    "use strict";
    var __read2 = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray2 = exports && exports.__spreadArray || function(to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar)
              ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AsyncContract = void 0;
    var errors_1 = require_errors();
    var util_1 = require_util();
    function AsyncContract() {
      var runtypes = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        runtypes[_i] = arguments[_i];
      }
      var lastIndex = runtypes.length - 1;
      var argRuntypes = runtypes.slice(0, lastIndex);
      var returnRuntype = runtypes[lastIndex];
      return {
        enforce: function(f) {
          return function() {
            var args = [];
            for (var _i2 = 0; _i2 < arguments.length; _i2++) {
              args[_i2] = arguments[_i2];
            }
            if (args.length < argRuntypes.length) {
              var message = "Expected ".concat(argRuntypes.length, " arguments but only received ").concat(args.length);
              var failure = util_1.FAILURE.ARGUMENT_INCORRECT(message);
              throw new errors_1.ValidationError(failure);
            }
            for (var i = 0; i < argRuntypes.length; i++)
              argRuntypes[i].check(args[i]);
            var returnedPromise = f.apply(void 0, __spreadArray2([], __read2(args), false));
            if (!(returnedPromise instanceof Promise)) {
              var message = "Expected function to return a promise, but instead got ".concat(returnedPromise);
              var failure = util_1.FAILURE.RETURN_INCORRECT(message);
              throw new errors_1.ValidationError(failure);
            }
            return returnedPromise.then(returnRuntype.check);
          };
        }
      };
    }
    exports.AsyncContract = AsyncContract;
  }
});

// node_modules/runtypes/lib/match.js
var require_match = __commonJS({
  "node_modules/runtypes/lib/match.js"(exports) {
    "use strict";
    var __values2 = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read2 = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.when = exports.match = void 0;
    function match() {
      var cases = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        cases[_i] = arguments[_i];
      }
      return function(x) {
        var e_1, _a;
        try {
          for (var cases_1 = __values2(cases), cases_1_1 = cases_1.next(); !cases_1_1.done; cases_1_1 = cases_1.next()) {
            var _b = __read2(cases_1_1.value, 2), T = _b[0], f = _b[1];
            if (T.guard(x))
              return f(x);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (cases_1_1 && !cases_1_1.done && (_a = cases_1.return))
              _a.call(cases_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        throw new Error("No alternatives were matched");
      };
    }
    exports.match = match;
    function when(runtype, transformer) {
      return [runtype, transformer];
    }
    exports.when = when;
  }
});

// node_modules/runtypes/lib/runtype.js
var require_runtype = __commonJS({
  "node_modules/runtypes/lib/runtype.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.innerValidate = exports.create = exports.isRuntype = void 0;
    var index_1 = require_lib();
    var show_1 = require_show();
    var errors_1 = require_errors();
    var util_1 = require_util();
    var RuntypeSymbol = Symbol();
    var isRuntype = function(x) {
      return (0, util_1.hasKey)(RuntypeSymbol, x);
    };
    exports.isRuntype = isRuntype;
    function create(validate, A) {
      A[RuntypeSymbol] = true;
      A.check = check;
      A.assert = check;
      A._innerValidate = function(value, visited) {
        if (visited.has(value, A))
          return (0, util_1.SUCCESS)(value);
        return validate(value, visited);
      };
      A.validate = function(value) {
        return A._innerValidate(value, VisitedState());
      };
      A.guard = guard;
      A.Or = Or;
      A.And = And;
      A.optional = optional;
      A.nullable = nullable;
      A.withConstraint = withConstraint;
      A.withGuard = withGuard;
      A.withBrand = withBrand;
      A.reflect = A;
      A.toString = function() {
        return "Runtype<".concat((0, show_1.default)(A), ">");
      };
      return A;
      function check(x) {
        var result = A.validate(x);
        if (result.success)
          return result.value;
        else
          throw new errors_1.ValidationError(result);
      }
      function guard(x) {
        return A.validate(x).success;
      }
      function Or(B) {
        return (0, index_1.Union)(A, B);
      }
      function And(B) {
        return (0, index_1.Intersect)(A, B);
      }
      function optional() {
        return (0, index_1.Optional)(A);
      }
      function nullable() {
        return (0, index_1.Union)(A, index_1.Null);
      }
      function withConstraint(constraint, options) {
        return (0, index_1.Constraint)(A, constraint, options);
      }
      function withGuard(guard2, options) {
        return (0, index_1.Constraint)(A, guard2, options);
      }
      function withBrand(B) {
        return (0, index_1.Brand)(B, A);
      }
    }
    exports.create = create;
    function innerValidate(targetType, value, visited) {
      return targetType._innerValidate(value, visited);
    }
    exports.innerValidate = innerValidate;
    function VisitedState() {
      var members = /* @__PURE__ */ new WeakMap();
      var add = function(candidate, type) {
        if (candidate === null || !(typeof candidate === "object"))
          return;
        var typeSet = members.get(candidate);
        members.set(candidate, typeSet ? typeSet.set(type, true) : (/* @__PURE__ */ new WeakMap()).set(type, true));
      };
      var has = function(candidate, type) {
        var typeSet = members.get(candidate);
        var value = typeSet && typeSet.get(type) || false;
        add(candidate, type);
        return value;
      };
      return { has };
    }
  }
});

// node_modules/runtypes/lib/types/unknown.js
var require_unknown = __commonJS({
  "node_modules/runtypes/lib/types/unknown.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Unknown = void 0;
    var runtype_1 = require_runtype();
    var util_1 = require_util();
    var self = { tag: "unknown" };
    exports.Unknown = (0, runtype_1.create)(function(value) {
      return (0, util_1.SUCCESS)(value);
    }, self);
  }
});

// node_modules/runtypes/lib/types/never.js
var require_never = __commonJS({
  "node_modules/runtypes/lib/types/never.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Never = void 0;
    var runtype_1 = require_runtype();
    var util_1 = require_util();
    var self = { tag: "never" };
    exports.Never = (0, runtype_1.create)(util_1.FAILURE.NOTHING_EXPECTED, self);
  }
});

// node_modules/runtypes/lib/types/void.js
var require_void = __commonJS({
  "node_modules/runtypes/lib/types/void.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Void = void 0;
    var unknown_1 = require_unknown();
    exports.Void = unknown_1.Unknown;
  }
});

// node_modules/runtypes/lib/types/union.js
var require_union = __commonJS({
  "node_modules/runtypes/lib/types/union.js"(exports) {
    "use strict";
    var __values2 = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Union = void 0;
    var runtype_1 = require_runtype();
    var util_1 = require_util();
    function Union() {
      var alternatives = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        alternatives[_i] = arguments[_i];
      }
      var match = function() {
        var cases = [];
        for (var _i2 = 0; _i2 < arguments.length; _i2++) {
          cases[_i2] = arguments[_i2];
        }
        return function(x) {
          for (var i = 0; i < alternatives.length; i++) {
            if (alternatives[i].guard(x)) {
              return cases[i](x);
            }
          }
        };
      };
      var self = { tag: "union", alternatives, match };
      return (0, runtype_1.create)(function(value, visited) {
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d;
        if (typeof value !== "object" || value === null) {
          try {
            for (var alternatives_1 = __values2(alternatives), alternatives_1_1 = alternatives_1.next(); !alternatives_1_1.done; alternatives_1_1 = alternatives_1.next()) {
              var alternative = alternatives_1_1.value;
              if ((0, runtype_1.innerValidate)(alternative, value, visited).success)
                return (0, util_1.SUCCESS)(value);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (alternatives_1_1 && !alternatives_1_1.done && (_a = alternatives_1.return))
                _a.call(alternatives_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          return util_1.FAILURE.TYPE_INCORRECT(self, value);
        }
        var commonLiteralFields = {};
        try {
          for (var alternatives_2 = __values2(alternatives), alternatives_2_1 = alternatives_2.next(); !alternatives_2_1.done; alternatives_2_1 = alternatives_2.next()) {
            var alternative = alternatives_2_1.value;
            if (alternative.reflect.tag === "record") {
              var _loop_1 = function(fieldName2) {
                var field2 = alternative.reflect.fields[fieldName2];
                if (field2.tag === "literal") {
                  if (commonLiteralFields[fieldName2]) {
                    if (commonLiteralFields[fieldName2].every(function(value2) {
                      return value2 !== field2.value;
                    })) {
                      commonLiteralFields[fieldName2].push(field2.value);
                    }
                  } else {
                    commonLiteralFields[fieldName2] = [field2.value];
                  }
                }
              };
              for (var fieldName in alternative.reflect.fields) {
                _loop_1(fieldName);
              }
            }
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (alternatives_2_1 && !alternatives_2_1.done && (_b = alternatives_2.return))
              _b.call(alternatives_2);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
        for (var fieldName in commonLiteralFields) {
          if (commonLiteralFields[fieldName].length === alternatives.length) {
            try {
              for (var alternatives_3 = (e_3 = void 0, __values2(alternatives)), alternatives_3_1 = alternatives_3.next(); !alternatives_3_1.done; alternatives_3_1 = alternatives_3.next()) {
                var alternative = alternatives_3_1.value;
                if (alternative.reflect.tag === "record") {
                  var field = alternative.reflect.fields[fieldName];
                  if (field.tag === "literal" && (0, util_1.hasKey)(fieldName, value) && value[fieldName] === field.value) {
                    return (0, runtype_1.innerValidate)(alternative, value, visited);
                  }
                }
              }
            } catch (e_3_1) {
              e_3 = { error: e_3_1 };
            } finally {
              try {
                if (alternatives_3_1 && !alternatives_3_1.done && (_c = alternatives_3.return))
                  _c.call(alternatives_3);
              } finally {
                if (e_3)
                  throw e_3.error;
              }
            }
          }
        }
        try {
          for (var alternatives_4 = __values2(alternatives), alternatives_4_1 = alternatives_4.next(); !alternatives_4_1.done; alternatives_4_1 = alternatives_4.next()) {
            var targetType = alternatives_4_1.value;
            if ((0, runtype_1.innerValidate)(targetType, value, visited).success)
              return (0, util_1.SUCCESS)(value);
          }
        } catch (e_4_1) {
          e_4 = { error: e_4_1 };
        } finally {
          try {
            if (alternatives_4_1 && !alternatives_4_1.done && (_d = alternatives_4.return))
              _d.call(alternatives_4);
          } finally {
            if (e_4)
              throw e_4.error;
          }
        }
        return util_1.FAILURE.TYPE_INCORRECT(self, value);
      }, self);
    }
    exports.Union = Union;
  }
});

// node_modules/runtypes/lib/types/literal.js
var require_literal = __commonJS({
  "node_modules/runtypes/lib/types/literal.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Nullish = exports.Null = exports.Undefined = exports.Literal = exports.literal = void 0;
    var runtype_1 = require_runtype();
    var util_1 = require_util();
    var union_1 = require_union();
    function literal(value) {
      return Array.isArray(value) ? String(value.map(String)) : typeof value === "bigint" ? String(value) + "n" : String(value);
    }
    exports.literal = literal;
    function Literal(valueBase) {
      var self = { tag: "literal", value: valueBase };
      return (0, runtype_1.create)(function(value) {
        return value === valueBase ? (0, util_1.SUCCESS)(value) : util_1.FAILURE.VALUE_INCORRECT("literal", "`".concat(literal(valueBase), "`"), "`".concat(literal(value), "`"));
      }, self);
    }
    exports.Literal = Literal;
    exports.Undefined = Literal(void 0);
    exports.Null = Literal(null);
    exports.Nullish = (0, union_1.Union)(exports.Null, exports.Undefined);
  }
});

// node_modules/runtypes/lib/types/template.js
var require_template = __commonJS({
  "node_modules/runtypes/lib/types/template.js"(exports) {
    "use strict";
    var __read2 = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray2 = exports && exports.__spreadArray || function(to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar)
              ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    var __values2 = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Template = void 0;
    var runtype_1 = require_runtype();
    var show_1 = require_show();
    var util_1 = require_util();
    var literal_1 = require_literal();
    var escapeRegExp = function(string) {
      return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    };
    var parseArgs = function(args) {
      if (0 < args.length && Array.isArray(args[0])) {
        var _a = __read2(args), strings = _a[0], runtypes = _a.slice(1);
        return [Array.from(strings), runtypes];
      } else {
        var convenient = args;
        var strings = convenient.reduce(function(strings2, arg) {
          if (!(0, runtype_1.isRuntype)(arg))
            strings2.push(strings2.pop() + String(arg));
          else
            strings2.push("");
          return strings2;
        }, [""]);
        var runtypes = convenient.filter(runtype_1.isRuntype);
        return [strings, runtypes];
      }
    };
    var flattenInnerRuntypes = function(strings, runtypes) {
      for (var i = 0; i < runtypes.length; ) {
        switch (runtypes[i].reflect.tag) {
          case "literal": {
            var literal_2 = runtypes[i];
            runtypes.splice(i, 1);
            var string = String(literal_2.value);
            strings.splice(i, 2, strings[i] + string + strings[i + 1]);
            break;
          }
          case "template": {
            var template = runtypes[i];
            runtypes.splice.apply(runtypes, __spreadArray2([i, 1], __read2(template.runtypes), false));
            var innerStrings = template.strings;
            if (innerStrings.length === 1) {
              strings.splice(i, 2, strings[i] + innerStrings[0] + strings[i + 1]);
            } else {
              var first = innerStrings[0];
              var rest = innerStrings.slice(1, -1);
              var last = innerStrings[innerStrings.length - 1];
              strings.splice.apply(strings, __spreadArray2(__spreadArray2([i, 2, strings[i] + first], __read2(rest), false), [last + strings[i + 1]], false));
            }
            break;
          }
          case "union": {
            var union = runtypes[i];
            if (union.alternatives.length === 1) {
              try {
                var literal_3 = getInnerLiteral(union);
                runtypes.splice(i, 1);
                var string = String(literal_3.value);
                strings.splice(i, 2, strings[i] + string + strings[i + 1]);
                break;
              } catch (_) {
                i++;
                break;
              }
            } else {
              i++;
              break;
            }
          }
          case "intersect": {
            var intersect = runtypes[i];
            if (intersect.intersectees.length === 1) {
              try {
                var literal_4 = getInnerLiteral(intersect);
                runtypes.splice(i, 1);
                var string = String(literal_4.value);
                strings.splice(i, 2, strings[i] + string + strings[i + 1]);
                break;
              } catch (_) {
                i++;
                break;
              }
            } else {
              i++;
              break;
            }
          }
          default:
            i++;
            break;
        }
      }
    };
    var normalizeArgs = function(args) {
      var _a = __read2(parseArgs(args), 2), strings = _a[0], runtypes = _a[1];
      flattenInnerRuntypes(strings, runtypes);
      return [strings, runtypes];
    };
    var getInnerLiteral = function(runtype) {
      switch (runtype.reflect.tag) {
        case "literal":
          return runtype;
        case "brand":
          return getInnerLiteral(runtype.reflect.entity);
        case "union":
          if (runtype.reflect.alternatives.length === 1)
            return getInnerLiteral(runtype.reflect.alternatives[0]);
          break;
        case "intersect":
          if (runtype.reflect.intersectees.length === 1)
            return getInnerLiteral(runtype.reflect.intersectees[0]);
          break;
        default:
          break;
      }
      throw void 0;
    };
    var identity = function(s) {
      return s;
    };
    var revivers = {
      string: [function(s) {
        return globalThis.String(s);
      }, ".*"],
      number: [
        function(s) {
          return globalThis.Number(s);
        },
        "[+-]?(?:\\d*\\.\\d+|\\d+\\.\\d*|\\d+)(?:[Ee][+-]?\\d+)?",
        "0[Bb][01]+",
        "0[Oo][0-7]+",
        "0[Xx][0-9A-Fa-f]+"
        // Note: `"NaN"` isn't here, as TS doesn't allow `"NaN"` to be a `` `${number}` ``
      ],
      bigint: [function(s) {
        return globalThis.BigInt(s);
      }, "-?[1-9]d*"],
      boolean: [function(s) {
        return s === "false" ? false : true;
      }, "true", "false"],
      null: [function() {
        return null;
      }, "null"],
      undefined: [function() {
        return void 0;
      }, "undefined"]
    };
    var getReviversFor = function(reflect) {
      switch (reflect.tag) {
        case "literal": {
          var _a = __read2(revivers[(0, util_1.typeOf)(reflect.value)] || [identity], 1), reviver_1 = _a[0];
          return reviver_1;
        }
        case "brand":
          return getReviversFor(reflect.entity);
        case "constraint":
          return getReviversFor(reflect.underlying);
        case "union":
          return reflect.alternatives.map(getReviversFor);
        case "intersect":
          return reflect.intersectees.map(getReviversFor);
        default:
          var _b = __read2(revivers[reflect.tag] || [identity], 1), reviver = _b[0];
          return reviver;
      }
    };
    var reviveValidate = function(reflect, visited) {
      return function(value) {
        var e_1, _a, e_2, _b;
        var revivers2 = getReviversFor(reflect);
        if (Array.isArray(revivers2)) {
          switch (reflect.tag) {
            case "union":
              try {
                for (var _c = __values2(reflect.alternatives), _d = _c.next(); !_d.done; _d = _c.next()) {
                  var alternative = _d.value;
                  var validated = reviveValidate(alternative.reflect, visited)(value);
                  if (validated.success)
                    return validated;
                }
              } catch (e_1_1) {
                e_1 = { error: e_1_1 };
              } finally {
                try {
                  if (_d && !_d.done && (_a = _c.return))
                    _a.call(_c);
                } finally {
                  if (e_1)
                    throw e_1.error;
                }
              }
              return util_1.FAILURE.TYPE_INCORRECT(reflect, value);
            case "intersect":
              try {
                for (var _e = __values2(reflect.intersectees), _f = _e.next(); !_f.done; _f = _e.next()) {
                  var intersectee = _f.value;
                  var validated = reviveValidate(intersectee.reflect, visited)(value);
                  if (!validated.success)
                    return validated;
                }
              } catch (e_2_1) {
                e_2 = { error: e_2_1 };
              } finally {
                try {
                  if (_f && !_f.done && (_b = _e.return))
                    _b.call(_e);
                } finally {
                  if (e_2)
                    throw e_2.error;
                }
              }
              return (0, util_1.SUCCESS)(value);
            default:
              throw Error("impossible");
          }
        } else {
          var reviver = revivers2;
          var validated = (0, runtype_1.innerValidate)(reflect, reviver(value), visited);
          if (!validated.success && validated.code === "VALUE_INCORRECT" && reflect.tag === "literal")
            return util_1.FAILURE.VALUE_INCORRECT("literal", '"'.concat((0, literal_1.literal)(reflect.value), '"'), '"'.concat(value, '"'));
          return validated;
        }
      };
    };
    var getRegExpPatternFor = function(reflect) {
      switch (reflect.tag) {
        case "literal":
          return escapeRegExp(String(reflect.value));
        case "brand":
          return getRegExpPatternFor(reflect.entity);
        case "constraint":
          return getRegExpPatternFor(reflect.underlying);
        case "union":
          return reflect.alternatives.map(getRegExpPatternFor).join("|");
        case "template": {
          return reflect.strings.map(escapeRegExp).reduce(function(pattern, string, i) {
            var prefix = pattern + string;
            var runtype = reflect.runtypes[i];
            if (runtype)
              return prefix + "(?:".concat(getRegExpPatternFor(runtype.reflect), ")");
            else
              return prefix;
          }, "");
        }
        default:
          var _a = __read2(revivers[reflect.tag] || [void 0, ".*"]), patterns = _a.slice(1);
          return patterns.join("|");
      }
    };
    var createRegExpForTemplate = function(reflect) {
      var pattern = reflect.strings.map(escapeRegExp).reduce(function(pattern2, string, i) {
        var prefix = pattern2 + string;
        var runtype = reflect.runtypes[i];
        if (runtype)
          return prefix + "(".concat(getRegExpPatternFor(runtype.reflect), ")");
        else
          return prefix;
      }, "");
      return new RegExp("^".concat(pattern, "$"), "su");
    };
    function Template() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var _a = __read2(normalizeArgs(args), 2), strings = _a[0], runtypes = _a[1];
      var self = { tag: "template", strings, runtypes };
      var regexp = createRegExpForTemplate(self);
      var test = function(value, visited) {
        var matches = value.match(regexp);
        if (matches) {
          var values = matches.slice(1);
          for (var i = 0; i < runtypes.length; i++) {
            var runtype = runtypes[i];
            var value_1 = values[i];
            var validated = reviveValidate(runtype.reflect, visited)(value_1);
            if (!validated.success)
              return validated;
          }
          return (0, util_1.SUCCESS)(value);
        } else {
          return util_1.FAILURE.VALUE_INCORRECT("string", "".concat((0, show_1.default)(self)), '"'.concat((0, literal_1.literal)(value), '"'));
        }
      };
      return (0, runtype_1.create)(function(value, visited) {
        if (typeof value !== "string")
          return util_1.FAILURE.TYPE_INCORRECT(self, value);
        else {
          var validated = test(value, visited);
          if (!validated.success) {
            var result = util_1.FAILURE.VALUE_INCORRECT("string", "".concat((0, show_1.default)(self)), '"'.concat(value, '"'));
            if (result.message !== validated.message)
              result.message += " (inner: ".concat(validated.message, ")");
            return result;
          } else
            return (0, util_1.SUCCESS)(value);
        }
      }, self);
    }
    exports.Template = Template;
  }
});

// node_modules/runtypes/lib/types/boolean.js
var require_boolean = __commonJS({
  "node_modules/runtypes/lib/types/boolean.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Boolean = void 0;
    var runtype_1 = require_runtype();
    var util_1 = require_util();
    var self = { tag: "boolean" };
    exports.Boolean = (0, runtype_1.create)(function(value) {
      return typeof value === "boolean" ? (0, util_1.SUCCESS)(value) : util_1.FAILURE.TYPE_INCORRECT(self, value);
    }, self);
  }
});

// node_modules/runtypes/lib/types/number.js
var require_number = __commonJS({
  "node_modules/runtypes/lib/types/number.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Number = void 0;
    var runtype_1 = require_runtype();
    var util_1 = require_util();
    var self = { tag: "number" };
    exports.Number = (0, runtype_1.create)(function(value) {
      return typeof value === "number" ? (0, util_1.SUCCESS)(value) : util_1.FAILURE.TYPE_INCORRECT(self, value);
    }, self);
  }
});

// node_modules/runtypes/lib/types/bigint.js
var require_bigint = __commonJS({
  "node_modules/runtypes/lib/types/bigint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BigInt = void 0;
    var runtype_1 = require_runtype();
    var util_1 = require_util();
    var self = { tag: "bigint" };
    exports.BigInt = (0, runtype_1.create)(function(value) {
      return typeof value === "bigint" ? (0, util_1.SUCCESS)(value) : util_1.FAILURE.TYPE_INCORRECT(self, value);
    }, self);
  }
});

// node_modules/runtypes/lib/types/string.js
var require_string = __commonJS({
  "node_modules/runtypes/lib/types/string.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.String = void 0;
    var runtype_1 = require_runtype();
    var util_1 = require_util();
    var self = { tag: "string" };
    exports.String = (0, runtype_1.create)(function(value) {
      return typeof value === "string" ? (0, util_1.SUCCESS)(value) : util_1.FAILURE.TYPE_INCORRECT(self, value);
    }, self);
  }
});

// node_modules/runtypes/lib/types/symbol.js
var require_symbol = __commonJS({
  "node_modules/runtypes/lib/types/symbol.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Symbol = void 0;
    var runtype_1 = require_runtype();
    var util_1 = require_util();
    var f = function(key) {
      var self2 = { tag: "symbol", key };
      return (0, runtype_1.create)(function(value) {
        if (typeof value !== "symbol")
          return util_1.FAILURE.TYPE_INCORRECT(self2, value);
        else {
          var keyForValue = globalThis.Symbol.keyFor(value);
          if (keyForValue !== key)
            return util_1.FAILURE.VALUE_INCORRECT("symbol key", quoteIfPresent(key), quoteIfPresent(keyForValue));
          else
            return (0, util_1.SUCCESS)(value);
        }
      }, self2);
    };
    var self = { tag: "symbol" };
    exports.Symbol = (0, runtype_1.create)(function(value) {
      return typeof value === "symbol" ? (0, util_1.SUCCESS)(value) : util_1.FAILURE.TYPE_INCORRECT(self, value);
    }, Object.assign(f, self));
    var quoteIfPresent = function(key) {
      return key === void 0 ? "undefined" : '"'.concat(key, '"');
    };
  }
});

// node_modules/runtypes/lib/types/array.js
var require_array = __commonJS({
  "node_modules/runtypes/lib/types/array.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Array = void 0;
    var runtype_1 = require_runtype();
    var util_1 = require_util();
    function InternalArr(element, isReadonly) {
      var self = { tag: "array", isReadonly, element };
      return withExtraModifierFuncs((0, runtype_1.create)(function(xs, visited) {
        if (!Array.isArray(xs))
          return util_1.FAILURE.TYPE_INCORRECT(self, xs);
        var keys = (0, util_1.enumerableKeysOf)(xs);
        var results = keys.map(function(key) {
          return (0, runtype_1.innerValidate)(element, xs[key], visited);
        });
        var details = keys.reduce(function(details2, key) {
          var result = results[key];
          if (!result.success)
            details2[key] = result.details || result.message;
          return details2;
        }, []);
        if ((0, util_1.enumerableKeysOf)(details).length !== 0)
          return util_1.FAILURE.CONTENT_INCORRECT(self, details);
        else
          return (0, util_1.SUCCESS)(xs);
      }, self));
    }
    function Arr(element) {
      return InternalArr(element, false);
    }
    exports.Array = Arr;
    function withExtraModifierFuncs(A) {
      A.asReadonly = asReadonly;
      return A;
      function asReadonly() {
        return InternalArr(A.element, true);
      }
    }
  }
});

// node_modules/runtypes/lib/types/tuple.js
var require_tuple = __commonJS({
  "node_modules/runtypes/lib/types/tuple.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Tuple = void 0;
    var runtype_1 = require_runtype();
    var util_1 = require_util();
    function Tuple() {
      var components = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        components[_i] = arguments[_i];
      }
      var self = { tag: "tuple", components };
      return (0, runtype_1.create)(function(xs, visited) {
        if (!Array.isArray(xs))
          return util_1.FAILURE.TYPE_INCORRECT(self, xs);
        if (xs.length !== components.length)
          return util_1.FAILURE.CONSTRAINT_FAILED(self, "Expected length ".concat(components.length, ", but was ").concat(xs.length));
        var keys = (0, util_1.enumerableKeysOf)(xs);
        var results = keys.map(function(key) {
          return (0, runtype_1.innerValidate)(components[key], xs[key], visited);
        });
        var details = keys.reduce(function(details2, key) {
          var result = results[key];
          if (!result.success)
            details2[key] = result.details || result.message;
          return details2;
        }, []);
        if ((0, util_1.enumerableKeysOf)(details).length !== 0)
          return util_1.FAILURE.CONTENT_INCORRECT(self, details);
        else
          return (0, util_1.SUCCESS)(xs);
      }, self);
    }
    exports.Tuple = Tuple;
  }
});

// node_modules/runtypes/lib/types/record.js
var require_record = __commonJS({
  "node_modules/runtypes/lib/types/record.js"(exports) {
    "use strict";
    var __read2 = exports && exports.__read || function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray2 = exports && exports.__spreadArray || function(to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar)
              ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Partial = exports.Record = exports.InternalRecord = void 0;
    var runtype_1 = require_runtype();
    var util_1 = require_util();
    function InternalRecord(fields, isPartial, isReadonly) {
      var self = { tag: "record", isPartial, isReadonly, fields };
      return withExtraModifierFuncs((0, runtype_1.create)(function(x, visited) {
        if (x === null || x === void 0) {
          return util_1.FAILURE.TYPE_INCORRECT(self, x);
        }
        var keysOfFields = (0, util_1.enumerableKeysOf)(fields);
        if (keysOfFields.length !== 0 && typeof x !== "object")
          return util_1.FAILURE.TYPE_INCORRECT(self, x);
        var keys = __spreadArray2([], __read2(new Set(__spreadArray2(__spreadArray2([], __read2(keysOfFields), false), __read2((0, util_1.enumerableKeysOf)(x)), false))), false);
        var results = keys.reduce(function(results2, key) {
          var fieldsHasKey = (0, util_1.hasKey)(key, fields);
          var xHasKey = (0, util_1.hasKey)(key, x);
          if (fieldsHasKey) {
            var runtype = fields[key];
            var isOptional = isPartial || runtype.reflect.tag === "optional";
            if (xHasKey) {
              var value = x[key];
              if (isOptional && value === void 0)
                results2[key] = (0, util_1.SUCCESS)(value);
              else
                results2[key] = (0, runtype_1.innerValidate)(runtype, value, visited);
            } else {
              if (!isOptional)
                results2[key] = util_1.FAILURE.PROPERTY_MISSING(runtype.reflect);
              else
                results2[key] = (0, util_1.SUCCESS)(void 0);
            }
          } else if (xHasKey) {
            var value = x[key];
            results2[key] = (0, util_1.SUCCESS)(value);
          } else {
            throw new Error("impossible");
          }
          return results2;
        }, {});
        var details = keys.reduce(function(details2, key) {
          var result = results[key];
          if (!result.success)
            details2[key] = result.details || result.message;
          return details2;
        }, {});
        if ((0, util_1.enumerableKeysOf)(details).length !== 0)
          return util_1.FAILURE.CONTENT_INCORRECT(self, details);
        else
          return (0, util_1.SUCCESS)(x);
      }, self));
    }
    exports.InternalRecord = InternalRecord;
    function Record(fields) {
      return InternalRecord(fields, false, false);
    }
    exports.Record = Record;
    function Partial(fields) {
      return InternalRecord(fields, true, false);
    }
    exports.Partial = Partial;
    function withExtraModifierFuncs(A) {
      A.asPartial = asPartial;
      A.asReadonly = asReadonly;
      A.pick = pick;
      A.omit = omit;
      A.extend = extend;
      return A;
      function asPartial() {
        return InternalRecord(A.fields, true, A.isReadonly);
      }
      function asReadonly() {
        return InternalRecord(A.fields, A.isPartial, true);
      }
      function pick() {
        var keys = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          keys[_i] = arguments[_i];
        }
        var result = {};
        keys.forEach(function(key) {
          result[key] = A.fields[key];
        });
        return InternalRecord(result, A.isPartial, A.isReadonly);
      }
      function omit() {
        var keys = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          keys[_i] = arguments[_i];
        }
        var result = {};
        var existingKeys = (0, util_1.enumerableKeysOf)(A.fields);
        existingKeys.forEach(function(key) {
          if (!keys.includes(key))
            result[key] = A.fields[key];
        });
        return InternalRecord(result, A.isPartial, A.isReadonly);
      }
      function extend(fields) {
        return InternalRecord(Object.assign({}, A.fields, fields), A.isPartial, A.isReadonly);
      }
    }
  }
});

// node_modules/runtypes/lib/types/constraint.js
var require_constraint = __commonJS({
  "node_modules/runtypes/lib/types/constraint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Guard = exports.Constraint = void 0;
    var runtype_1 = require_runtype();
    var util_1 = require_util();
    var unknown_1 = require_unknown();
    function Constraint(underlying, constraint, options) {
      var name = options && options.name;
      var args = options && options.args;
      var self = {
        tag: "constraint",
        underlying,
        constraint,
        name,
        args
      };
      return (0, runtype_1.create)(function(value) {
        var result = underlying.validate(value);
        if (!result.success)
          return result;
        var message = constraint(result.value);
        if (typeof message === "string")
          return util_1.FAILURE.CONSTRAINT_FAILED(self, message);
        else if (!message)
          return util_1.FAILURE.CONSTRAINT_FAILED(self);
        return (0, util_1.SUCCESS)(result.value);
      }, self);
    }
    exports.Constraint = Constraint;
    var Guard = function(guard, options) {
      return unknown_1.Unknown.withGuard(guard, options);
    };
    exports.Guard = Guard;
  }
});

// node_modules/runtypes/lib/types/dictionary.js
var require_dictionary = __commonJS({
  "node_modules/runtypes/lib/types/dictionary.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Dictionary = void 0;
    var runtype_1 = require_runtype();
    var string_1 = require_string();
    var constraint_1 = require_constraint();
    var show_1 = require_show();
    var util_1 = require_util();
    var NumberKey = (0, constraint_1.Constraint)(string_1.String, function(s) {
      return !isNaN(+s);
    }, { name: "number" });
    function Dictionary(value, key) {
      var keyRuntype = key === void 0 ? string_1.String : key === "string" ? string_1.String : key === "number" ? NumberKey : key;
      var keyString = (0, show_1.default)(keyRuntype);
      var self = { tag: "dictionary", key: keyString, value };
      return (0, runtype_1.create)(function(x, visited) {
        if (x === null || x === void 0 || typeof x !== "object")
          return util_1.FAILURE.TYPE_INCORRECT(self, x);
        if (Object.getPrototypeOf(x) !== Object.prototype) {
          if (!Array.isArray(x) || keyString === "string")
            return util_1.FAILURE.TYPE_INCORRECT(self, x);
        }
        var numberString = /^(?:NaN|-?\d+(?:\.\d+)?)$/;
        var keys = (0, util_1.enumerableKeysOf)(x);
        var results = keys.reduce(function(results2, key2) {
          var isNumberLikeKey = typeof key2 === "string" && numberString.test(key2);
          var keyInterop = isNumberLikeKey ? globalThis.Number(key2) : key2;
          if (isNumberLikeKey ? !keyRuntype.guard(keyInterop) && !keyRuntype.guard(key2) : !keyRuntype.guard(keyInterop)) {
            results2[key2] = util_1.FAILURE.KEY_INCORRECT(self, keyRuntype.reflect, keyInterop);
          } else
            results2[key2] = (0, runtype_1.innerValidate)(value, x[key2], visited);
          return results2;
        }, {});
        var details = keys.reduce(function(details2, key2) {
          var result = results[key2];
          if (!result.success)
            details2[key2] = result.details || result.message;
          return details2;
        }, {});
        if ((0, util_1.enumerableKeysOf)(details).length !== 0)
          return util_1.FAILURE.CONTENT_INCORRECT(self, details);
        else
          return (0, util_1.SUCCESS)(x);
      }, self);
    }
    exports.Dictionary = Dictionary;
  }
});

// node_modules/runtypes/lib/types/intersect.js
var require_intersect = __commonJS({
  "node_modules/runtypes/lib/types/intersect.js"(exports) {
    "use strict";
    var __values2 = exports && exports.__values || function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Intersect = void 0;
    var runtype_1 = require_runtype();
    var util_1 = require_util();
    function Intersect() {
      var intersectees = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        intersectees[_i] = arguments[_i];
      }
      var self = { tag: "intersect", intersectees };
      return (0, runtype_1.create)(function(value, visited) {
        var e_1, _a;
        try {
          for (var intersectees_1 = __values2(intersectees), intersectees_1_1 = intersectees_1.next(); !intersectees_1_1.done; intersectees_1_1 = intersectees_1.next()) {
            var targetType = intersectees_1_1.value;
            var result = (0, runtype_1.innerValidate)(targetType, value, visited);
            if (!result.success)
              return result;
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (intersectees_1_1 && !intersectees_1_1.done && (_a = intersectees_1.return))
              _a.call(intersectees_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        return (0, util_1.SUCCESS)(value);
      }, self);
    }
    exports.Intersect = Intersect;
  }
});

// node_modules/runtypes/lib/types/optional.js
var require_optional = __commonJS({
  "node_modules/runtypes/lib/types/optional.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Optional = void 0;
    var runtype_1 = require_runtype();
    var util_1 = require_util();
    function Optional(runtype) {
      var self = { tag: "optional", underlying: runtype };
      return (0, runtype_1.create)(function(value) {
        return value === void 0 ? (0, util_1.SUCCESS)(value) : runtype.validate(value);
      }, self);
    }
    exports.Optional = Optional;
  }
});

// node_modules/runtypes/lib/types/function.js
var require_function = __commonJS({
  "node_modules/runtypes/lib/types/function.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Function = void 0;
    var runtype_1 = require_runtype();
    var util_1 = require_util();
    var self = { tag: "function" };
    exports.Function = (0, runtype_1.create)(function(value) {
      return typeof value === "function" ? (0, util_1.SUCCESS)(value) : util_1.FAILURE.TYPE_INCORRECT(self, value);
    }, self);
  }
});

// node_modules/runtypes/lib/types/instanceof.js
var require_instanceof = __commonJS({
  "node_modules/runtypes/lib/types/instanceof.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InstanceOf = void 0;
    var runtype_1 = require_runtype();
    var util_1 = require_util();
    function InstanceOf(ctor) {
      var self = { tag: "instanceof", ctor };
      return (0, runtype_1.create)(function(value) {
        return value instanceof ctor ? (0, util_1.SUCCESS)(value) : util_1.FAILURE.TYPE_INCORRECT(self, value);
      }, self);
    }
    exports.InstanceOf = InstanceOf;
  }
});

// node_modules/runtypes/lib/types/lazy.js
var require_lazy = __commonJS({
  "node_modules/runtypes/lib/types/lazy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Lazy = void 0;
    var runtype_1 = require_runtype();
    function Lazy(delayed) {
      var data = {
        get tag() {
          return getWrapped()["tag"];
        }
      };
      var cached;
      function getWrapped() {
        if (!cached) {
          cached = delayed();
          for (var k in cached)
            if (k !== "tag")
              data[k] = cached[k];
        }
        return cached;
      }
      return (0, runtype_1.create)(function(x) {
        return getWrapped().validate(x);
      }, data);
    }
    exports.Lazy = Lazy;
  }
});

// node_modules/runtypes/lib/types/brand.js
var require_brand = __commonJS({
  "node_modules/runtypes/lib/types/brand.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Brand = void 0;
    var runtype_1 = require_runtype();
    function Brand(brand, entity) {
      var self = { tag: "brand", brand, entity };
      return (0, runtype_1.create)(function(value) {
        return entity.validate(value);
      }, self);
    }
    exports.Brand = Brand;
  }
});

// node_modules/runtypes/lib/decorator.js
var require_decorator = __commonJS({
  "node_modules/runtypes/lib/decorator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checked = exports.check = void 0;
    var errors_1 = require_errors();
    var util_1 = require_util();
    var prototypes = /* @__PURE__ */ new WeakMap();
    function check(target, propertyKey, parameterIndex) {
      var prototype = prototypes.get(target) || /* @__PURE__ */ new Map();
      prototypes.set(target, prototype);
      var validParameterIndices = prototype.get(propertyKey) || [];
      prototype.set(propertyKey, validParameterIndices);
      validParameterIndices.push(parameterIndex);
    }
    exports.check = check;
    function getValidParameterIndices(target, propertyKey, runtypeCount) {
      var prototype = prototypes.get(target);
      var validParameterIndices = prototype && prototype.get(propertyKey);
      if (validParameterIndices) {
        return validParameterIndices;
      }
      var indices = [];
      for (var i = 0; i < runtypeCount; i++) {
        indices.push(i);
      }
      return indices;
    }
    function checked() {
      var runtypes = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        runtypes[_i] = arguments[_i];
      }
      if (runtypes.length === 0) {
        throw new Error("No runtype provided to `@checked`. Please remove the decorator.");
      }
      return function(target, propertyKey, descriptor) {
        var method = descriptor.value;
        var methodId = (target.name || target.constructor.name + ".prototype") + (typeof propertyKey === "string" ? '["'.concat(propertyKey, '"]') : "[".concat(String(propertyKey), "]"));
        var validParameterIndices = getValidParameterIndices(target, propertyKey, runtypes.length);
        if (validParameterIndices.length !== runtypes.length) {
          throw new Error("Number of `@checked` runtypes and @check parameters not matched.");
        }
        if (validParameterIndices.length > method.length) {
          throw new Error("Number of `@checked` runtypes exceeds actual parameter length.");
        }
        descriptor.value = function() {
          var args = [];
          for (var _i2 = 0; _i2 < arguments.length; _i2++) {
            args[_i2] = arguments[_i2];
          }
          runtypes.forEach(function(type, typeIndex) {
            var parameterIndex = validParameterIndices[typeIndex];
            var result = type.validate(args[parameterIndex]);
            if (!result.success) {
              var message = "".concat(methodId, ", argument #").concat(parameterIndex, ": ").concat(result.message);
              var failure = util_1.FAILURE.ARGUMENT_INCORRECT(message);
              throw new errors_1.ValidationError(failure);
            }
          });
          return method.apply(this, args);
        };
      };
    }
    exports.checked = checked;
  }
});

// node_modules/runtypes/lib/index.js
var require_lib = __commonJS({
  "node_modules/runtypes/lib/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InstanceOf = exports.Nullish = exports.Null = exports.Undefined = exports.Literal = void 0;
    __exportStar2(require_reflect(), exports);
    __exportStar2(require_result(), exports);
    __exportStar2(require_contract(), exports);
    __exportStar2(require_asynccontract(), exports);
    __exportStar2(require_match(), exports);
    __exportStar2(require_errors(), exports);
    __exportStar2(require_unknown(), exports);
    __exportStar2(require_never(), exports);
    __exportStar2(require_void(), exports);
    var literal_1 = require_literal();
    Object.defineProperty(exports, "Literal", { enumerable: true, get: function() {
      return literal_1.Literal;
    } });
    Object.defineProperty(exports, "Undefined", { enumerable: true, get: function() {
      return literal_1.Undefined;
    } });
    Object.defineProperty(exports, "Null", { enumerable: true, get: function() {
      return literal_1.Null;
    } });
    Object.defineProperty(exports, "Nullish", { enumerable: true, get: function() {
      return literal_1.Nullish;
    } });
    __exportStar2(require_template(), exports);
    __exportStar2(require_boolean(), exports);
    __exportStar2(require_number(), exports);
    __exportStar2(require_bigint(), exports);
    __exportStar2(require_string(), exports);
    __exportStar2(require_symbol(), exports);
    __exportStar2(require_array(), exports);
    __exportStar2(require_tuple(), exports);
    __exportStar2(require_record(), exports);
    __exportStar2(require_dictionary(), exports);
    __exportStar2(require_union(), exports);
    __exportStar2(require_intersect(), exports);
    __exportStar2(require_optional(), exports);
    __exportStar2(require_function(), exports);
    var instanceof_1 = require_instanceof();
    Object.defineProperty(exports, "InstanceOf", { enumerable: true, get: function() {
      return instanceof_1.InstanceOf;
    } });
    __exportStar2(require_lazy(), exports);
    __exportStar2(require_constraint(), exports);
    __exportStar2(require_brand(), exports);
    __exportStar2(require_decorator(), exports);
  }
});

// node_modules/axios/lib/helpers/bind.js
var require_bind = __commonJS({
  "node_modules/axios/lib/helpers/bind.js"(exports, module2) {
    "use strict";
    module2.exports = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };
  }
});

// node_modules/axios/lib/utils.js
var require_utils = __commonJS({
  "node_modules/axios/lib/utils.js"(exports, module2) {
    "use strict";
    var bind = require_bind();
    var toString = Object.prototype.toString;
    var kindOf = function(cache) {
      return function(thing) {
        var str = toString.call(thing);
        return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
      };
    }(/* @__PURE__ */ Object.create(null));
    function kindOfTest(type) {
      type = type.toLowerCase();
      return function isKindOf(thing) {
        return kindOf(thing) === type;
      };
    }
    function isArray(val) {
      return Array.isArray(val);
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    var isArrayBuffer = kindOfTest("ArrayBuffer");
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject(val) {
      return val !== null && typeof val === "object";
    }
    function isPlainObject(val) {
      if (kindOf(val) !== "object") {
        return false;
      }
      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    var isDate = kindOfTest("Date");
    var isFile = kindOfTest("File");
    var isBlob = kindOfTest("Blob");
    var isFileList = kindOfTest("FileList");
    function isFunction(val) {
      return toString.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    function isFormData(thing) {
      var pattern = "[object FormData]";
      return thing && (typeof FormData === "function" && thing instanceof FormData || toString.call(thing) === pattern || isFunction(thing.toString) && thing.toString() === pattern);
    }
    var isURLSearchParams = kindOfTest("URLSearchParams");
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge() {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }
      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }
    function stripBOM(content) {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    function inherits(constructor, superConstructor, props, descriptors) {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors);
      constructor.prototype.constructor = constructor;
      props && Object.assign(constructor.prototype, props);
    }
    function toFlatObject(sourceObj, destObj, filter) {
      var props;
      var i;
      var prop;
      var merged = {};
      destObj = destObj || {};
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if (!merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = Object.getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    }
    function endsWith(str, searchString, position) {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      var lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    }
    function toArray(thing) {
      if (!thing)
        return null;
      var i = thing.length;
      if (isUndefined(i))
        return null;
      var arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    }
    var isTypedArray = function(TypedArray) {
      return function(thing) {
        return TypedArray && thing instanceof TypedArray;
      };
    }(typeof Uint8Array !== "undefined" && Object.getPrototypeOf(Uint8Array));
    module2.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge,
      extend,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray,
      isTypedArray,
      isFileList
    };
  }
});

// node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "node_modules/axios/lib/helpers/buildURL.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module2.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + "=" + encode(v));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }
});

// node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "node_modules/axios/lib/core/InterceptorManager.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };
    module2.exports = InterceptorManager;
  }
});

// node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
  }
});

// node_modules/axios/lib/core/AxiosError.js
var require_AxiosError = __commonJS({
  "node_modules/axios/lib/core/AxiosError.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    function AxiosError(message, code, config, request, response) {
      Error.call(this);
      this.message = message;
      this.name = "AxiosError";
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      response && (this.response = response);
    }
    utils.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      }
    });
    var prototype = AxiosError.prototype;
    var descriptors = {};
    [
      "ERR_BAD_OPTION_VALUE",
      "ERR_BAD_OPTION",
      "ECONNABORTED",
      "ETIMEDOUT",
      "ERR_NETWORK",
      "ERR_FR_TOO_MANY_REDIRECTS",
      "ERR_DEPRECATED",
      "ERR_BAD_RESPONSE",
      "ERR_BAD_REQUEST",
      "ERR_CANCELED"
      // eslint-disable-next-line func-names
    ].forEach(function(code) {
      descriptors[code] = { value: code };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype, "isAxiosError", { value: true });
    AxiosError.from = function(error, code, config, request, response, customProps) {
      var axiosError = Object.create(prototype);
      utils.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      });
      AxiosError.call(axiosError, error.message, code, config, request, response);
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    module2.exports = AxiosError;
  }
});

// node_modules/axios/lib/defaults/transitional.js
var require_transitional = __commonJS({
  "node_modules/axios/lib/defaults/transitional.js"(exports, module2) {
    "use strict";
    module2.exports = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
  }
});

// node_modules/axios/lib/helpers/toFormData.js
var require_toFormData = __commonJS({
  "node_modules/axios/lib/helpers/toFormData.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    function toFormData(obj, formData) {
      formData = formData || new FormData();
      var stack = [];
      function convertValue(value) {
        if (value === null)
          return "";
        if (utils.isDate(value)) {
          return value.toISOString();
        }
        if (utils.isArrayBuffer(value) || utils.isTypedArray(value)) {
          return typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
        }
        return value;
      }
      function build(data, parentKey) {
        if (utils.isPlainObject(data) || utils.isArray(data)) {
          if (stack.indexOf(data) !== -1) {
            throw Error("Circular reference detected in " + parentKey);
          }
          stack.push(data);
          utils.forEach(data, function each(value, key) {
            if (utils.isUndefined(value))
              return;
            var fullKey = parentKey ? parentKey + "." + key : key;
            var arr;
            if (value && !parentKey && typeof value === "object") {
              if (utils.endsWith(key, "{}")) {
                value = JSON.stringify(value);
              } else if (utils.endsWith(key, "[]") && (arr = utils.toArray(value))) {
                arr.forEach(function(el) {
                  !utils.isUndefined(el) && formData.append(fullKey, convertValue(el));
                });
                return;
              }
            }
            build(value, fullKey);
          });
          stack.pop();
        } else {
          formData.append(parentKey, convertValue(data));
        }
      }
      build(obj);
      return formData;
    }
    module2.exports = toFormData;
  }
});

// node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "node_modules/axios/lib/core/settle.js"(exports, module2) {
    "use strict";
    var AxiosError = require_AxiosError();
    module2.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError(
          "Request failed with status code " + response.status,
          [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    };
  }
});

// node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "node_modules/axios/lib/helpers/cookies.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = utils.isStandardBrowserEnv() ? (
      // Standard browser envs support document.cookie
      function standardBrowserEnv() {
        return {
          write: function write(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value));
            if (utils.isNumber(expires)) {
              cookie.push("expires=" + new Date(expires).toGMTString());
            }
            if (utils.isString(path)) {
              cookie.push("path=" + path);
            }
            if (utils.isString(domain)) {
              cookie.push("domain=" + domain);
            }
            if (secure === true) {
              cookie.push("secure");
            }
            document.cookie = cookie.join("; ");
          },
          read: function read(name) {
            var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
          },
          remove: function remove(name) {
            this.write(name, "", Date.now() - 864e5);
          }
        };
      }()
    ) : (
      // Non standard browser env (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv() {
        return {
          write: function write() {
          },
          read: function read() {
            return null;
          },
          remove: function remove() {
          }
        };
      }()
    );
  }
});

// node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module2) {
    "use strict";
    module2.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    };
  }
});

// node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "node_modules/axios/lib/helpers/combineURLs.js"(exports, module2) {
    "use strict";
    module2.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "node_modules/axios/lib/core/buildFullPath.js"(exports, module2) {
    "use strict";
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module2.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  }
});

// node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "node_modules/axios/lib/helpers/parseHeaders.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module2.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = utils.isStandardBrowserEnv() ? (
      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
      function standardBrowserEnv() {
        var msie = /(msie|trident)/i.test(navigator.userAgent);
        var urlParsingNode = document.createElement("a");
        var originURL;
        function resolveURL(url) {
          var href = url;
          if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
          }
          urlParsingNode.setAttribute("href", href);
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
          };
        }
        originURL = resolveURL(window.location.href);
        return function isURLSameOrigin(requestURL) {
          var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      }()
    ) : (
      // Non standard browser envs (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv() {
        return function isURLSameOrigin() {
          return true;
        };
      }()
    );
  }
});

// node_modules/axios/lib/cancel/CanceledError.js
var require_CanceledError = __commonJS({
  "node_modules/axios/lib/cancel/CanceledError.js"(exports, module2) {
    "use strict";
    var AxiosError = require_AxiosError();
    var utils = require_utils();
    function CanceledError(message) {
      AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED);
      this.name = "CanceledError";
    }
    utils.inherits(CanceledError, AxiosError, {
      __CANCEL__: true
    });
    module2.exports = CanceledError;
  }
});

// node_modules/axios/lib/helpers/parseProtocol.js
var require_parseProtocol = __commonJS({
  "node_modules/axios/lib/helpers/parseProtocol.js"(exports, module2) {
    "use strict";
    module2.exports = function parseProtocol(url) {
      var match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || "";
    };
  }
});

// node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "node_modules/axios/lib/adapters/xhr.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var settle = require_settle();
    var cookies = require_cookies();
    var buildURL = require_buildURL();
    var buildFullPath = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var transitionalDefaults = require_transitional();
    var AxiosError = require_AxiosError();
    var CanceledError = require_CanceledError();
    var parseProtocol = require_parseProtocol();
    module2.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", onCanceled);
          }
        }
        if (utils.isFormData(requestData) && utils.isStandardBrowserEnv()) {
          delete requestHeaders["Content-Type"];
        }
        var request = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config, request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
          var transitional = config.transitional || transitionalDefaults;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(new AxiosError(
            timeoutErrorMessage,
            transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
            config,
            request
          ));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request.setRequestHeader(key, val);
            }
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken || config.signal) {
          onCanceled = function(cancel) {
            if (!request) {
              return;
            }
            reject(!cancel || cancel && cancel.type ? new CanceledError() : cancel);
            request.abort();
            request = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
          }
        }
        if (!requestData) {
          requestData = null;
        }
        var protocol = parseProtocol(fullPath);
        if (protocol && ["http", "https", "file"].indexOf(protocol) === -1) {
          reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config));
          return;
        }
        request.send(requestData);
      });
    };
  }
});

// node_modules/axios/lib/helpers/null.js
var require_null = __commonJS({
  "node_modules/axios/lib/helpers/null.js"(exports, module2) {
    module2.exports = null;
  }
});

// node_modules/axios/lib/defaults/index.js
var require_defaults = __commonJS({
  "node_modules/axios/lib/defaults/index.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var normalizeHeaderName = require_normalizeHeaderName();
    var AxiosError = require_AxiosError();
    var transitionalDefaults = require_transitional();
    var toFormData = require_toFormData();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
        adapter = require_xhr();
      }
      return adapter;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: transitionalDefaults,
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        var isObjectPayload = utils.isObject(data);
        var contentType = headers && headers["Content-Type"];
        var isFileList;
        if ((isFileList = utils.isFileList(data)) || isObjectPayload && contentType === "multipart/form-data") {
          var _FormData = this.env && this.env.FormData;
          return toFormData(isFileList ? { "files[]": data } : data, _FormData && new _FormData());
        } else if (isObjectPayload || contentType === "application/json") {
          setContentTypeIfUnset(headers, "application/json");
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
        if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: require_null()
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*"
        }
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module2.exports = defaults;
  }
});

// node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "node_modules/axios/lib/core/transformData.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var defaults = require_defaults();
    module2.exports = function transformData(data, headers, fns) {
      var context = this || defaults;
      utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });
      return data;
    };
  }
});

// node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "node_modules/axios/lib/cancel/isCancel.js"(exports, module2) {
    "use strict";
    module2.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }
});

// node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "node_modules/axios/lib/core/dispatchRequest.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    var CanceledError = require_CanceledError();
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new CanceledError();
      }
    }
    module2.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData.call(
        config,
        config.data,
        config.headers,
        config.transformRequest
      );
      config.headers = utils.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );
      utils.forEach(
        ["delete", "get", "head", "post", "put", "patch", "common"],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          response.data,
          response.headers,
          config.transformResponse
        );
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "node_modules/axios/lib/core/mergeConfig.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        }
      }
      function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      var mergeMap = {
        "url": valueFromConfig2,
        "method": valueFromConfig2,
        "data": valueFromConfig2,
        "baseURL": defaultToConfig2,
        "transformRequest": defaultToConfig2,
        "transformResponse": defaultToConfig2,
        "paramsSerializer": defaultToConfig2,
        "timeout": defaultToConfig2,
        "timeoutMessage": defaultToConfig2,
        "withCredentials": defaultToConfig2,
        "adapter": defaultToConfig2,
        "responseType": defaultToConfig2,
        "xsrfCookieName": defaultToConfig2,
        "xsrfHeaderName": defaultToConfig2,
        "onUploadProgress": defaultToConfig2,
        "onDownloadProgress": defaultToConfig2,
        "decompress": defaultToConfig2,
        "maxContentLength": defaultToConfig2,
        "maxBodyLength": defaultToConfig2,
        "beforeRedirect": defaultToConfig2,
        "transport": defaultToConfig2,
        "httpAgent": defaultToConfig2,
        "httpsAgent": defaultToConfig2,
        "cancelToken": defaultToConfig2,
        "socketPath": defaultToConfig2,
        "responseEncoding": defaultToConfig2,
        "validateStatus": mergeDirectKeys
      };
      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    };
  }
});

// node_modules/axios/lib/env/data.js
var require_data = __commonJS({
  "node_modules/axios/lib/env/data.js"(exports, module2) {
    module2.exports = {
      "version": "0.27.2"
    };
  }
});

// node_modules/axios/lib/helpers/validator.js
var require_validator = __commonJS({
  "node_modules/axios/lib/helpers/validator.js"(exports, module2) {
    "use strict";
    var VERSION = require_data().version;
    var AxiosError = require_AxiosError();
    var validators = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i) {
      validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return function(value, opt, opts) {
        if (validator === false) {
          throw new AxiosError(
            formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
            AxiosError.ERR_DEPRECATED
          );
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator ? validator(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === void 0 || validator(value, opt, options);
          if (result !== true) {
            throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
        }
      }
    }
    module2.exports = {
      assertOptions,
      validators
    };
  }
});

// node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "node_modules/axios/lib/core/Axios.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var buildURL = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    var buildFullPath = require_buildFullPath();
    var validator = require_validator();
    var validators = validator.validators;
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(configOrUrl, config) {
      if (typeof configOrUrl === "string") {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }
      config = mergeConfig(this.defaults, config);
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = "get";
      }
      var transitional = config.transitional;
      if (transitional !== void 0) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      var promise;
      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, void 0];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }
        return promise;
      }
      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }
      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      var fullPath = buildFullPath(config.baseURL, config.url);
      return buildURL(fullPath, config.params, config.paramsSerializer);
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url,
            data
          }));
        };
      }
      Axios.prototype[method] = generateHTTPMethod();
      Axios.prototype[method + "Form"] = generateHTTPMethod(true);
    });
    module2.exports = Axios;
  }
});

// node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "node_modules/axios/lib/cancel/CancelToken.js"(exports, module2) {
    "use strict";
    var CanceledError = require_CanceledError();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      this.promise.then(function(cancel) {
        if (!token._listeners)
          return;
        var i;
        var l = token._listeners.length;
        for (i = 0; i < l; i++) {
          token._listeners[i](cancel);
        }
        token._listeners = null;
      });
      this.promise.then = function(onfulfilled) {
        var _resolve;
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new CanceledError(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };
    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token,
        cancel
      };
    };
    module2.exports = CancelToken;
  }
});

// node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "node_modules/axios/lib/helpers/spread.js"(exports, module2) {
    "use strict";
    module2.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS({
  "node_modules/axios/lib/helpers/isAxiosError.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function isAxiosError(payload) {
      return utils.isObject(payload) && payload.isAxiosError === true;
    };
  }
});

// node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "node_modules/axios/lib/axios.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var bind = require_bind();
    var Axios = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios = createInstance(defaults);
    axios.Axios = Axios;
    axios.CanceledError = require_CanceledError();
    axios.CancelToken = require_CancelToken();
    axios.isCancel = require_isCancel();
    axios.VERSION = require_data().version;
    axios.toFormData = require_toFormData();
    axios.AxiosError = require_AxiosError();
    axios.Cancel = axios.CanceledError;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = require_spread();
    axios.isAxiosError = require_isAxiosError();
    module2.exports = axios;
    module2.exports.default = axios;
  }
});

// node_modules/axios/index.js
var require_axios2 = __commonJS({
  "node_modules/axios/index.js"(exports, module2) {
    module2.exports = require_axios();
  }
});

// node_modules/tslib/tslib.es6.js
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldIn: () => __classPrivateFieldIn,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __read: () => __read,
  __rest: () => __rest,
  __spread: () => __spread,
  __spreadArray: () => __spreadArray,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values
});
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __exportStar(m, o) {
  for (var p in m)
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
      __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
        __createBinding(result, mod, k);
  }
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
    throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}
var extendStatics, __assign, __createBinding, __setModuleDefault;
var init_tslib_es6 = __esm({
  "node_modules/tslib/tslib.es6.js"() {
    extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (Object.prototype.hasOwnProperty.call(b2, p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    __createBinding = Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    };
  }
});

// node_modules/lower-case/dist/index.js
var require_dist = __commonJS({
  "node_modules/lower-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.lowerCase = exports.localeLowerCase = void 0;
    var SUPPORTED_LOCALE = {
      tr: {
        regexp: /\u0130|\u0049|\u0049\u0307/g,
        map: {
          \u0130: "i",
          I: "\u0131",
          I\u0307: "i"
        }
      },
      az: {
        regexp: /\u0130/g,
        map: {
          \u0130: "i",
          I: "\u0131",
          I\u0307: "i"
        }
      },
      lt: {
        regexp: /\u0049|\u004A|\u012E|\u00CC|\u00CD|\u0128/g,
        map: {
          I: "i\u0307",
          J: "j\u0307",
          \u012E: "\u012F\u0307",
          \u00CC: "i\u0307\u0300",
          \u00CD: "i\u0307\u0301",
          \u0128: "i\u0307\u0303"
        }
      }
    };
    function localeLowerCase(str, locale) {
      var lang = SUPPORTED_LOCALE[locale.toLowerCase()];
      if (lang)
        return lowerCase(str.replace(lang.regexp, function(m) {
          return lang.map[m];
        }));
      return lowerCase(str);
    }
    exports.localeLowerCase = localeLowerCase;
    function lowerCase(str) {
      return str.toLowerCase();
    }
    exports.lowerCase = lowerCase;
  }
});

// node_modules/no-case/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/no-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.noCase = void 0;
    var lower_case_1 = require_dist();
    var DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];
    var DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;
    function noCase(input, options) {
      if (options === void 0) {
        options = {};
      }
      var _a = options.splitRegexp, splitRegexp = _a === void 0 ? DEFAULT_SPLIT_REGEXP : _a, _b = options.stripRegexp, stripRegexp = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b, _c = options.transform, transform = _c === void 0 ? lower_case_1.lowerCase : _c, _d = options.delimiter, delimiter = _d === void 0 ? " " : _d;
      var result = replace(replace(input, splitRegexp, "$1\0$2"), stripRegexp, "\0");
      var start = 0;
      var end = result.length;
      while (result.charAt(start) === "\0")
        start++;
      while (result.charAt(end - 1) === "\0")
        end--;
      return result.slice(start, end).split("\0").map(transform).join(delimiter);
    }
    exports.noCase = noCase;
    function replace(input, re, value) {
      if (re instanceof RegExp)
        return input.replace(re, value);
      return re.reduce(function(input2, re2) {
        return input2.replace(re2, value);
      }, input);
    }
  }
});

// node_modules/pascal-case/dist/index.js
var require_dist3 = __commonJS({
  "node_modules/pascal-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pascalCase = exports.pascalCaseTransformMerge = exports.pascalCaseTransform = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var no_case_1 = require_dist2();
    function pascalCaseTransform(input, index) {
      var firstChar = input.charAt(0);
      var lowerChars = input.substr(1).toLowerCase();
      if (index > 0 && firstChar >= "0" && firstChar <= "9") {
        return "_" + firstChar + lowerChars;
      }
      return "" + firstChar.toUpperCase() + lowerChars;
    }
    exports.pascalCaseTransform = pascalCaseTransform;
    function pascalCaseTransformMerge(input) {
      return input.charAt(0).toUpperCase() + input.slice(1).toLowerCase();
    }
    exports.pascalCaseTransformMerge = pascalCaseTransformMerge;
    function pascalCase(input, options) {
      if (options === void 0) {
        options = {};
      }
      return no_case_1.noCase(input, tslib_1.__assign({ delimiter: "", transform: pascalCaseTransform }, options));
    }
    exports.pascalCase = pascalCase;
  }
});

// node_modules/camel-case/dist/index.js
var require_dist4 = __commonJS({
  "node_modules/camel-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.camelCase = exports.camelCaseTransformMerge = exports.camelCaseTransform = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var pascal_case_1 = require_dist3();
    function camelCaseTransform(input, index) {
      if (index === 0)
        return input.toLowerCase();
      return pascal_case_1.pascalCaseTransform(input, index);
    }
    exports.camelCaseTransform = camelCaseTransform;
    function camelCaseTransformMerge(input, index) {
      if (index === 0)
        return input.toLowerCase();
      return pascal_case_1.pascalCaseTransformMerge(input);
    }
    exports.camelCaseTransformMerge = camelCaseTransformMerge;
    function camelCase(input, options) {
      if (options === void 0) {
        options = {};
      }
      return pascal_case_1.pascalCase(input, tslib_1.__assign({ transform: camelCaseTransform }, options));
    }
    exports.camelCase = camelCase;
  }
});

// node_modules/dot-case/dist/index.js
var require_dist5 = __commonJS({
  "node_modules/dot-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.dotCase = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var no_case_1 = require_dist2();
    function dotCase(input, options) {
      if (options === void 0) {
        options = {};
      }
      return no_case_1.noCase(input, tslib_1.__assign({ delimiter: "." }, options));
    }
    exports.dotCase = dotCase;
  }
});

// node_modules/snake-case/dist/index.js
var require_dist6 = __commonJS({
  "node_modules/snake-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.snakeCase = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var dot_case_1 = require_dist5();
    function snakeCase(input, options) {
      if (options === void 0) {
        options = {};
      }
      return dot_case_1.dotCase(input, tslib_1.__assign({ delimiter: "_" }, options));
    }
    exports.snakeCase = snakeCase;
  }
});

// node_modules/upper-case-first/dist/index.js
var require_dist7 = __commonJS({
  "node_modules/upper-case-first/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.upperCaseFirst = void 0;
    function upperCaseFirst(input) {
      return input.charAt(0).toUpperCase() + input.substr(1);
    }
    exports.upperCaseFirst = upperCaseFirst;
  }
});

// node_modules/capital-case/dist/index.js
var require_dist8 = __commonJS({
  "node_modules/capital-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.capitalCase = exports.capitalCaseTransform = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var no_case_1 = require_dist2();
    var upper_case_first_1 = require_dist7();
    function capitalCaseTransform(input) {
      return upper_case_first_1.upperCaseFirst(input.toLowerCase());
    }
    exports.capitalCaseTransform = capitalCaseTransform;
    function capitalCase(input, options) {
      if (options === void 0) {
        options = {};
      }
      return no_case_1.noCase(input, tslib_1.__assign({ delimiter: " ", transform: capitalCaseTransform }, options));
    }
    exports.capitalCase = capitalCase;
  }
});

// node_modules/header-case/dist/index.js
var require_dist9 = __commonJS({
  "node_modules/header-case/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.headerCase = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var capital_case_1 = require_dist8();
    function headerCase(input, options) {
      if (options === void 0) {
        options = {};
      }
      return capital_case_1.capitalCase(input, tslib_1.__assign({ delimiter: "-" }, options));
    }
    exports.headerCase = headerCase;
  }
});

// node_modules/axios-case-converter/lib/decorators.js
var require_decorators = __commonJS({
  "node_modules/axios-case-converter/lib/decorators.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.preserveSpecificKeys = exports.applyCaseOptions = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var applyCaseOptions = function(fn, defaultOptions) {
      return function(input, options) {
        return fn(input, tslib_1.__assign(tslib_1.__assign({}, defaultOptions), options));
      };
    };
    exports.applyCaseOptions = applyCaseOptions;
    var preserveSpecificKeys = function(fn, keys) {
      var condition = typeof keys === "function" ? keys : function(input) {
        return keys.includes(input);
      };
      return function(input, options) {
        return condition(input, options) ? input : fn(input, options);
      };
    };
    exports.preserveSpecificKeys = preserveSpecificKeys;
  }
});

// node_modules/axios-case-converter/lib/util.js
var require_util2 = __commonJS({
  "node_modules/axios-case-converter/lib/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isAxiosHeaders = exports.isTransformable = exports.isPlainObject = exports.isFormData = exports.isURLSearchParams = void 0;
    var isURLSearchParams = function(value) {
      return typeof URLSearchParams !== "undefined" && value instanceof URLSearchParams;
    };
    exports.isURLSearchParams = isURLSearchParams;
    var isFormData = function(value) {
      return typeof FormData !== "undefined" && value instanceof FormData;
    };
    exports.isFormData = isFormData;
    var isPlainObject = function(value) {
      if (value == null) {
        return false;
      }
      var proto = Object.getPrototypeOf(value);
      return proto === null || proto === Object.prototype;
    };
    exports.isPlainObject = isPlainObject;
    var isTransformable = function(value) {
      return Array.isArray(value) || (0, exports.isPlainObject)(value) || (0, exports.isFormData)(value) || (0, exports.isURLSearchParams)(value);
    };
    exports.isTransformable = isTransformable;
    var isAxiosHeaders = function(value) {
      var _a, _b;
      if (value == null) {
        return false;
      }
      return ((_b = (_a = Object.getPrototypeOf(value)) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) === "AxiosHeaders";
    };
    exports.isAxiosHeaders = isAxiosHeaders;
  }
});

// node_modules/axios-case-converter/lib/transformers.js
var require_transformers = __commonJS({
  "node_modules/axios-case-converter/lib/transformers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createObjectTransformers = exports.createObjectTransformerOf = exports.createObjectTransformer = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var camel_case_1 = require_dist4();
    var snake_case_1 = require_dist6();
    var header_case_1 = require_dist9();
    var decorators_1 = require_decorators();
    var util_1 = require_util2();
    var caseFunctions = {
      snake: snake_case_1.snakeCase,
      camel: camel_case_1.camelCase,
      header: header_case_1.headerCase
    };
    var transformObjectUsingCallbackRecursive = function(data, fn, overwrite) {
      var e_1, _a, e_2, _b, e_3, _c;
      if (!(0, util_1.isTransformable)(data)) {
        return data;
      }
      if (((0, util_1.isFormData)(data) || (0, util_1.isURLSearchParams)(data)) && (!data.entries || overwrite && !data.delete)) {
        var type = (0, util_1.isFormData)(data) ? "FormData" : "URLSearchParams";
        var polyfill = (0, util_1.isFormData)(data) ? "https://github.com/jimmywarting/FormData" : "https://github.com/jerrybendy/url-search-params-polyfill";
        if (typeof navigator !== "undefined" && navigator.product === "ReactNative") {
          console.warn("Be careful that ".concat(type, " cannot be transformed on React Native. If you intentionally implemented, ignore this kind of warning: https://facebook.github.io/react-native/docs/debugging.html"));
        } else {
          if (!data.entries) {
            console.warn("You must use polyfill of ".concat(type, ".prototype.entries() on Internet Explorer or Safari: ").concat(polyfill));
          }
          if (overwrite && !data.delete) {
            console.warn("You must use polyfill of ".concat(type, ".prototype.delete() on Internet Explorer or Safari: ").concat(polyfill));
          }
        }
        return data;
      }
      var prototype = Object.getPrototypeOf(data);
      var store = overwrite ? data : !prototype ? /* @__PURE__ */ Object.create(null) : new prototype.constructor();
      var series;
      if ((0, util_1.isFormData)(data) || (0, util_1.isURLSearchParams)(data)) {
        series = data.entries();
        if (overwrite) {
          series = tslib_1.__spreadArray([], tslib_1.__read(series), false);
          try {
            for (var series_1 = tslib_1.__values(series), series_1_1 = series_1.next(); !series_1_1.done; series_1_1 = series_1.next()) {
              var _d = tslib_1.__read(series_1_1.value, 1), key = _d[0];
              data.delete(key);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (series_1_1 && !series_1_1.done && (_a = series_1.return))
                _a.call(series_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
        }
      } else {
        series = Object.entries(data);
        if (overwrite && !Array.isArray(data)) {
          try {
            for (var series_2 = tslib_1.__values(series), series_2_1 = series_2.next(); !series_2_1.done; series_2_1 = series_2.next()) {
              var _e = tslib_1.__read(series_2_1.value, 1), key = _e[0];
              delete data[key];
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (series_2_1 && !series_2_1.done && (_b = series_2.return))
                _b.call(series_2);
            } finally {
              if (e_2)
                throw e_2.error;
            }
          }
        }
      }
      try {
        for (var series_3 = tslib_1.__values(series), series_3_1 = series_3.next(); !series_3_1.done; series_3_1 = series_3.next()) {
          var _f = tslib_1.__read(series_3_1.value, 2), key = _f[0], value = _f[1];
          if ((0, util_1.isFormData)(store) || (0, util_1.isURLSearchParams)(store)) {
            store.append(fn(key), value);
          } else if (key !== "__proto__") {
            store[fn(typeof key === "string" ? key : "".concat(key))] = transformObjectUsingCallbackRecursive(value, fn, overwrite);
          }
        }
      } catch (e_3_1) {
        e_3 = { error: e_3_1 };
      } finally {
        try {
          if (series_3_1 && !series_3_1.done && (_c = series_3.return))
            _c.call(series_3);
        } finally {
          if (e_3)
            throw e_3.error;
        }
      }
      return store;
    };
    var transformObjectUsingCallback = function(data, fn, options) {
      fn = (0, decorators_1.applyCaseOptions)(fn, tslib_1.__assign({ stripRegexp: /[^A-Z0-9[\]]+/gi }, options === null || options === void 0 ? void 0 : options.caseOptions));
      if (options === null || options === void 0 ? void 0 : options.preservedKeys) {
        fn = (0, decorators_1.preserveSpecificKeys)(fn, options.preservedKeys);
      }
      return transformObjectUsingCallbackRecursive(data, fn, (options === null || options === void 0 ? void 0 : options.overwrite) || false);
    };
    var createObjectTransformer = function(fn) {
      return function(data, options) {
        return transformObjectUsingCallback(data, fn, options);
      };
    };
    exports.createObjectTransformer = createObjectTransformer;
    var createObjectTransformerOf = function(functionName, options) {
      return (0, exports.createObjectTransformer)((options === null || options === void 0 ? void 0 : options[functionName]) || caseFunctions[functionName]);
    };
    exports.createObjectTransformerOf = createObjectTransformerOf;
    var createObjectTransformers = function(options) {
      var e_4, _a;
      var functionNames = Object.keys(caseFunctions);
      var objectTransformers = {};
      try {
        for (var functionNames_1 = tslib_1.__values(functionNames), functionNames_1_1 = functionNames_1.next(); !functionNames_1_1.done; functionNames_1_1 = functionNames_1.next()) {
          var functionName = functionNames_1_1.value;
          objectTransformers[functionName] = (0, exports.createObjectTransformerOf)(functionName, options);
        }
      } catch (e_4_1) {
        e_4 = { error: e_4_1 };
      } finally {
        try {
          if (functionNames_1_1 && !functionNames_1_1.done && (_a = functionNames_1.return))
            _a.call(functionNames_1);
        } finally {
          if (e_4)
            throw e_4.error;
        }
      }
      return objectTransformers;
    };
    exports.createObjectTransformers = createObjectTransformers;
  }
});

// node_modules/axios-case-converter/lib/middleware.js
var require_middleware = __commonJS({
  "node_modules/axios-case-converter/lib/middleware.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.applyCaseMiddleware = exports.createCamelResponseTransformer = exports.createSnakeRequestTransformer = exports.createSnakeParamsInterceptor = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var transformers_1 = require_transformers();
    var util_1 = require_util2();
    var createSnakeParamsInterceptor = function(options) {
      var snake = (0, transformers_1.createObjectTransformers)(options === null || options === void 0 ? void 0 : options.caseFunctions).snake;
      return function(config) {
        if (config.params) {
          config.params = snake(config.params, options);
        }
        return config;
      };
    };
    exports.createSnakeParamsInterceptor = createSnakeParamsInterceptor;
    var createSnakeRequestTransformer = function(options) {
      var _a = (0, transformers_1.createObjectTransformers)(options === null || options === void 0 ? void 0 : options.caseFunctions), snake = _a.snake, header = _a.header;
      return function(data, headers) {
        overwriteHeadersOrNoop(headers, header, options, [
          "common",
          "delete",
          "get",
          "head",
          "post",
          "put",
          "patch"
        ]);
        return snake(data, options);
      };
    };
    exports.createSnakeRequestTransformer = createSnakeRequestTransformer;
    var createCamelResponseTransformer = function(options) {
      var camel = (0, transformers_1.createObjectTransformers)(options === null || options === void 0 ? void 0 : options.caseFunctions).camel;
      return function(data, headers) {
        overwriteHeadersOrNoop(headers, camel, options);
        return camel(data, options);
      };
    };
    exports.createCamelResponseTransformer = createCamelResponseTransformer;
    var overwriteHeadersOrNoop = function(headers, fn, options, excludedKeys) {
      var e_1, _a, _b, _c;
      if ((options === null || options === void 0 ? void 0 : options.ignoreHeaders) || !(0, util_1.isPlainObject)(headers) && !(0, util_1.isAxiosHeaders)(headers)) {
        return;
      }
      try {
        for (var _d = tslib_1.__values(Object.entries(headers)), _e = _d.next(); !_e.done; _e = _d.next()) {
          var _f = tslib_1.__read(_e.value, 2), key = _f[0], value = _f[1];
          fn(value, tslib_1.__assign({ overwrite: true }, options));
          if ((excludedKeys || []).includes(key)) {
            continue;
          }
          if ((0, util_1.isAxiosHeaders)(headers)) {
            headers.delete(key);
            headers.set(Object.keys(fn((_b = {}, _b[key] = null, _b), options))[0], value, true);
          } else {
            delete headers[key];
            headers[Object.keys(fn((_c = {}, _c[key] = null, _c), options))[0]] = value;
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_e && !_e.done && (_a = _d.return))
            _a.call(_d);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
    };
    var applyCaseMiddleware = function(axios, options) {
      var _a, _b, _c;
      axios.defaults.transformRequest = tslib_1.__spreadArray([
        ((_a = options === null || options === void 0 ? void 0 : options.caseMiddleware) === null || _a === void 0 ? void 0 : _a.requestTransformer) || (0, exports.createSnakeRequestTransformer)(options)
      ], tslib_1.__read(Array.isArray(axios.defaults.transformRequest) ? axios.defaults.transformRequest : axios.defaults.transformRequest !== void 0 ? [axios.defaults.transformRequest] : []), false);
      axios.defaults.transformResponse = tslib_1.__spreadArray(tslib_1.__spreadArray([], tslib_1.__read(Array.isArray(axios.defaults.transformResponse) ? axios.defaults.transformResponse : axios.defaults.transformResponse !== void 0 ? [axios.defaults.transformResponse] : []), false), [
        ((_b = options === null || options === void 0 ? void 0 : options.caseMiddleware) === null || _b === void 0 ? void 0 : _b.responseTransformer) || (0, exports.createCamelResponseTransformer)(options)
      ], false);
      axios.interceptors.request.use(((_c = options === null || options === void 0 ? void 0 : options.caseMiddleware) === null || _c === void 0 ? void 0 : _c.requestInterceptor) || (0, exports.createSnakeParamsInterceptor)(options));
      return axios;
    };
    exports.applyCaseMiddleware = applyCaseMiddleware;
  }
});

// node_modules/axios-case-converter/lib/types.js
var require_types = __commonJS({
  "node_modules/axios-case-converter/lib/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/axios-case-converter/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/axios-case-converter/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var middleware_1 = require_middleware();
    exports.default = middleware_1.applyCaseMiddleware;
    tslib_1.__exportStar(require_types(), exports);
  }
});

// node_modules/ts-custom-error/dist/custom-error.js
var require_custom_error = __commonJS({
  "node_modules/ts-custom-error/dist/custom-error.js"(exports) {
    function fixProto(target, prototype) {
      var setPrototypeOf = Object.setPrototypeOf;
      setPrototypeOf ? setPrototypeOf(target, prototype) : target.__proto__ = prototype;
    }
    function fixStack(target, fn) {
      if (fn === void 0) {
        fn = target.constructor;
      }
      var captureStackTrace = Error.captureStackTrace;
      captureStackTrace && captureStackTrace(target, fn);
    }
    var __extends2 = function() {
      var _extendStatics = function extendStatics2(d, b) {
        _extendStatics = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) {
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
          }
        };
        return _extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        _extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var CustomError = function(_super) {
      __extends2(CustomError2, _super);
      function CustomError2(message, options) {
        var _newTarget = this.constructor;
        var _this = _super.call(this, message, options) || this;
        Object.defineProperty(_this, "name", {
          value: _newTarget.name,
          enumerable: false,
          configurable: true
        });
        fixProto(_this, _newTarget.prototype);
        fixStack(_this);
        return _this;
      }
      return CustomError2;
    }(Error);
    var __spreadArray2 = function(to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar)
              ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    function customErrorFactory(fn, parent) {
      if (parent === void 0) {
        parent = Error;
      }
      function CustomError2() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        if (!(this instanceof CustomError2))
          return new (CustomError2.bind.apply(CustomError2, __spreadArray2([void 0], args, false)))();
        parent.apply(this, args);
        Object.defineProperty(this, "name", {
          value: fn.name || parent.name,
          enumerable: false,
          configurable: true
        });
        fn.apply(this, args);
        fixStack(this, CustomError2);
      }
      return Object.defineProperties(CustomError2, {
        prototype: {
          value: Object.create(parent.prototype, {
            constructor: {
              value: CustomError2,
              writable: true,
              configurable: true
            }
          })
        }
      });
    }
    exports.CustomError = CustomError;
    exports.customErrorFactory = customErrorFactory;
  }
});

// node_modules/@doist/todoist-api-typescript/dist/types/errors.js
var require_errors2 = __commonJS({
  "node_modules/@doist/todoist-api-typescript/dist/types/errors.js"(exports) {
    "use strict";
    var __extends2 = exports && exports.__extends || function() {
      var extendStatics2 = function(d, b) {
        extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics2(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics2(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TodoistRequestError = void 0;
    var ts_custom_error_1 = require_custom_error();
    var authenticationErrorCodes = [401, 403];
    var TodoistRequestError = (
      /** @class */
      function(_super) {
        __extends2(TodoistRequestError2, _super);
        function TodoistRequestError2(message, httpStatusCode, responseData) {
          var _this = _super.call(this, message) || this;
          _this.message = message;
          _this.httpStatusCode = httpStatusCode;
          _this.responseData = responseData;
          _this.isAuthenticationError = function() {
            if (!_this.httpStatusCode) {
              return false;
            }
            return authenticationErrorCodes.includes(_this.httpStatusCode);
          };
          Object.defineProperty(_this, "name", { value: "TodoistRequestError" });
          return _this;
        }
        return TodoistRequestError2;
      }(ts_custom_error_1.CustomError)
    );
    exports.TodoistRequestError = TodoistRequestError;
  }
});

// node_modules/uuid/dist/commonjs-browser/rng.js
var require_rng = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/rng.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = rng;
    var getRandomValues;
    var rnds8 = new Uint8Array(16);
    function rng() {
      if (!getRandomValues) {
        getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
        if (!getRandomValues) {
          throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
        }
      }
      return getRandomValues(rnds8);
    }
  }
});

// node_modules/uuid/dist/commonjs-browser/regex.js
var require_regex = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/regex.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/validate.js
var require_validate = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/validate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _regex = _interopRequireDefault(require_regex());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function validate(uuid) {
      return typeof uuid === "string" && _regex.default.test(uuid);
    }
    var _default = validate;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/stringify.js
var require_stringify = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/stringify.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    exports.unsafeStringify = unsafeStringify;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).slice(1));
    }
    function unsafeStringify(arr, offset = 0) {
      return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
    }
    function stringify(arr, offset = 0) {
      const uuid = unsafeStringify(arr, offset);
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Stringified UUID is invalid");
      }
      return uuid;
    }
    var _default = stringify;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/v1.js
var require_v1 = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/v1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _rng = _interopRequireDefault(require_rng());
    var _stringify = require_stringify();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _nodeId;
    var _clockseq;
    var _lastMSecs = 0;
    var _lastNSecs = 0;
    function v1(options, buf, offset) {
      let i = buf && offset || 0;
      const b = buf || new Array(16);
      options = options || {};
      let node = options.node || _nodeId;
      let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
      if (node == null || clockseq == null) {
        const seedBytes = options.random || (options.rng || _rng.default)();
        if (node == null) {
          node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
        }
        if (clockseq == null) {
          clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
        }
      }
      let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
      let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
      const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
      if (dt < 0 && options.clockseq === void 0) {
        clockseq = clockseq + 1 & 16383;
      }
      if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
        nsecs = 0;
      }
      if (nsecs >= 1e4) {
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
      }
      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;
      msecs += 122192928e5;
      const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
      b[i++] = tl >>> 24 & 255;
      b[i++] = tl >>> 16 & 255;
      b[i++] = tl >>> 8 & 255;
      b[i++] = tl & 255;
      const tmh = msecs / 4294967296 * 1e4 & 268435455;
      b[i++] = tmh >>> 8 & 255;
      b[i++] = tmh & 255;
      b[i++] = tmh >>> 24 & 15 | 16;
      b[i++] = tmh >>> 16 & 255;
      b[i++] = clockseq >>> 8 | 128;
      b[i++] = clockseq & 255;
      for (let n = 0; n < 6; ++n) {
        b[i + n] = node[n];
      }
      return buf || (0, _stringify.unsafeStringify)(b);
    }
    var _default = v1;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/parse.js
var require_parse = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/parse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function parse(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Invalid UUID");
      }
      let v;
      const arr = new Uint8Array(16);
      arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
      arr[1] = v >>> 16 & 255;
      arr[2] = v >>> 8 & 255;
      arr[3] = v & 255;
      arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
      arr[5] = v & 255;
      arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
      arr[7] = v & 255;
      arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
      arr[9] = v & 255;
      arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
      arr[11] = v / 4294967296 & 255;
      arr[12] = v >>> 24 & 255;
      arr[13] = v >>> 16 & 255;
      arr[14] = v >>> 8 & 255;
      arr[15] = v & 255;
      return arr;
    }
    var _default = parse;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/v35.js
var require_v35 = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/v35.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.URL = exports.DNS = void 0;
    exports.default = v35;
    var _stringify = require_stringify();
    var _parse = _interopRequireDefault(require_parse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function stringToBytes(str) {
      str = unescape(encodeURIComponent(str));
      const bytes = [];
      for (let i = 0; i < str.length; ++i) {
        bytes.push(str.charCodeAt(i));
      }
      return bytes;
    }
    var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    exports.DNS = DNS;
    var URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
    exports.URL = URL2;
    function v35(name, version, hashfunc) {
      function generateUUID(value, namespace, buf, offset) {
        var _namespace;
        if (typeof value === "string") {
          value = stringToBytes(value);
        }
        if (typeof namespace === "string") {
          namespace = (0, _parse.default)(namespace);
        }
        if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {
          throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
        }
        let bytes = new Uint8Array(16 + value.length);
        bytes.set(namespace);
        bytes.set(value, namespace.length);
        bytes = hashfunc(bytes);
        bytes[6] = bytes[6] & 15 | version;
        bytes[8] = bytes[8] & 63 | 128;
        if (buf) {
          offset = offset || 0;
          for (let i = 0; i < 16; ++i) {
            buf[offset + i] = bytes[i];
          }
          return buf;
        }
        return (0, _stringify.unsafeStringify)(bytes);
      }
      try {
        generateUUID.name = name;
      } catch (err) {
      }
      generateUUID.DNS = DNS;
      generateUUID.URL = URL2;
      return generateUUID;
    }
  }
});

// node_modules/uuid/dist/commonjs-browser/md5.js
var require_md5 = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/md5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function md5(bytes) {
      if (typeof bytes === "string") {
        const msg = unescape(encodeURIComponent(bytes));
        bytes = new Uint8Array(msg.length);
        for (let i = 0; i < msg.length; ++i) {
          bytes[i] = msg.charCodeAt(i);
        }
      }
      return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
    }
    function md5ToHexEncodedArray(input) {
      const output = [];
      const length32 = input.length * 32;
      const hexTab = "0123456789abcdef";
      for (let i = 0; i < length32; i += 8) {
        const x = input[i >> 5] >>> i % 32 & 255;
        const hex = parseInt(hexTab.charAt(x >>> 4 & 15) + hexTab.charAt(x & 15), 16);
        output.push(hex);
      }
      return output;
    }
    function getOutputLength(inputLength8) {
      return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
    }
    function wordsToMd5(x, len) {
      x[len >> 5] |= 128 << len % 32;
      x[getOutputLength(len) - 1] = len;
      let a = 1732584193;
      let b = -271733879;
      let c = -1732584194;
      let d = 271733878;
      for (let i = 0; i < x.length; i += 16) {
        const olda = a;
        const oldb = b;
        const oldc = c;
        const oldd = d;
        a = md5ff(a, b, c, d, x[i], 7, -680876936);
        d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
        c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
        b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
        a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
        d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
        c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
        b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
        a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
        d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
        c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
        b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
        a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
        d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
        c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
        b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
        a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
        d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
        c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
        b = md5gg(b, c, d, a, x[i], 20, -373897302);
        a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
        d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
        c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
        b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
        a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
        d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
        c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
        b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
        a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
        d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
        c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
        b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
        a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
        d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
        c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
        b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
        a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
        d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
        c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
        b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
        a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
        d = md5hh(d, a, b, c, x[i], 11, -358537222);
        c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
        b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
        a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
        d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
        c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
        b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
        a = md5ii(a, b, c, d, x[i], 6, -198630844);
        d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
        c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
        b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
        a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
        d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
        c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
        b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
        a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
        d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
        c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
        b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
        a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
        d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
        c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
        b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
        a = safeAdd(a, olda);
        b = safeAdd(b, oldb);
        c = safeAdd(c, oldc);
        d = safeAdd(d, oldd);
      }
      return [a, b, c, d];
    }
    function bytesToWords(input) {
      if (input.length === 0) {
        return [];
      }
      const length8 = input.length * 8;
      const output = new Uint32Array(getOutputLength(length8));
      for (let i = 0; i < length8; i += 8) {
        output[i >> 5] |= (input[i / 8] & 255) << i % 32;
      }
      return output;
    }
    function safeAdd(x, y) {
      const lsw = (x & 65535) + (y & 65535);
      const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
      return msw << 16 | lsw & 65535;
    }
    function bitRotateLeft(num, cnt) {
      return num << cnt | num >>> 32 - cnt;
    }
    function md5cmn(q, a, b, x, s, t) {
      return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
    }
    function md5ff(a, b, c, d, x, s, t) {
      return md5cmn(b & c | ~b & d, a, b, x, s, t);
    }
    function md5gg(a, b, c, d, x, s, t) {
      return md5cmn(b & d | c & ~d, a, b, x, s, t);
    }
    function md5hh(a, b, c, d, x, s, t) {
      return md5cmn(b ^ c ^ d, a, b, x, s, t);
    }
    function md5ii(a, b, c, d, x, s, t) {
      return md5cmn(c ^ (b | ~d), a, b, x, s, t);
    }
    var _default = md5;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/v3.js
var require_v3 = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/v3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _md = _interopRequireDefault(require_md5());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v3 = (0, _v.default)("v3", 48, _md.default);
    var _default = v3;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/native.js
var require_native = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/native.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
    var _default = {
      randomUUID
    };
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/v4.js
var require_v4 = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/v4.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _native = _interopRequireDefault(require_native());
    var _rng = _interopRequireDefault(require_rng());
    var _stringify = require_stringify();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function v4(options, buf, offset) {
      if (_native.default.randomUUID && !buf && !options) {
        return _native.default.randomUUID();
      }
      options = options || {};
      const rnds = options.random || (options.rng || _rng.default)();
      rnds[6] = rnds[6] & 15 | 64;
      rnds[8] = rnds[8] & 63 | 128;
      if (buf) {
        offset = offset || 0;
        for (let i = 0; i < 16; ++i) {
          buf[offset + i] = rnds[i];
        }
        return buf;
      }
      return (0, _stringify.unsafeStringify)(rnds);
    }
    var _default = v4;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/sha1.js
var require_sha1 = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/sha1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    function f(s, x, y, z) {
      switch (s) {
        case 0:
          return x & y ^ ~x & z;
        case 1:
          return x ^ y ^ z;
        case 2:
          return x & y ^ x & z ^ y & z;
        case 3:
          return x ^ y ^ z;
      }
    }
    function ROTL(x, n) {
      return x << n | x >>> 32 - n;
    }
    function sha1(bytes) {
      const K = [1518500249, 1859775393, 2400959708, 3395469782];
      const H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
      if (typeof bytes === "string") {
        const msg = unescape(encodeURIComponent(bytes));
        bytes = [];
        for (let i = 0; i < msg.length; ++i) {
          bytes.push(msg.charCodeAt(i));
        }
      } else if (!Array.isArray(bytes)) {
        bytes = Array.prototype.slice.call(bytes);
      }
      bytes.push(128);
      const l = bytes.length / 4 + 2;
      const N = Math.ceil(l / 16);
      const M = new Array(N);
      for (let i = 0; i < N; ++i) {
        const arr = new Uint32Array(16);
        for (let j = 0; j < 16; ++j) {
          arr[j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
        }
        M[i] = arr;
      }
      M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
      M[N - 1][14] = Math.floor(M[N - 1][14]);
      M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
      for (let i = 0; i < N; ++i) {
        const W = new Uint32Array(80);
        for (let t = 0; t < 16; ++t) {
          W[t] = M[i][t];
        }
        for (let t = 16; t < 80; ++t) {
          W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
        }
        let a = H[0];
        let b = H[1];
        let c = H[2];
        let d = H[3];
        let e = H[4];
        for (let t = 0; t < 80; ++t) {
          const s = Math.floor(t / 20);
          const T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
          e = d;
          d = c;
          c = ROTL(b, 30) >>> 0;
          b = a;
          a = T;
        }
        H[0] = H[0] + a >>> 0;
        H[1] = H[1] + b >>> 0;
        H[2] = H[2] + c >>> 0;
        H[3] = H[3] + d >>> 0;
        H[4] = H[4] + e >>> 0;
      }
      return [H[0] >> 24 & 255, H[0] >> 16 & 255, H[0] >> 8 & 255, H[0] & 255, H[1] >> 24 & 255, H[1] >> 16 & 255, H[1] >> 8 & 255, H[1] & 255, H[2] >> 24 & 255, H[2] >> 16 & 255, H[2] >> 8 & 255, H[2] & 255, H[3] >> 24 & 255, H[3] >> 16 & 255, H[3] >> 8 & 255, H[3] & 255, H[4] >> 24 & 255, H[4] >> 16 & 255, H[4] >> 8 & 255, H[4] & 255];
    }
    var _default = sha1;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/v5.js
var require_v5 = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/v5.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _v = _interopRequireDefault(require_v35());
    var _sha = _interopRequireDefault(require_sha1());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var v5 = (0, _v.default)("v5", 80, _sha.default);
    var _default = v5;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/nil.js
var require_nil = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/nil.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = "00000000-0000-0000-0000-000000000000";
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/version.js
var require_version = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _validate = _interopRequireDefault(require_validate());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function version(uuid) {
      if (!(0, _validate.default)(uuid)) {
        throw TypeError("Invalid UUID");
      }
      return parseInt(uuid.slice(14, 15), 16);
    }
    var _default = version;
    exports.default = _default;
  }
});

// node_modules/uuid/dist/commonjs-browser/index.js
var require_commonjs_browser = __commonJS({
  "node_modules/uuid/dist/commonjs-browser/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "NIL", {
      enumerable: true,
      get: function get() {
        return _nil.default;
      }
    });
    Object.defineProperty(exports, "parse", {
      enumerable: true,
      get: function get() {
        return _parse.default;
      }
    });
    Object.defineProperty(exports, "stringify", {
      enumerable: true,
      get: function get() {
        return _stringify.default;
      }
    });
    Object.defineProperty(exports, "v1", {
      enumerable: true,
      get: function get() {
        return _v.default;
      }
    });
    Object.defineProperty(exports, "v3", {
      enumerable: true,
      get: function get() {
        return _v2.default;
      }
    });
    Object.defineProperty(exports, "v4", {
      enumerable: true,
      get: function get() {
        return _v3.default;
      }
    });
    Object.defineProperty(exports, "v5", {
      enumerable: true,
      get: function get() {
        return _v4.default;
      }
    });
    Object.defineProperty(exports, "validate", {
      enumerable: true,
      get: function get() {
        return _validate.default;
      }
    });
    Object.defineProperty(exports, "version", {
      enumerable: true,
      get: function get() {
        return _version.default;
      }
    });
    var _v = _interopRequireDefault(require_v1());
    var _v2 = _interopRequireDefault(require_v3());
    var _v3 = _interopRequireDefault(require_v4());
    var _v4 = _interopRequireDefault(require_v5());
    var _nil = _interopRequireDefault(require_nil());
    var _version = _interopRequireDefault(require_version());
    var _validate = _interopRequireDefault(require_validate());
    var _stringify = _interopRequireDefault(require_stringify());
    var _parse = _interopRequireDefault(require_parse());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
  }
});

// node_modules/@babel/runtime/helpers/interopRequireDefault.js
var require_interopRequireDefault = __commonJS({
  "node_modules/@babel/runtime/helpers/interopRequireDefault.js"(exports, module2) {
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    module2.exports = _interopRequireDefault, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/typeof.js
var require_typeof = __commonJS({
  "node_modules/@babel/runtime/helpers/typeof.js"(exports, module2) {
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return module2.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports, _typeof(obj);
    }
    module2.exports = _typeof, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/regeneratorRuntime.js
var require_regeneratorRuntime = __commonJS({
  "node_modules/@babel/runtime/helpers/regeneratorRuntime.js"(exports, module2) {
    var _typeof = require_typeof()["default"];
    function _regeneratorRuntime() {
      "use strict";
      module2.exports = _regeneratorRuntime = function _regeneratorRuntime2() {
        return exports2;
      }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
      var exports2 = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function(obj, key, desc) {
        obj[key] = desc.value;
      }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
      function define(obj, key, value) {
        return Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        }), obj[key];
      }
      try {
        define({}, "");
      } catch (err) {
        define = function define2(obj, key, value) {
          return obj[key] = value;
        };
      }
      function wrap(innerFn, outerFn, self, tryLocsList) {
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []);
        return defineProperty(generator, "_invoke", {
          value: makeInvokeMethod(innerFn, self, context)
        }), generator;
      }
      function tryCatch(fn, obj, arg) {
        try {
          return {
            type: "normal",
            arg: fn.call(obj, arg)
          };
        } catch (err) {
          return {
            type: "throw",
            arg: err
          };
        }
      }
      exports2.wrap = wrap;
      var ContinueSentinel = {};
      function Generator() {
      }
      function GeneratorFunction() {
      }
      function GeneratorFunctionPrototype() {
      }
      var IteratorPrototype = {};
      define(IteratorPrototype, iteratorSymbol, function() {
        return this;
      });
      var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([])));
      NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
      var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
      function defineIteratorMethods(prototype) {
        ["next", "throw", "return"].forEach(function(method) {
          define(prototype, method, function(arg) {
            return this._invoke(method, arg);
          });
        });
      }
      function AsyncIterator(generator, PromiseImpl) {
        function invoke(method, arg, resolve, reject) {
          var record = tryCatch(generator[method], generator, arg);
          if ("throw" !== record.type) {
            var result = record.arg, value = result.value;
            return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function(value2) {
              invoke("next", value2, resolve, reject);
            }, function(err) {
              invoke("throw", err, resolve, reject);
            }) : PromiseImpl.resolve(value).then(function(unwrapped) {
              result.value = unwrapped, resolve(result);
            }, function(error) {
              return invoke("throw", error, resolve, reject);
            });
          }
          reject(record.arg);
        }
        var previousPromise;
        defineProperty(this, "_invoke", {
          value: function value(method, arg) {
            function callInvokeWithMethodAndArg() {
              return new PromiseImpl(function(resolve, reject) {
                invoke(method, arg, resolve, reject);
              });
            }
            return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
          }
        });
      }
      function makeInvokeMethod(innerFn, self, context) {
        var state = "suspendedStart";
        return function(method, arg) {
          if ("executing" === state)
            throw new Error("Generator is already running");
          if ("completed" === state) {
            if ("throw" === method)
              throw arg;
            return doneResult();
          }
          for (context.method = method, context.arg = arg; ; ) {
            var delegate = context.delegate;
            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);
              if (delegateResult) {
                if (delegateResult === ContinueSentinel)
                  continue;
                return delegateResult;
              }
            }
            if ("next" === context.method)
              context.sent = context._sent = context.arg;
            else if ("throw" === context.method) {
              if ("suspendedStart" === state)
                throw state = "completed", context.arg;
              context.dispatchException(context.arg);
            } else
              "return" === context.method && context.abrupt("return", context.arg);
            state = "executing";
            var record = tryCatch(innerFn, self, context);
            if ("normal" === record.type) {
              if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel)
                continue;
              return {
                value: record.arg,
                done: context.done
              };
            }
            "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
          }
        };
      }
      function maybeInvokeDelegate(delegate, context) {
        var methodName = context.method, method = delegate.iterator[methodName];
        if (void 0 === method)
          return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = void 0, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
        var record = tryCatch(method, delegate.iterator, context.arg);
        if ("throw" === record.type)
          return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
        var info = record.arg;
        return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = void 0), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
      }
      function pushTryEntry(locs) {
        var entry = {
          tryLoc: locs[0]
        };
        1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
      }
      function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal", delete record.arg, entry.completion = record;
      }
      function Context(tryLocsList) {
        this.tryEntries = [{
          tryLoc: "root"
        }], tryLocsList.forEach(pushTryEntry, this), this.reset(true);
      }
      function values(iterable) {
        if (iterable) {
          var iteratorMethod = iterable[iteratorSymbol];
          if (iteratorMethod)
            return iteratorMethod.call(iterable);
          if ("function" == typeof iterable.next)
            return iterable;
          if (!isNaN(iterable.length)) {
            var i = -1, next = function next2() {
              for (; ++i < iterable.length; )
                if (hasOwn.call(iterable, i))
                  return next2.value = iterable[i], next2.done = false, next2;
              return next2.value = void 0, next2.done = true, next2;
            };
            return next.next = next;
          }
        }
        return {
          next: doneResult
        };
      }
      function doneResult() {
        return {
          value: void 0,
          done: true
        };
      }
      return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
        value: GeneratorFunctionPrototype,
        configurable: true
      }), defineProperty(GeneratorFunctionPrototype, "constructor", {
        value: GeneratorFunction,
        configurable: true
      }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports2.isGeneratorFunction = function(genFun) {
        var ctor = "function" == typeof genFun && genFun.constructor;
        return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
      }, exports2.mark = function(genFun) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
      }, exports2.awrap = function(arg) {
        return {
          __await: arg
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function() {
        return this;
      }), exports2.AsyncIterator = AsyncIterator, exports2.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
        void 0 === PromiseImpl && (PromiseImpl = Promise);
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
        return exports2.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
      }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function() {
        return this;
      }), define(Gp, "toString", function() {
        return "[object Generator]";
      }), exports2.keys = function(val) {
        var object = Object(val), keys = [];
        for (var key in object)
          keys.push(key);
        return keys.reverse(), function next() {
          for (; keys.length; ) {
            var key2 = keys.pop();
            if (key2 in object)
              return next.value = key2, next.done = false, next;
          }
          return next.done = true, next;
        };
      }, exports2.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(skipTempReset) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = void 0, this.done = false, this.delegate = null, this.method = "next", this.arg = void 0, this.tryEntries.forEach(resetTryEntry), !skipTempReset)
            for (var name in this)
              "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = void 0);
        },
        stop: function stop() {
          this.done = true;
          var rootRecord = this.tryEntries[0].completion;
          if ("throw" === rootRecord.type)
            throw rootRecord.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(exception) {
          if (this.done)
            throw exception;
          var context = this;
          function handle(loc, caught) {
            return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = void 0), !!caught;
          }
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i], record = entry.completion;
            if ("root" === entry.tryLoc)
              return handle("end");
            if (entry.tryLoc <= this.prev) {
              var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc");
              if (hasCatch && hasFinally) {
                if (this.prev < entry.catchLoc)
                  return handle(entry.catchLoc, true);
                if (this.prev < entry.finallyLoc)
                  return handle(entry.finallyLoc);
              } else if (hasCatch) {
                if (this.prev < entry.catchLoc)
                  return handle(entry.catchLoc, true);
              } else {
                if (!hasFinally)
                  throw new Error("try statement without catch or finally");
                if (this.prev < entry.finallyLoc)
                  return handle(entry.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(type, arg) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
              var finallyEntry = entry;
              break;
            }
          }
          finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
          var record = finallyEntry ? finallyEntry.completion : {};
          return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
        },
        complete: function complete(record, afterLoc) {
          if ("throw" === record.type)
            throw record.arg;
          return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
        },
        finish: function finish(finallyLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc)
              return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
          }
        },
        "catch": function _catch(tryLoc) {
          for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc === tryLoc) {
              var record = entry.completion;
              if ("throw" === record.type) {
                var thrown = record.arg;
                resetTryEntry(entry);
              }
              return thrown;
            }
          }
          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
          return this.delegate = {
            iterator: values(iterable),
            resultName,
            nextLoc
          }, "next" === this.method && (this.arg = void 0), ContinueSentinel;
        }
      }, exports2;
    }
    module2.exports = _regeneratorRuntime, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/regenerator/index.js
var require_regenerator = __commonJS({
  "node_modules/@babel/runtime/regenerator/index.js"(exports, module2) {
    var runtime = require_regeneratorRuntime()();
    module2.exports = runtime;
    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
  }
});

// node_modules/@babel/runtime/helpers/asyncToGenerator.js
var require_asyncToGenerator = __commonJS({
  "node_modules/@babel/runtime/helpers/asyncToGenerator.js"(exports, module2) {
    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
      try {
        var info = gen[key](arg);
        var value = info.value;
      } catch (error) {
        reject(error);
        return;
      }
      if (info.done) {
        resolve(value);
      } else {
        Promise.resolve(value).then(_next, _throw);
      }
    }
    function _asyncToGenerator(fn) {
      return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
          var gen = fn.apply(self, args);
          function _next(value) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
          }
          function _throw(err) {
            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
          }
          _next(void 0);
        });
      };
    }
    module2.exports = _asyncToGenerator, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/toPrimitive.js
var require_toPrimitive = __commonJS({
  "node_modules/@babel/runtime/helpers/toPrimitive.js"(exports, module2) {
    var _typeof = require_typeof()["default"];
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null)
        return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object")
          return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    module2.exports = _toPrimitive, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/toPropertyKey.js
var require_toPropertyKey = __commonJS({
  "node_modules/@babel/runtime/helpers/toPropertyKey.js"(exports, module2) {
    var _typeof = require_typeof()["default"];
    var toPrimitive = require_toPrimitive();
    function _toPropertyKey(arg) {
      var key = toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    module2.exports = _toPropertyKey, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/@babel/runtime/helpers/defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/@babel/runtime/helpers/defineProperty.js"(exports, module2) {
    var toPropertyKey = require_toPropertyKey();
    function _defineProperty(obj, key, value) {
      key = toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    module2.exports = _defineProperty, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/is-retry-allowed/index.js
var require_is_retry_allowed = __commonJS({
  "node_modules/is-retry-allowed/index.js"(exports, module2) {
    "use strict";
    var denyList = /* @__PURE__ */ new Set([
      "ENOTFOUND",
      "ENETUNREACH",
      // SSL errors from https://github.com/nodejs/node/blob/fc8e3e2cdc521978351de257030db0076d79e0ab/src/crypto/crypto_common.cc#L301-L328
      "UNABLE_TO_GET_ISSUER_CERT",
      "UNABLE_TO_GET_CRL",
      "UNABLE_TO_DECRYPT_CERT_SIGNATURE",
      "UNABLE_TO_DECRYPT_CRL_SIGNATURE",
      "UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY",
      "CERT_SIGNATURE_FAILURE",
      "CRL_SIGNATURE_FAILURE",
      "CERT_NOT_YET_VALID",
      "CERT_HAS_EXPIRED",
      "CRL_NOT_YET_VALID",
      "CRL_HAS_EXPIRED",
      "ERROR_IN_CERT_NOT_BEFORE_FIELD",
      "ERROR_IN_CERT_NOT_AFTER_FIELD",
      "ERROR_IN_CRL_LAST_UPDATE_FIELD",
      "ERROR_IN_CRL_NEXT_UPDATE_FIELD",
      "OUT_OF_MEM",
      "DEPTH_ZERO_SELF_SIGNED_CERT",
      "SELF_SIGNED_CERT_IN_CHAIN",
      "UNABLE_TO_GET_ISSUER_CERT_LOCALLY",
      "UNABLE_TO_VERIFY_LEAF_SIGNATURE",
      "CERT_CHAIN_TOO_LONG",
      "CERT_REVOKED",
      "INVALID_CA",
      "PATH_LENGTH_EXCEEDED",
      "INVALID_PURPOSE",
      "CERT_UNTRUSTED",
      "CERT_REJECTED",
      "HOSTNAME_MISMATCH"
    ]);
    module2.exports = (error) => !denyList.has(error && error.code);
  }
});

// node_modules/axios-retry/lib/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/axios-retry/lib/cjs/index.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isNetworkError = isNetworkError;
    exports.isRetryableError = isRetryableError;
    exports.isSafeRequestError = isSafeRequestError;
    exports.isIdempotentRequestError = isIdempotentRequestError;
    exports.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;
    exports.exponentialDelay = exponentialDelay;
    exports.default = axiosRetry;
    exports.namespace = void 0;
    var _regenerator = _interopRequireDefault(require_regenerator());
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _asyncToGenerator2 = _interopRequireDefault(require_asyncToGenerator());
    var _defineProperty2 = _interopRequireDefault(require_defineProperty());
    var _isRetryAllowed = _interopRequireDefault(require_is_retry_allowed());
    function ownKeys(object, enumerableOnly) {
      var keys = Object.keys(object);
      if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
          symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
        }
        keys.push.apply(keys, symbols);
      }
      return keys;
    }
    function _objectSpread(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) {
          ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty2.default)(target, key, source[key]);
          });
        } else if (Object.getOwnPropertyDescriptors) {
          Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        } else {
          ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
          });
        }
      }
      return target;
    }
    var namespace = "axios-retry";
    exports.namespace = namespace;
    function isNetworkError(error) {
      return !error.response && Boolean(error.code) && // Prevents retrying cancelled requests
      error.code !== "ECONNABORTED" && // Prevents retrying timed out requests
      (0, _isRetryAllowed.default)(error);
    }
    var SAFE_HTTP_METHODS = ["get", "head", "options"];
    var IDEMPOTENT_HTTP_METHODS = SAFE_HTTP_METHODS.concat(["put", "delete"]);
    function isRetryableError(error) {
      return error.code !== "ECONNABORTED" && (!error.response || error.response.status >= 500 && error.response.status <= 599);
    }
    function isSafeRequestError(error) {
      if (!error.config) {
        return false;
      }
      return isRetryableError(error) && SAFE_HTTP_METHODS.indexOf(error.config.method) !== -1;
    }
    function isIdempotentRequestError(error) {
      if (!error.config) {
        return false;
      }
      return isRetryableError(error) && IDEMPOTENT_HTTP_METHODS.indexOf(error.config.method) !== -1;
    }
    function isNetworkOrIdempotentRequestError(error) {
      return isNetworkError(error) || isIdempotentRequestError(error);
    }
    function noDelay() {
      return 0;
    }
    function exponentialDelay() {
      var retryNumber = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;
      var delay = Math.pow(2, retryNumber) * 100;
      var randomSum = delay * 0.2 * Math.random();
      return delay + randomSum;
    }
    function getCurrentState(config) {
      var currentState = config[namespace] || {};
      currentState.retryCount = currentState.retryCount || 0;
      config[namespace] = currentState;
      return currentState;
    }
    function getRequestOptions(config, defaultOptions) {
      return _objectSpread(_objectSpread({}, defaultOptions), config[namespace]);
    }
    function fixConfig(axios, config) {
      if (axios.defaults.agent === config.agent) {
        delete config.agent;
      }
      if (axios.defaults.httpAgent === config.httpAgent) {
        delete config.httpAgent;
      }
      if (axios.defaults.httpsAgent === config.httpsAgent) {
        delete config.httpsAgent;
      }
    }
    function shouldRetry(_x, _x2, _x3, _x4) {
      return _shouldRetry.apply(this, arguments);
    }
    function _shouldRetry() {
      _shouldRetry = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee2(retries, retryCondition, currentState, error) {
        var shouldRetryOrPromise, shouldRetryPromiseResult;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                shouldRetryOrPromise = currentState.retryCount < retries && retryCondition(error);
                if (!((0, _typeof2.default)(shouldRetryOrPromise) === "object")) {
                  _context2.next = 12;
                  break;
                }
                _context2.prev = 2;
                _context2.next = 5;
                return shouldRetryOrPromise;
              case 5:
                shouldRetryPromiseResult = _context2.sent;
                return _context2.abrupt("return", shouldRetryPromiseResult !== false);
              case 9:
                _context2.prev = 9;
                _context2.t0 = _context2["catch"](2);
                return _context2.abrupt("return", false);
              case 12:
                return _context2.abrupt("return", shouldRetryOrPromise);
              case 13:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[2, 9]]);
      }));
      return _shouldRetry.apply(this, arguments);
    }
    function axiosRetry(axios, defaultOptions) {
      axios.interceptors.request.use(function(config) {
        var currentState = getCurrentState(config);
        currentState.lastRequestTime = Date.now();
        return config;
      });
      axios.interceptors.response.use(null, /* @__PURE__ */ function() {
        var _ref = (0, _asyncToGenerator2.default)(/* @__PURE__ */ _regenerator.default.mark(function _callee(error) {
          var config, _getRequestOptions, _getRequestOptions$re, retries, _getRequestOptions$re2, retryCondition, _getRequestOptions$re3, retryDelay, _getRequestOptions$sh, shouldResetTimeout, _getRequestOptions$on, onRetry, currentState, delay, lastRequestDuration, timeout;
          return _regenerator.default.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  config = error.config;
                  if (config) {
                    _context.next = 3;
                    break;
                  }
                  return _context.abrupt("return", Promise.reject(error));
                case 3:
                  _getRequestOptions = getRequestOptions(config, defaultOptions), _getRequestOptions$re = _getRequestOptions.retries, retries = _getRequestOptions$re === void 0 ? 3 : _getRequestOptions$re, _getRequestOptions$re2 = _getRequestOptions.retryCondition, retryCondition = _getRequestOptions$re2 === void 0 ? isNetworkOrIdempotentRequestError : _getRequestOptions$re2, _getRequestOptions$re3 = _getRequestOptions.retryDelay, retryDelay = _getRequestOptions$re3 === void 0 ? noDelay : _getRequestOptions$re3, _getRequestOptions$sh = _getRequestOptions.shouldResetTimeout, shouldResetTimeout = _getRequestOptions$sh === void 0 ? false : _getRequestOptions$sh, _getRequestOptions$on = _getRequestOptions.onRetry, onRetry = _getRequestOptions$on === void 0 ? function() {
                  } : _getRequestOptions$on;
                  currentState = getCurrentState(config);
                  _context.next = 7;
                  return shouldRetry(retries, retryCondition, currentState, error);
                case 7:
                  if (!_context.sent) {
                    _context.next = 20;
                    break;
                  }
                  currentState.retryCount += 1;
                  delay = retryDelay(currentState.retryCount, error);
                  fixConfig(axios, config);
                  if (!(!shouldResetTimeout && config.timeout && currentState.lastRequestTime)) {
                    _context.next = 17;
                    break;
                  }
                  lastRequestDuration = Date.now() - currentState.lastRequestTime;
                  timeout = config.timeout - lastRequestDuration - delay;
                  if (!(timeout <= 0)) {
                    _context.next = 16;
                    break;
                  }
                  return _context.abrupt("return", Promise.reject(error));
                case 16:
                  config.timeout = timeout;
                case 17:
                  config.transformRequest = [function(data) {
                    return data;
                  }];
                  onRetry(currentState.retryCount, error, config);
                  return _context.abrupt("return", new Promise(function(resolve) {
                    return setTimeout(function() {
                      return resolve(axios(config));
                    }, delay);
                  }));
                case 20:
                  return _context.abrupt("return", Promise.reject(error));
                case 21:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));
        return function(_x5) {
          return _ref.apply(this, arguments);
        };
      }());
    }
    axiosRetry.isNetworkError = isNetworkError;
    axiosRetry.isSafeRequestError = isSafeRequestError;
    axiosRetry.isIdempotentRequestError = isIdempotentRequestError;
    axiosRetry.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;
    axiosRetry.exponentialDelay = exponentialDelay;
    axiosRetry.isRetryableError = isRetryableError;
  }
});

// node_modules/axios-retry/index.js
var require_axios_retry = __commonJS({
  "node_modules/axios-retry/index.js"(exports, module2) {
    var axiosRetry = require_cjs().default;
    module2.exports = axiosRetry;
    module2.exports.default = axiosRetry;
  }
});

// node_modules/@doist/todoist-api-typescript/dist/restClient.js
var require_restClient = __commonJS({
  "node_modules/@doist/todoist-api-typescript/dist/restClient.js"(exports) {
    "use strict";
    var __assign2 = exports && exports.__assign || function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator2 = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault2 = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.request = exports.isSuccess = exports.paramsSerializer = void 0;
    var axios_1 = __importDefault2(require_axios2());
    var axios_case_converter_1 = __importDefault2(require_lib2());
    var errors_1 = require_errors2();
    var uuid_1 = require_commonjs_browser();
    var axios_retry_1 = __importDefault2(require_axios_retry());
    function paramsSerializer(params) {
      var qs = new URLSearchParams();
      Object.keys(params).forEach(function(key) {
        var value = params[key];
        if (Array.isArray(value)) {
          qs.append(key, value.join(","));
        } else {
          qs.append(key, String(value));
        }
      });
      return qs.toString();
    }
    exports.paramsSerializer = paramsSerializer;
    var defaultHeaders = {
      "Content-Type": "application/json"
    };
    function getAuthHeader(apiKey) {
      return "Bearer ".concat(apiKey);
    }
    function isNetworkError(error) {
      return Boolean(!error.response && error.code !== "ECONNABORTED");
    }
    function getRetryDelay(retryCount) {
      return retryCount === 1 ? 0 : 500;
    }
    function isAxiosError(error) {
      return Boolean(error === null || error === void 0 ? void 0 : error.isAxiosError);
    }
    function getTodoistRequestError(error, originalStack) {
      var requestError = new errors_1.TodoistRequestError(error.message);
      requestError.stack = isAxiosError(error) && originalStack ? originalStack.stack : error.stack;
      if (isAxiosError(error) && error.response) {
        requestError.httpStatusCode = error.response.status;
        requestError.responseData = error.response.data;
      }
      return requestError;
    }
    function getRequestConfiguration(baseURL, apiToken, requestId) {
      var authHeader = apiToken ? { Authorization: getAuthHeader(apiToken) } : void 0;
      var requestIdHeader = requestId ? { "X-Request-Id": requestId } : void 0;
      var headers = __assign2(__assign2(__assign2({}, defaultHeaders), authHeader), requestIdHeader);
      return { baseURL, headers };
    }
    function getAxiosClient(baseURL, apiToken, requestId) {
      var configuration = getRequestConfiguration(baseURL, apiToken, requestId);
      var client = (0, axios_case_converter_1.default)(axios_1.default.create(configuration));
      (0, axios_retry_1.default)(client, {
        retries: 3,
        retryCondition: isNetworkError,
        retryDelay: getRetryDelay
      });
      return client;
    }
    function isSuccess(response) {
      return response.status >= 200 && response.status < 300;
    }
    exports.isSuccess = isSuccess;
    function request(httpMethod, baseUri, relativePath, apiToken, payload, requestId) {
      return __awaiter2(this, void 0, void 0, function() {
        var originalStack, axiosClient, _a, error_1;
        return __generator2(this, function(_b) {
          switch (_b.label) {
            case 0:
              originalStack = new Error();
              _b.label = 1;
            case 1:
              _b.trys.push([1, 9, , 10]);
              if (httpMethod === "POST" && !requestId) {
                requestId = (0, uuid_1.v4)();
              }
              axiosClient = getAxiosClient(baseUri, apiToken, requestId);
              _a = httpMethod;
              switch (_a) {
                case "GET":
                  return [3, 2];
                case "POST":
                  return [3, 4];
                case "DELETE":
                  return [3, 6];
              }
              return [3, 8];
            case 2:
              return [4, axiosClient.get(relativePath, {
                params: payload,
                paramsSerializer
              })];
            case 3:
              return [2, _b.sent()];
            case 4:
              return [4, axiosClient.post(relativePath, payload)];
            case 5:
              return [2, _b.sent()];
            case 6:
              return [4, axiosClient.delete(relativePath)];
            case 7:
              return [2, _b.sent()];
            case 8:
              return [3, 10];
            case 9:
              error_1 = _b.sent();
              if (!isAxiosError(error_1) && !(error_1 instanceof Error)) {
                throw new Error("An unknown error occurred during the request");
              }
              throw getTodoistRequestError(error_1, originalStack);
            case 10:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }
    exports.request = request;
  }
});

// node_modules/@doist/todoist-api-typescript/dist/utils/taskConverters.js
var require_taskConverters = __commonJS({
  "node_modules/@doist/todoist-api-typescript/dist/utils/taskConverters.js"(exports) {
    "use strict";
    var __assign2 = exports && exports.__assign || function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getTaskFromQuickAddResponse = void 0;
    var showTaskEndpoint = "https://todoist.com/showTask";
    function getTaskUrlFromQuickAddResponse(responseData) {
      return "".concat(showTaskEndpoint, "?id=").concat(responseData.id);
    }
    function getTaskFromQuickAddResponse(responseData) {
      var _a;
      var due = responseData.due ? __assign2(__assign2({ isRecurring: responseData.due.isRecurring, string: responseData.due.string, date: responseData.due.date }, responseData.due.timezone !== null && { datetime: responseData.due.date }), responseData.due.timezone !== null && { timezone: responseData.due.timezone }) : void 0;
      var task = __assign2(__assign2(__assign2({ id: responseData.id, order: responseData.childOrder, content: responseData.content, description: responseData.description, projectId: responseData.projectId, sectionId: responseData.sectionId ? responseData.sectionId : void 0, isCompleted: responseData.checked, labels: responseData.labels, priority: responseData.priority, commentCount: 0, createdAt: responseData.addedAt, url: getTaskUrlFromQuickAddResponse(responseData), creatorId: (_a = responseData.addedByUid) !== null && _a !== void 0 ? _a : "" }, due !== void 0 && { due }), responseData.parentId !== null && { parentId: responseData.parentId }), responseData.responsibleUid !== null && {
        assigneeId: responseData.responsibleUid
      });
      return task;
    }
    exports.getTaskFromQuickAddResponse = getTaskFromQuickAddResponse;
  }
});

// node_modules/@doist/todoist-api-typescript/dist/consts/endpoints.js
var require_endpoints = __commonJS({
  "node_modules/@doist/todoist-api-typescript/dist/consts/endpoints.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ENDPOINT_REVOKE_TOKEN = exports.ENDPOINT_GET_TOKEN = exports.ENDPOINT_AUTHORIZATION = exports.ENDPOINT_SYNC_QUICK_ADD = exports.ENDPOINT_REST_PROJECT_COLLABORATORS = exports.ENDPOINT_REST_TASK_REOPEN = exports.ENDPOINT_REST_TASK_CLOSE = exports.ENDPOINT_REST_COMMENTS = exports.ENDPOINT_REST_LABELS_SHARED_REMOVE = exports.ENDPOINT_REST_LABELS_SHARED_RENAME = exports.ENDPOINT_REST_LABELS_SHARED = exports.ENDPOINT_REST_LABELS = exports.ENDPOINT_REST_SECTIONS = exports.ENDPOINT_REST_PROJECTS = exports.ENDPOINT_REST_TASKS = exports.getAuthBaseUri = exports.getSyncBaseUri = exports.getRestBaseUri = void 0;
    var BASE_URI = "https://api.todoist.com";
    var API_REST_BASE_URI = "/rest/v2/";
    var API_SYNC_BASE_URI = "/sync/v9/";
    var TODOIST_URI = "https://todoist.com";
    var API_AUTHORIZATION_BASE_URI = "/oauth/";
    function getRestBaseUri(domainBase) {
      if (domainBase === void 0) {
        domainBase = BASE_URI;
      }
      return new URL(API_REST_BASE_URI, domainBase).toString();
    }
    exports.getRestBaseUri = getRestBaseUri;
    function getSyncBaseUri(domainBase) {
      if (domainBase === void 0) {
        domainBase = BASE_URI;
      }
      return new URL(API_SYNC_BASE_URI, domainBase).toString();
    }
    exports.getSyncBaseUri = getSyncBaseUri;
    function getAuthBaseUri(domainBase) {
      if (domainBase === void 0) {
        domainBase = TODOIST_URI;
      }
      return new URL(API_AUTHORIZATION_BASE_URI, domainBase).toString();
    }
    exports.getAuthBaseUri = getAuthBaseUri;
    exports.ENDPOINT_REST_TASKS = "tasks";
    exports.ENDPOINT_REST_PROJECTS = "projects";
    exports.ENDPOINT_REST_SECTIONS = "sections";
    exports.ENDPOINT_REST_LABELS = "labels";
    exports.ENDPOINT_REST_LABELS_SHARED = exports.ENDPOINT_REST_LABELS + "/shared";
    exports.ENDPOINT_REST_LABELS_SHARED_RENAME = exports.ENDPOINT_REST_LABELS_SHARED + "/rename";
    exports.ENDPOINT_REST_LABELS_SHARED_REMOVE = exports.ENDPOINT_REST_LABELS_SHARED + "/remove";
    exports.ENDPOINT_REST_COMMENTS = "comments";
    exports.ENDPOINT_REST_TASK_CLOSE = "close";
    exports.ENDPOINT_REST_TASK_REOPEN = "reopen";
    exports.ENDPOINT_REST_PROJECT_COLLABORATORS = "collaborators";
    exports.ENDPOINT_SYNC_QUICK_ADD = "quick/add";
    exports.ENDPOINT_AUTHORIZATION = "authorize";
    exports.ENDPOINT_GET_TOKEN = "access_token";
    exports.ENDPOINT_REVOKE_TOKEN = "access_tokens/revoke";
  }
});

// node_modules/@doist/todoist-api-typescript/dist/types/entities.js
var require_entities = __commonJS({
  "node_modules/@doist/todoist-api-typescript/dist/types/entities.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.User = exports.Comment = exports.Attachment = exports.Label = exports.Section = exports.Project = exports.Task = exports.DueDate = exports.Int = void 0;
    var runtypes_1 = require_lib();
    exports.Int = runtypes_1.Number.withConstraint(function(n) {
      return Number.isInteger(n) || "".concat(n, " is not a valid entity id. Should be a string");
    });
    exports.DueDate = (0, runtypes_1.Record)({
      isRecurring: runtypes_1.Boolean,
      string: runtypes_1.String,
      date: runtypes_1.String
    }).And((0, runtypes_1.Partial)({
      datetime: runtypes_1.String.Or(runtypes_1.Null),
      timezone: runtypes_1.String.Or(runtypes_1.Null)
    }));
    exports.Task = (0, runtypes_1.Record)({
      id: runtypes_1.String,
      order: exports.Int,
      content: runtypes_1.String,
      description: runtypes_1.String,
      projectId: runtypes_1.String,
      isCompleted: runtypes_1.Boolean,
      labels: (0, runtypes_1.Array)(runtypes_1.String),
      priority: exports.Int,
      commentCount: exports.Int,
      createdAt: runtypes_1.String,
      url: runtypes_1.String,
      creatorId: runtypes_1.String
    }).And((0, runtypes_1.Partial)({
      due: exports.DueDate.Or(runtypes_1.Null),
      assigneeId: runtypes_1.String.Or(runtypes_1.Null),
      assignerId: runtypes_1.String.Or(runtypes_1.Null),
      parentId: runtypes_1.String.Or(runtypes_1.Null),
      sectionId: runtypes_1.String.Or(runtypes_1.Null)
    }));
    exports.Project = (0, runtypes_1.Record)({
      id: runtypes_1.String,
      name: runtypes_1.String,
      color: runtypes_1.String,
      commentCount: exports.Int,
      isShared: runtypes_1.Boolean,
      isFavorite: runtypes_1.Boolean,
      url: runtypes_1.String,
      isInboxProject: runtypes_1.Boolean,
      isTeamInbox: runtypes_1.Boolean,
      order: exports.Int,
      viewStyle: runtypes_1.String
    }).And((0, runtypes_1.Partial)({
      parentId: runtypes_1.String.Or(runtypes_1.Null)
    }));
    exports.Section = (0, runtypes_1.Record)({
      id: runtypes_1.String,
      order: exports.Int,
      name: runtypes_1.String,
      projectId: runtypes_1.String
    });
    exports.Label = (0, runtypes_1.Record)({
      id: runtypes_1.String,
      order: exports.Int,
      name: runtypes_1.String,
      color: runtypes_1.String,
      isFavorite: runtypes_1.Boolean
    });
    exports.Attachment = (0, runtypes_1.Record)({
      resourceType: runtypes_1.String
    }).And((0, runtypes_1.Partial)({
      fileName: runtypes_1.String.Or(runtypes_1.Null),
      fileSize: exports.Int.Or(runtypes_1.Null),
      fileType: runtypes_1.String.Or(runtypes_1.Null),
      fileUrl: runtypes_1.String.Or(runtypes_1.Null),
      fileDuration: exports.Int.Or(runtypes_1.Null),
      uploadState: (0, runtypes_1.Union)((0, runtypes_1.Literal)("pending"), (0, runtypes_1.Literal)("completed")).Or(runtypes_1.Null),
      image: runtypes_1.String.Or(runtypes_1.Null),
      imageWidth: exports.Int.Or(runtypes_1.Null),
      imageHeight: exports.Int.Or(runtypes_1.Null),
      url: runtypes_1.String.Or(runtypes_1.Null),
      title: runtypes_1.String.Or(runtypes_1.Null)
    }));
    exports.Comment = (0, runtypes_1.Record)({
      id: runtypes_1.String,
      content: runtypes_1.String,
      postedAt: runtypes_1.String
    }).And((0, runtypes_1.Partial)({
      taskId: runtypes_1.String.Or(runtypes_1.Null),
      projectId: runtypes_1.String.Or(runtypes_1.Null),
      attachment: exports.Attachment.Or(runtypes_1.Null)
    }));
    exports.User = (0, runtypes_1.Record)({
      id: runtypes_1.String,
      name: runtypes_1.String,
      email: runtypes_1.String
    });
  }
});

// node_modules/@doist/todoist-api-typescript/dist/types/requests.js
var require_requests = __commonJS({
  "node_modules/@doist/todoist-api-typescript/dist/types/requests.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@doist/todoist-api-typescript/dist/types/index.js
var require_types2 = __commonJS({
  "node_modules/@doist/todoist-api-typescript/dist/types/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_entities(), exports);
    __exportStar2(require_errors2(), exports);
    __exportStar2(require_requests(), exports);
  }
});

// node_modules/@doist/todoist-api-typescript/dist/utils/validators.js
var require_validators = __commonJS({
  "node_modules/@doist/todoist-api-typescript/dist/utils/validators.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateUserArray = exports.validateUser = exports.validateCommentArray = exports.validateComment = exports.validateLabelArray = exports.validateLabel = exports.validateSectionArray = exports.validateSection = exports.validateProjectArray = exports.validateProject = exports.validateTaskArray = exports.validateTask = void 0;
    var types_1 = require_types2();
    function validateTask(input) {
      return types_1.Task.check(input);
    }
    exports.validateTask = validateTask;
    function validateTaskArray(input) {
      return input.map(validateTask);
    }
    exports.validateTaskArray = validateTaskArray;
    function validateProject(input) {
      return types_1.Project.check(input);
    }
    exports.validateProject = validateProject;
    function validateProjectArray(input) {
      return input.map(validateProject);
    }
    exports.validateProjectArray = validateProjectArray;
    function validateSection(input) {
      return types_1.Section.check(input);
    }
    exports.validateSection = validateSection;
    function validateSectionArray(input) {
      return input.map(validateSection);
    }
    exports.validateSectionArray = validateSectionArray;
    function validateLabel(input) {
      return types_1.Label.check(input);
    }
    exports.validateLabel = validateLabel;
    function validateLabelArray(input) {
      return input.map(validateLabel);
    }
    exports.validateLabelArray = validateLabelArray;
    function validateComment(input) {
      return types_1.Comment.check(input);
    }
    exports.validateComment = validateComment;
    function validateCommentArray(input) {
      return input.map(validateComment);
    }
    exports.validateCommentArray = validateCommentArray;
    function validateUser(input) {
      return types_1.User.check(input);
    }
    exports.validateUser = validateUser;
    function validateUserArray(input) {
      return input.map(validateUser);
    }
    exports.validateUserArray = validateUserArray;
  }
});

// node_modules/@doist/todoist-api-typescript/dist/TodoistApi.js
var require_TodoistApi = __commonJS({
  "node_modules/@doist/todoist-api-typescript/dist/TodoistApi.js"(exports) {
    "use strict";
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator2 = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TodoistApi = void 0;
    var runtypes_1 = require_lib();
    var restClient_1 = require_restClient();
    var taskConverters_1 = require_taskConverters();
    var endpoints_1 = require_endpoints();
    var validators_1 = require_validators();
    function generatePath() {
      var segments = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        segments[_i] = arguments[_i];
      }
      return segments.join("/");
    }
    var TodoistApi2 = (
      /** @class */
      function() {
        function TodoistApi3(authToken, baseUrl) {
          this.authToken = authToken;
          this.restApiBase = (0, endpoints_1.getRestBaseUri)(baseUrl);
          this.syncApiBase = (0, endpoints_1.getSyncBaseUri)(baseUrl);
        }
        TodoistApi3.prototype.getTask = function(id) {
          return __awaiter2(this, void 0, void 0, function() {
            var response;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  runtypes_1.String.check(id);
                  return [4, (0, restClient_1.request)("GET", this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_TASKS, id), this.authToken)];
                case 1:
                  response = _a.sent();
                  return [2, (0, validators_1.validateTask)(response.data)];
              }
            });
          });
        };
        TodoistApi3.prototype.getTasks = function(args) {
          return __awaiter2(this, void 0, void 0, function() {
            var response;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, (0, restClient_1.request)("GET", this.restApiBase, endpoints_1.ENDPOINT_REST_TASKS, this.authToken, args)];
                case 1:
                  response = _a.sent();
                  return [2, (0, validators_1.validateTaskArray)(response.data)];
              }
            });
          });
        };
        TodoistApi3.prototype.addTask = function(args, requestId) {
          return __awaiter2(this, void 0, void 0, function() {
            var response;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, (0, restClient_1.request)("POST", this.restApiBase, endpoints_1.ENDPOINT_REST_TASKS, this.authToken, args, requestId)];
                case 1:
                  response = _a.sent();
                  return [2, (0, validators_1.validateTask)(response.data)];
              }
            });
          });
        };
        TodoistApi3.prototype.quickAddTask = function(args) {
          return __awaiter2(this, void 0, void 0, function() {
            var response, task;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, (0, restClient_1.request)("POST", this.syncApiBase, endpoints_1.ENDPOINT_SYNC_QUICK_ADD, this.authToken, args)];
                case 1:
                  response = _a.sent();
                  task = (0, taskConverters_1.getTaskFromQuickAddResponse)(response.data);
                  return [2, (0, validators_1.validateTask)(task)];
              }
            });
          });
        };
        TodoistApi3.prototype.updateTask = function(id, args, requestId) {
          return __awaiter2(this, void 0, void 0, function() {
            var response;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  runtypes_1.String.check(id);
                  return [4, (0, restClient_1.request)("POST", this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_TASKS, id), this.authToken, args, requestId)];
                case 1:
                  response = _a.sent();
                  return [2, (0, validators_1.validateTask)(response.data)];
              }
            });
          });
        };
        TodoistApi3.prototype.closeTask = function(id, requestId) {
          return __awaiter2(this, void 0, void 0, function() {
            var response;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  runtypes_1.String.check(id);
                  return [4, (0, restClient_1.request)("POST", this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_TASKS, id, endpoints_1.ENDPOINT_REST_TASK_CLOSE), this.authToken, void 0, requestId)];
                case 1:
                  response = _a.sent();
                  return [2, (0, restClient_1.isSuccess)(response)];
              }
            });
          });
        };
        TodoistApi3.prototype.reopenTask = function(id, requestId) {
          return __awaiter2(this, void 0, void 0, function() {
            var response;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  runtypes_1.String.check(id);
                  return [4, (0, restClient_1.request)("POST", this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_TASKS, id, endpoints_1.ENDPOINT_REST_TASK_REOPEN), this.authToken, void 0, requestId)];
                case 1:
                  response = _a.sent();
                  return [2, (0, restClient_1.isSuccess)(response)];
              }
            });
          });
        };
        TodoistApi3.prototype.deleteTask = function(id, requestId) {
          return __awaiter2(this, void 0, void 0, function() {
            var response;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  runtypes_1.String.check(id);
                  return [4, (0, restClient_1.request)("DELETE", this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_TASKS, id), this.authToken, void 0, requestId)];
                case 1:
                  response = _a.sent();
                  return [2, (0, restClient_1.isSuccess)(response)];
              }
            });
          });
        };
        TodoistApi3.prototype.getProject = function(id) {
          return __awaiter2(this, void 0, void 0, function() {
            var response;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  runtypes_1.String.check(id);
                  return [4, (0, restClient_1.request)("GET", this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_PROJECTS, id), this.authToken)];
                case 1:
                  response = _a.sent();
                  return [2, (0, validators_1.validateProject)(response.data)];
              }
            });
          });
        };
        TodoistApi3.prototype.getProjects = function() {
          return __awaiter2(this, void 0, void 0, function() {
            var response;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, (0, restClient_1.request)("GET", this.restApiBase, endpoints_1.ENDPOINT_REST_PROJECTS, this.authToken)];
                case 1:
                  response = _a.sent();
                  return [2, (0, validators_1.validateProjectArray)(response.data)];
              }
            });
          });
        };
        TodoistApi3.prototype.addProject = function(args, requestId) {
          return __awaiter2(this, void 0, void 0, function() {
            var response;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, (0, restClient_1.request)("POST", this.restApiBase, endpoints_1.ENDPOINT_REST_PROJECTS, this.authToken, args, requestId)];
                case 1:
                  response = _a.sent();
                  return [2, (0, validators_1.validateProject)(response.data)];
              }
            });
          });
        };
        TodoistApi3.prototype.updateProject = function(id, args, requestId) {
          return __awaiter2(this, void 0, void 0, function() {
            var response;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  runtypes_1.String.check(id);
                  return [4, (0, restClient_1.request)("POST", this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_PROJECTS, id), this.authToken, args, requestId)];
                case 1:
                  response = _a.sent();
                  return [2, (0, validators_1.validateProject)(response.data)];
              }
            });
          });
        };
        TodoistApi3.prototype.deleteProject = function(id, requestId) {
          return __awaiter2(this, void 0, void 0, function() {
            var response;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  runtypes_1.String.check(id);
                  return [4, (0, restClient_1.request)("DELETE", this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_PROJECTS, id), this.authToken, void 0, requestId)];
                case 1:
                  response = _a.sent();
                  return [2, (0, restClient_1.isSuccess)(response)];
              }
            });
          });
        };
        TodoistApi3.prototype.getProjectCollaborators = function(projectId) {
          return __awaiter2(this, void 0, void 0, function() {
            var response;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  runtypes_1.String.check(projectId);
                  return [4, (0, restClient_1.request)("GET", this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_PROJECTS, projectId, endpoints_1.ENDPOINT_REST_PROJECT_COLLABORATORS), this.authToken)];
                case 1:
                  response = _a.sent();
                  return [2, (0, validators_1.validateUserArray)(response.data)];
              }
            });
          });
        };
        TodoistApi3.prototype.getSections = function(projectId) {
          return __awaiter2(this, void 0, void 0, function() {
            var response;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, (0, restClient_1.request)("GET", this.restApiBase, endpoints_1.ENDPOINT_REST_SECTIONS, this.authToken, projectId ? { projectId } : void 0)];
                case 1:
                  response = _a.sent();
                  return [2, (0, validators_1.validateSectionArray)(response.data)];
              }
            });
          });
        };
        TodoistApi3.prototype.getSection = function(id) {
          return __awaiter2(this, void 0, void 0, function() {
            var response;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  runtypes_1.String.check(id);
                  return [4, (0, restClient_1.request)("GET", this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_SECTIONS, id), this.authToken)];
                case 1:
                  response = _a.sent();
                  return [2, (0, validators_1.validateSection)(response.data)];
              }
            });
          });
        };
        TodoistApi3.prototype.addSection = function(args, requestId) {
          return __awaiter2(this, void 0, void 0, function() {
            var response;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, (0, restClient_1.request)("POST", this.restApiBase, endpoints_1.ENDPOINT_REST_SECTIONS, this.authToken, args, requestId)];
                case 1:
                  response = _a.sent();
                  return [2, (0, validators_1.validateSection)(response.data)];
              }
            });
          });
        };
        TodoistApi3.prototype.updateSection = function(id, args, requestId) {
          return __awaiter2(this, void 0, void 0, function() {
            var response;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  runtypes_1.String.check(id);
                  return [4, (0, restClient_1.request)("POST", this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_SECTIONS, id), this.authToken, args, requestId)];
                case 1:
                  response = _a.sent();
                  return [2, (0, validators_1.validateSection)(response.data)];
              }
            });
          });
        };
        TodoistApi3.prototype.deleteSection = function(id, requestId) {
          return __awaiter2(this, void 0, void 0, function() {
            var response;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  runtypes_1.String.check(id);
                  return [4, (0, restClient_1.request)("DELETE", this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_SECTIONS, id), this.authToken, void 0, requestId)];
                case 1:
                  response = _a.sent();
                  return [2, (0, restClient_1.isSuccess)(response)];
              }
            });
          });
        };
        TodoistApi3.prototype.getLabel = function(id) {
          return __awaiter2(this, void 0, void 0, function() {
            var response;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  runtypes_1.String.check(id);
                  return [4, (0, restClient_1.request)("GET", this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_LABELS, id), this.authToken)];
                case 1:
                  response = _a.sent();
                  return [2, (0, validators_1.validateLabel)(response.data)];
              }
            });
          });
        };
        TodoistApi3.prototype.getLabels = function() {
          return __awaiter2(this, void 0, void 0, function() {
            var response;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, (0, restClient_1.request)("GET", this.restApiBase, endpoints_1.ENDPOINT_REST_LABELS, this.authToken)];
                case 1:
                  response = _a.sent();
                  return [2, (0, validators_1.validateLabelArray)(response.data)];
              }
            });
          });
        };
        TodoistApi3.prototype.addLabel = function(args, requestId) {
          return __awaiter2(this, void 0, void 0, function() {
            var response;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, (0, restClient_1.request)("POST", this.restApiBase, endpoints_1.ENDPOINT_REST_LABELS, this.authToken, args, requestId)];
                case 1:
                  response = _a.sent();
                  return [2, (0, validators_1.validateLabel)(response.data)];
              }
            });
          });
        };
        TodoistApi3.prototype.updateLabel = function(id, args, requestId) {
          return __awaiter2(this, void 0, void 0, function() {
            var response;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  runtypes_1.String.check(id);
                  return [4, (0, restClient_1.request)("POST", this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_LABELS, id), this.authToken, args, requestId)];
                case 1:
                  response = _a.sent();
                  return [2, (0, validators_1.validateLabel)(response.data)];
              }
            });
          });
        };
        TodoistApi3.prototype.deleteLabel = function(id, requestId) {
          return __awaiter2(this, void 0, void 0, function() {
            var response;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  runtypes_1.String.check(id);
                  return [4, (0, restClient_1.request)("DELETE", this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_LABELS, id), this.authToken, void 0, requestId)];
                case 1:
                  response = _a.sent();
                  return [2, (0, restClient_1.isSuccess)(response)];
              }
            });
          });
        };
        TodoistApi3.prototype.getSharedLabels = function() {
          return __awaiter2(this, void 0, void 0, function() {
            var response;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, (0, restClient_1.request)("GET", this.restApiBase, endpoints_1.ENDPOINT_REST_LABELS_SHARED, this.authToken)];
                case 1:
                  response = _a.sent();
                  return [2, response.data];
              }
            });
          });
        };
        TodoistApi3.prototype.renameSharedLabel = function(args) {
          return __awaiter2(this, void 0, void 0, function() {
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, (0, restClient_1.request)("POST", this.restApiBase, endpoints_1.ENDPOINT_REST_LABELS_SHARED_RENAME, this.authToken, args)];
                case 1:
                  _a.sent();
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        TodoistApi3.prototype.removeSharedLabel = function(args) {
          return __awaiter2(this, void 0, void 0, function() {
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, (0, restClient_1.request)("POST", this.restApiBase, endpoints_1.ENDPOINT_REST_LABELS_SHARED_REMOVE, this.authToken, args)];
                case 1:
                  _a.sent();
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        TodoistApi3.prototype.getComments = function(args) {
          return __awaiter2(this, void 0, void 0, function() {
            var response;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, (0, restClient_1.request)("GET", this.restApiBase, endpoints_1.ENDPOINT_REST_COMMENTS, this.authToken, args)];
                case 1:
                  response = _a.sent();
                  return [2, (0, validators_1.validateCommentArray)(response.data)];
              }
            });
          });
        };
        TodoistApi3.prototype.getComment = function(id) {
          return __awaiter2(this, void 0, void 0, function() {
            var response;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  runtypes_1.String.check(id);
                  return [4, (0, restClient_1.request)("GET", this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_COMMENTS, id), this.authToken)];
                case 1:
                  response = _a.sent();
                  return [2, (0, validators_1.validateComment)(response.data)];
              }
            });
          });
        };
        TodoistApi3.prototype.addComment = function(args, requestId) {
          return __awaiter2(this, void 0, void 0, function() {
            var response;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, (0, restClient_1.request)("POST", this.restApiBase, endpoints_1.ENDPOINT_REST_COMMENTS, this.authToken, args, requestId)];
                case 1:
                  response = _a.sent();
                  return [2, (0, validators_1.validateComment)(response.data)];
              }
            });
          });
        };
        TodoistApi3.prototype.updateComment = function(id, args, requestId) {
          return __awaiter2(this, void 0, void 0, function() {
            var response;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  runtypes_1.String.check(id);
                  return [4, (0, restClient_1.request)("POST", this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_COMMENTS, id), this.authToken, args, requestId)];
                case 1:
                  response = _a.sent();
                  return [2, (0, validators_1.validateComment)(response.data)];
              }
            });
          });
        };
        TodoistApi3.prototype.deleteComment = function(id, requestId) {
          return __awaiter2(this, void 0, void 0, function() {
            var response;
            return __generator2(this, function(_a) {
              switch (_a.label) {
                case 0:
                  runtypes_1.String.check(id);
                  return [4, (0, restClient_1.request)("DELETE", this.restApiBase, generatePath(endpoints_1.ENDPOINT_REST_COMMENTS, id), this.authToken, void 0, requestId)];
                case 1:
                  response = _a.sent();
                  return [2, (0, restClient_1.isSuccess)(response)];
              }
            });
          });
        };
        return TodoistApi3;
      }()
    );
    exports.TodoistApi = TodoistApi2;
  }
});

// node_modules/@doist/todoist-api-typescript/dist/authentication.js
var require_authentication = __commonJS({
  "node_modules/@doist/todoist-api-typescript/dist/authentication.js"(exports) {
    "use strict";
    var __awaiter2 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator2 = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.revokeAuthToken = exports.getAuthToken = exports.getAuthorizationUrl = exports.getAuthStateParameter = void 0;
    var restClient_1 = require_restClient();
    var uuid_1 = require_commonjs_browser();
    var types_1 = require_types2();
    var endpoints_1 = require_endpoints();
    function getAuthStateParameter() {
      return (0, uuid_1.v4)();
    }
    exports.getAuthStateParameter = getAuthStateParameter;
    function getAuthorizationUrl(clientId, permissions, state, baseUrl) {
      if (!(permissions === null || permissions === void 0 ? void 0 : permissions.length)) {
        throw new Error("At least one scope value should be passed for permissions.");
      }
      var scope = permissions.join(",");
      return "".concat((0, endpoints_1.getAuthBaseUri)(baseUrl)).concat(endpoints_1.ENDPOINT_AUTHORIZATION, "?client_id=").concat(clientId, "&scope=").concat(scope, "&state=").concat(state);
    }
    exports.getAuthorizationUrl = getAuthorizationUrl;
    function getAuthToken(args, baseUrl) {
      var _a;
      return __awaiter2(this, void 0, void 0, function() {
        var response;
        return __generator2(this, function(_b) {
          switch (_b.label) {
            case 0:
              return [4, (0, restClient_1.request)("POST", (0, endpoints_1.getAuthBaseUri)(baseUrl), endpoints_1.ENDPOINT_GET_TOKEN, void 0, args)];
            case 1:
              response = _b.sent();
              if (response.status !== 200 || !((_a = response.data) === null || _a === void 0 ? void 0 : _a.accessToken)) {
                throw new types_1.TodoistRequestError("Authentication token exchange failed.", response.status, response.data);
              }
              return [2, response.data];
          }
        });
      });
    }
    exports.getAuthToken = getAuthToken;
    function revokeAuthToken(args, baseUrl) {
      return __awaiter2(this, void 0, void 0, function() {
        var response;
        return __generator2(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, (0, restClient_1.request)("POST", (0, endpoints_1.getSyncBaseUri)(baseUrl), endpoints_1.ENDPOINT_REVOKE_TOKEN, void 0, args)];
            case 1:
              response = _a.sent();
              return [2, (0, restClient_1.isSuccess)(response)];
          }
        });
      });
    }
    exports.revokeAuthToken = revokeAuthToken;
  }
});

// node_modules/@doist/todoist-api-typescript/dist/utils/colors.js
var require_colors = __commonJS({
  "node_modules/@doist/todoist-api-typescript/dist/utils/colors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getColorByKey = exports.getColorByName = exports.getColorById = exports.defaultColor = exports.colors = exports.taupe = exports.gray = exports.charcoal = exports.salmon = exports.magenta = exports.lavender = exports.violet = exports.grape = exports.blue = exports.lightBlue = exports.skyBlue = exports.turquoise = exports.mintGreen = exports.green = exports.limeGreen = exports.oliveGreen = exports.yellow = exports.orange = exports.red = exports.berryRed = void 0;
    exports.berryRed = {
      id: 30,
      key: "berry_red",
      displayName: "Berry Red",
      name: "Berry Red",
      hexValue: "#b8255f",
      value: "#b8255f"
    };
    exports.red = {
      id: 31,
      key: "red",
      displayName: "Red",
      name: "Red",
      hexValue: "#db4035",
      value: "#db4035"
    };
    exports.orange = {
      id: 32,
      key: "orange",
      displayName: "Orange",
      name: "Orange",
      hexValue: "#ff9933",
      value: "#ff9933"
    };
    exports.yellow = {
      id: 33,
      key: "yellow",
      displayName: "Yellow",
      name: "Yellow",
      hexValue: "#fad000",
      value: "#fad000"
    };
    exports.oliveGreen = {
      id: 34,
      key: "olive_green",
      displayName: "Olive Green",
      name: "Olive Green",
      hexValue: "#afb83b",
      value: "#afb83b"
    };
    exports.limeGreen = {
      id: 35,
      key: "lime_green",
      displayName: "Lime Green",
      name: "Lime Green",
      hexValue: "#7ecc49",
      value: "#7ecc49"
    };
    exports.green = {
      id: 36,
      key: "green",
      displayName: "Green",
      name: "Green",
      hexValue: "#299438",
      value: "#299438"
    };
    exports.mintGreen = {
      id: 37,
      key: "mint_green",
      displayName: "Mint Green",
      name: "Mint Green",
      hexValue: "#6accbc",
      value: "#6accbc"
    };
    exports.turquoise = {
      id: 38,
      key: "turquoise",
      displayName: "Turquoise",
      name: "Turquoise",
      hexValue: "#158fad",
      value: "#158fad"
    };
    exports.skyBlue = {
      id: 39,
      key: "sky_blue",
      displayName: "Sky Blue",
      name: "Sky Blue",
      hexValue: "#14aaf5",
      value: "#14aaf5"
    };
    exports.lightBlue = {
      id: 40,
      key: "light_blue",
      displayName: "Light Blue",
      name: "Light Blue",
      hexValue: "#96c3eb",
      value: "#96c3eb"
    };
    exports.blue = {
      id: 41,
      key: "blue",
      displayName: "Blue",
      name: "Blue",
      hexValue: "#4073ff",
      value: "#4073ff"
    };
    exports.grape = {
      id: 42,
      key: "grape",
      displayName: "Grape",
      name: "Grape",
      hexValue: "#884dff",
      value: "#884dff"
    };
    exports.violet = {
      id: 43,
      key: "violet",
      displayName: "Violet",
      name: "Violet",
      hexValue: "#af38eb",
      value: "#af38eb"
    };
    exports.lavender = {
      id: 44,
      key: "lavender",
      displayName: "Lavender",
      name: "Lavender",
      hexValue: "#eb96eb",
      value: "#eb96eb"
    };
    exports.magenta = {
      id: 45,
      key: "magenta",
      displayName: "Magenta",
      name: "Magenta",
      hexValue: "#e05194",
      value: "#e05194"
    };
    exports.salmon = {
      id: 46,
      key: "salmon",
      displayName: "Salmon",
      name: "Salmon",
      hexValue: "#ff8d85",
      value: "#ff8d85"
    };
    exports.charcoal = {
      id: 47,
      key: "charcoal",
      displayName: "Charcoal",
      name: "Charcoal",
      hexValue: "#808080",
      value: "#808080"
    };
    exports.gray = {
      id: 48,
      key: "gray",
      displayName: "Gray",
      name: "Gray",
      hexValue: "#b8b8b8",
      value: "#b8b8b8"
    };
    exports.taupe = {
      id: 49,
      key: "taupe",
      displayName: "Taupe",
      name: "Taupe",
      hexValue: "#ccac93",
      value: "#ccac93"
    };
    exports.colors = [
      exports.berryRed,
      exports.red,
      exports.orange,
      exports.yellow,
      exports.oliveGreen,
      exports.limeGreen,
      exports.green,
      exports.mintGreen,
      exports.turquoise,
      exports.skyBlue,
      exports.lightBlue,
      exports.blue,
      exports.grape,
      exports.violet,
      exports.lavender,
      exports.magenta,
      exports.salmon,
      exports.charcoal,
      exports.gray,
      exports.taupe
    ];
    exports.defaultColor = exports.charcoal;
    function getColorById(colorId) {
      var color = exports.colors.find(function(color2) {
        return color2.id === colorId;
      });
      return color !== null && color !== void 0 ? color : exports.defaultColor;
    }
    exports.getColorById = getColorById;
    function getColorByName(colorName) {
      var color = exports.colors.find(function(color2) {
        return color2.name === colorName;
      });
      return color !== null && color !== void 0 ? color : exports.defaultColor;
    }
    exports.getColorByName = getColorByName;
    function getColorByKey(colorKey) {
      var color = exports.colors.find(function(color2) {
        return color2.key === colorKey;
      });
      return color !== null && color !== void 0 ? color : exports.defaultColor;
    }
    exports.getColorByKey = getColorByKey;
  }
});

// node_modules/@doist/todoist-api-typescript/dist/utils/sanitization.js
var require_sanitization = __commonJS({
  "node_modules/@doist/todoist-api-typescript/dist/utils/sanitization.js"(exports) {
    "use strict";
    var __assign2 = exports && exports.__assign || function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getSanitizedTasks = exports.getSanitizedContent = void 0;
    var BOLD_FORMAT = /(^|[\s!?,;>:]+)(?:\*\*|__|!!)(.+?)(\*\*|__|!!)(?=$|[\s!?,;><:]+)/gi;
    var ITALIC_FORMAT = /(^|[\s!?,;>:]+)(?:\*|_|!)(.+?)(\*|_|!)(?=$|[\s!?,;><:]+)/gi;
    var BOLD_ITALIC_FORMAT = /(^|[\s!?,;>:]+)(?:\*\*\*|___|!!!)(.+?)(\*\*\*|___|!!!)(?=$|[\s!?,;><:]+)/gi;
    var CODE_BLOCK_FORMAT = /```([\s\S]*?)```/gi;
    var CODE_INLINE_FORMAT = /`([^`]+)`/gi;
    var TODOIST_LINK = /((?:(?:onenote:)?[\w-]+):\/\/[^\s]+)\s+[[(]([^)]+)[\])]/gi;
    var MARKDOWN_LINK = /\[(.+?)\]\((.+?)\)/gi;
    var GMAIL_LINK = /\[\[gmail=(.+?),\s*(.+?)\]\]/gi;
    var OUTLOOK_LINK = /\[\[outlook=(.+?),\s*(.+?)\]\]/gi;
    var THUNDERBIRD_LINK = /\[\[thunderbird\n(.+)\n(.+)\n\s*\]\]/gi;
    var FAKE_SECTION_PREFIX = "* ";
    var FAKE_SECTION_SUFFIX = ":";
    function removeStyleFormatting(input) {
      if (!input.includes("!") && !input.includes("*") && !input.includes("_")) {
        return input;
      }
      function removeMarkdown(match, prefix, text) {
        return "".concat(prefix).concat(text);
      }
      input = input.replace(BOLD_ITALIC_FORMAT, removeMarkdown);
      input = input.replace(BOLD_FORMAT, removeMarkdown);
      input = input.replace(ITALIC_FORMAT, removeMarkdown);
      return input;
    }
    function removeCodeFormatting(input) {
      function removeMarkdown(match, text) {
        return text;
      }
      input = input.replace(CODE_BLOCK_FORMAT, removeMarkdown);
      input = input.replace(CODE_INLINE_FORMAT, removeMarkdown);
      return input;
    }
    function removeFakeSectionFormatting(input) {
      if (input.startsWith(FAKE_SECTION_PREFIX)) {
        input = input.slice(FAKE_SECTION_PREFIX.length);
      }
      if (input.endsWith(FAKE_SECTION_SUFFIX)) {
        input = input.slice(0, input.length - FAKE_SECTION_SUFFIX.length);
      }
      return input;
    }
    function removeMarkdownLinks(input) {
      if (!input.includes("[") || !input.includes("]")) {
        return input;
      }
      function removeMarkdown(match, text) {
        return text;
      }
      return input.replace(MARKDOWN_LINK, removeMarkdown);
    }
    function removeTodoistLinks(input) {
      if (!input.includes("(") || !input.includes(")")) {
        return input;
      }
      function removeMarkdown(match, url, text) {
        return text;
      }
      return input.replace(TODOIST_LINK, removeMarkdown);
    }
    function removeAppLinks(input) {
      if (input.includes("gmail")) {
        input = input.replace(GMAIL_LINK, function(match, id, text) {
          return text;
        });
      }
      if (input.includes("outlook")) {
        input = input.replace(OUTLOOK_LINK, function(match, id, text) {
          return text;
        });
      }
      if (input.includes("thunderbird")) {
        input = input.replace(THUNDERBIRD_LINK, function(match, text) {
          return text;
        });
      }
      return input;
    }
    function getSanitizedContent(input) {
      input = removeStyleFormatting(input);
      input = removeCodeFormatting(input);
      input = removeFakeSectionFormatting(input);
      input = removeMarkdownLinks(input);
      input = removeTodoistLinks(input);
      input = removeAppLinks(input);
      return input;
    }
    exports.getSanitizedContent = getSanitizedContent;
    function getSanitizedTasks(tasks) {
      return tasks.map(function(task) {
        return __assign2(__assign2({}, task), { sanitizedContent: getSanitizedContent(task.content) });
      });
    }
    exports.getSanitizedTasks = getSanitizedTasks;
  }
});

// node_modules/@doist/todoist-api-typescript/dist/utils/index.js
var require_utils2 = __commonJS({
  "node_modules/@doist/todoist-api-typescript/dist/utils/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_colors(), exports);
    __exportStar2(require_sanitization(), exports);
  }
});

// node_modules/@doist/todoist-api-typescript/dist/index.js
var require_dist10 = __commonJS({
  "node_modules/@doist/todoist-api-typescript/dist/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_TodoistApi(), exports);
    __exportStar2(require_restClient(), exports);
    __exportStar2(require_authentication(), exports);
    __exportStar2(require_types2(), exports);
    __exportStar2(require_utils2(), exports);
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => UltimateTodoistSyncForObsidian
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  initialized: false,
  apiInitialized: false,
  defaultProjectName: "Inbox",
  automaticSynchronizationInterval: 300,
  //default aync interval 300s
  todoistTasksData: { "projects": [], "tasks": [], "events": [] },
  fileMetadata: {},
  enableFullVaultSync: false,
  statistics: {},
  debugMode: false
  //mySetting: 'default',
  //todoistTasksFilePath: 'todoistTasks.json'
};
var UltimateTodoistSyncSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    var _a, _b;
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for Ultimate Todoist Sync for Obsidian." });
    const myProjectsOptions = (_b = (_a = this.plugin.settings.todoistTasksData) == null ? void 0 : _a.projects) == null ? void 0 : _b.reduce((obj, item) => {
      obj[item.id.toString()] = item.name;
      return obj;
    }, {});
    new import_obsidian.Setting(containerEl).setName("Todoist API").setDesc("Please enter todoist api token and click the paper airplane button to submit.").addText(
      (text) => text.setPlaceholder("Enter your API").setValue(this.plugin.settings.todoistAPIToken).onChange(async (value) => {
        this.plugin.settings.todoistAPIToken = value;
        this.plugin.settings.apiInitialized = false;
      })
    ).addExtraButton((button) => {
      button.setIcon("send").onClick(async () => {
        await this.plugin.modifyTodoistAPI(this.plugin.settings.todoistAPIToken);
        this.display();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Automatic Sync Interval Time").setDesc("Please specify the desired interval time, with seconds as the default unit. The default setting is 300 seconds, which corresponds to syncing once every 5 minutes. You can customize it, but it cannot be lower than 20 seconds.").addText(
      (text) => text.setPlaceholder("Sync interval").setValue(this.plugin.settings.automaticSynchronizationInterval.toString()).onChange(async (value) => {
        const intervalNum = Number(value);
        if (isNaN(intervalNum)) {
          new import_obsidian.Notice(`Wrong type,please enter a number.`);
          return;
        }
        if (intervalNum < 20) {
          new import_obsidian.Notice(`The synchronization interval time cannot be less than 20 seconds.`);
          return;
        }
        if (!Number.isInteger(intervalNum)) {
          new import_obsidian.Notice("The synchronization interval must be an integer.");
          return;
        }
        this.plugin.settings.automaticSynchronizationInterval = intervalNum;
        this.plugin.saveSettings();
        new import_obsidian.Notice("Settings have been updated.");
      })
    );
    new import_obsidian.Setting(containerEl).setName("Default Project").setDesc("New tasks are automatically synced to the default project. You can modify the project here.").addDropdown(
      (component) => component.addOption(this.plugin.settings.defaultProjectId, this.plugin.settings.defaultProjectName).addOptions(myProjectsOptions).onChange((value) => {
        this.plugin.settings.defaultProjectId = value;
        this.plugin.settings.defaultProjectName = this.plugin.cacheOperation.getProjectNameByIdFromCache(value);
        this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Full Vault Sync").setDesc("By default, only tasks marked with #todoist are synchronized. If this option is turned on, all tasks in the vault will be synchronized.").addToggle(
      (component) => component.setValue(this.plugin.settings.enableFullVaultSync).onChange((value) => {
        this.plugin.settings.enableFullVaultSync = value;
        this.plugin.saveSettings();
        new import_obsidian.Notice("Full vault sync is enabled.");
      })
    );
    new import_obsidian.Setting(containerEl).setName("Manual Sync").setDesc("Manually perform a synchronization task.").addButton(
      (button) => button.setButtonText("Sync").onClick(async () => {
        if (!this.plugin.settings.apiInitialized) {
          new import_obsidian.Notice(`Please set the todoist api first`);
          return;
        }
        try {
          await this.plugin.scheduledSynchronization();
          this.plugin.syncLock = false;
          new import_obsidian.Notice(`Sync completed..`);
        } catch (error) {
          new import_obsidian.Notice(`An error occurred while syncing.:${error}`);
          this.plugin.syncLock = false;
        }
      })
    );
    new import_obsidian.Setting(containerEl).setName("Check Database").setDesc("Check for possible issues: sync error, file renaming not updated, or missed tasks not synchronized.").addButton(
      (button) => button.setButtonText("Check Database").onClick(async () => {
        var _a2;
        if (!this.plugin.settings.apiInitialized) {
          new import_obsidian.Notice(`Please set the todoist api first`);
          return;
        }
        console.log("checking file metadata");
        await this.plugin.cacheOperation.checkFileMetadata();
        this.plugin.saveSettings();
        const metadatas = await this.plugin.cacheOperation.getFileMetadatas();
        try {
          const projectId = this.plugin.settings.defaultProjectId;
          let options = {};
          options.projectId = projectId;
          const tasks = await this.plugin.todoistRestAPI.GetActiveTasks(options);
          let length = tasks.length;
          if (length >= 300) {
            new import_obsidian.Notice(`The number of tasks in the default project exceeds 300, reaching the upper limit. It is not possible to add more tasks. Please modify the default project.`);
          }
        } catch (error) {
          console.error(`An error occurred while get tasks from todoist: ${error.message}`);
        }
        if (!await this.plugin.checkAndHandleSyncLock())
          return;
        console.log("checking deleted tasks");
        for (const key in metadatas) {
          const value = metadatas[key];
          for (const taskId of value.todoistTasks) {
            let taskObject;
            try {
              taskObject = await this.plugin.cacheOperation.loadTaskFromCacheyID(taskId);
            } catch (error) {
              console.error(`An error occurred while loading task cache: ${error.message}`);
            }
            if (!taskObject) {
              console.log(`The task data of the ${taskId} is empty.`);
              try {
                taskObject = await this.plugin.todoistRestAPI.getTaskById(taskId);
              } catch (error) {
                if (error.message.includes("404")) {
                  console.log(`Task ${taskId} seems to not exist.`);
                  await this.plugin.cacheOperation.deleteTaskIdFromMetadata(key, taskId);
                  continue;
                } else {
                  console.error(error);
                  continue;
                }
              }
            }
          }
          ;
        }
        this.plugin.saveSettings();
        console.log("checking renamed files");
        try {
          for (const key in metadatas) {
            const value = metadatas[key];
            const newDescription = this.plugin.taskParser.getObsidianUrlFromFilepath(key);
            for (const taskId of value.todoistTasks) {
              let taskObject;
              try {
                taskObject = await this.plugin.cacheOperation.loadTaskFromCacheyID(taskId);
              } catch (error) {
                console.error(`An error occurred while loading task ${taskId} from cache: ${error.message}`);
                console.log(taskObject);
              }
              if (!taskObject) {
                console.log(`Task ${taskId} seems to not exist.`);
                continue;
              }
              if (!(taskObject == null ? void 0 : taskObject.description)) {
                console.log(`The description of the task ${taskId} is empty.`);
              }
              const oldDescription = (_a2 = taskObject == null ? void 0 : taskObject.description) != null ? _a2 : "";
              if (newDescription != oldDescription) {
                console.log("Preparing to update description.");
                console.log(oldDescription);
                console.log(newDescription);
                try {
                } catch (error) {
                  console.error(`An error occurred while updating task discription: ${error.message}`);
                }
              }
            }
            ;
          }
          console.log("checking unsynced tasks");
          const files = this.app.vault.getFiles();
          files.forEach(async (v, i) => {
            if (v.extension == "md") {
              try {
                await this.plugin.fileOperation.addTodoistLinkToFile(v.path);
                if (this.plugin.settings.enableFullVaultSync) {
                  await this.plugin.fileOperation.addTodoistTagToFile(v.path);
                }
              } catch (error) {
                console.error(`An error occurred while check new tasks in the file: ${v.path}, ${error.message}`);
              }
            }
          });
          this.plugin.syncLock = false;
          new import_obsidian.Notice(`All files have been scanned.`);
        } catch (error) {
          console.error(`An error occurred while scanning the vault.:${error}`);
          this.plugin.syncLock = false;
        }
      })
    );
    new import_obsidian.Setting(containerEl).setName("Debug Mode").setDesc("After enabling this option, all log information will be output to the console, which can help check for errors.").addToggle(
      (component) => component.setValue(this.plugin.settings.debugMode).onChange((value) => {
        this.plugin.settings.debugMode = value;
        this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Backup Todoist Data").setDesc("Click to backup Todoist data, The backed-up files will be stored in the root directory of the Obsidian vault.").addButton(
      (button) => button.setButtonText("Backup").onClick(() => {
        if (!this.plugin.settings.apiInitialized) {
          new import_obsidian.Notice(`Please set the todoist api first`);
          return;
        }
        this.plugin.todoistSync.backupTodoistAllResources();
      })
    );
  }
};

// src/todoistRestAPI.ts
var import_todoist_api_typescript = __toESM(require_dist10());
function localDateStringToUTCDatetimeString(localDateString) {
  try {
    if (localDateString === null) {
      return null;
    }
    let localDateObj = new Date(localDateString);
    let ISOString = localDateObj.toISOString();
    return ISOString;
  } catch (error) {
    console.error(`Error extracting date from string '${localDateString}': ${error}`);
    return null;
  }
}
var TodoistRestAPI = class {
  constructor(app, plugin) {
    this.app = app;
    this.plugin = plugin;
  }
  initializeAPI() {
    const token = this.plugin.settings.todoistAPIToken;
    const api = new import_todoist_api_typescript.TodoistApi(token);
    return api;
  }
  async AddTask({ projectId, content, parentId = null, dueDate, dueDatetime, labels, description, priority }) {
    const api = await this.initializeAPI();
    try {
      if (dueDate) {
        dueDatetime = localDateStringToUTCDatetimeString(dueDatetime);
        dueDate = null;
      }
      const newTask = await api.addTask({
        projectId,
        content,
        parentId,
        dueDate,
        labels,
        description,
        priority
      });
      return newTask;
    } catch (error) {
      throw new Error(`Error adding task: ${error.message}`);
    }
  }
  //options:{ projectId?: string, section_id?: string, label?: string , filter?: string,lang?: string, ids?: Array<string>}
  async GetActiveTasks(options) {
    const api = await this.initializeAPI();
    try {
      const result = await api.getTasks(options);
      return result;
    } catch (error) {
      throw new Error(`Error get active tasks: ${error.message}`);
    }
  }
  //Also note that to remove the due date of a task completely, you should set the due_string parameter to no date or no due date.
  //api 没有 update task project id 的函数
  async UpdateTask(taskId, updates) {
    const api = await this.initializeAPI();
    if (!taskId) {
      throw new Error("taskId is required");
    }
    if (!updates.content && !updates.description && !updates.dueDate && !updates.dueDatetime && !updates.dueString && !updates.labels && !updates.parentId && !updates.priority) {
      throw new Error("At least one update is required");
    }
    try {
      if (updates.dueDate) {
        console.log(updates.dueDate);
        updates.dueDatetime = localDateStringToUTCDatetimeString(updates.dueDate);
        updates.dueDate = null;
        console.log(updates.dueDatetime);
      }
      const updatedTask = await api.updateTask(taskId, updates);
      return updatedTask;
    } catch (error) {
      throw new Error(`Error updating task: ${error.message}`);
    }
  }
  //open a task
  async OpenTask(taskId) {
    const api = await this.initializeAPI();
    try {
      const isSuccess = await api.reopenTask(taskId);
      console.log(`Task ${taskId} is reopend`);
      return isSuccess;
    } catch (error) {
      console.error("Error open a  task:", error);
      return;
    }
  }
  // Close a task in Todoist API
  async CloseTask(taskId) {
    const api = await this.initializeAPI();
    try {
      const isSuccess = await api.closeTask(taskId);
      console.log(`Task ${taskId} is closed`);
      return isSuccess;
    } catch (error) {
      console.error("Error closing task:", error);
      throw error;
    }
  }
  // get a task by Id
  async getTaskById(taskId) {
    const api = await this.initializeAPI();
    if (!taskId) {
      throw new Error("taskId is required");
    }
    try {
      const task = await api.getTask(taskId);
      return task;
    } catch (error) {
      if (error.response && error.response.status) {
        const statusCode = error.response.status;
        throw new Error(`Error retrieving task. Status code: ${statusCode}`);
      } else {
        throw new Error(`Error retrieving task: ${error.message}`);
      }
    }
  }
  //get a task due by id
  async getTaskDueById(taskId) {
    var _a;
    const api = await this.initializeAPI();
    if (!taskId) {
      throw new Error("taskId is required");
    }
    try {
      const task = await api.getTask(taskId);
      const due = (_a = task.due) != null ? _a : null;
      return due;
    } catch (error) {
      throw new Error(`Error updating task: ${error.message}`);
    }
  }
  //get all projects
  async GetAllProjects() {
    const api = await this.initializeAPI();
    try {
      const result = await api.getProjects();
      return result;
    } catch (error) {
      console.error("Error get all projects", error);
      return false;
    }
  }
};

// src/todoistSyncAPI.ts
var TodoistSyncAPI = class {
  constructor(app, plugin) {
    this.app = app;
    this.plugin = plugin;
  }
  //backup todoist
  async getAllResources() {
    const accessToken = this.plugin.settings.todoistAPIToken;
    const url = "https://api.todoist.com/sync/v9/sync";
    const options = {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${accessToken}`,
        "Content-Type": "application/x-www-form-urlencoded"
      },
      body: new URLSearchParams({
        sync_token: "*",
        resource_types: '["all"]'
      })
    };
    try {
      const response = await fetch(url, options);
      if (!response.ok) {
        throw new Error(`Failed to fetch all resources: ${response.status} ${response.statusText}`);
      }
      const data = await response.json();
      return data;
    } catch (error) {
      console.error(error);
      throw new Error("Failed to fetch all resources due to network error");
    }
  }
  //backup todoist
  async getUserResource() {
    const accessToken = this.plugin.settings.todoistAPIToken;
    const url = "https://api.todoist.com/sync/v9/sync";
    const options = {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${accessToken}`,
        "Content-Type": "application/x-www-form-urlencoded"
      },
      body: new URLSearchParams({
        sync_token: "*",
        resource_types: '["user_plan_limits"]'
      })
    };
    try {
      const response = await fetch(url, options);
      if (!response.ok) {
        throw new Error(`Failed to fetch all resources: ${response.status} ${response.statusText}`);
      }
      const data = await response.json();
      console.log(data);
      return data;
    } catch (error) {
      console.error(error);
      throw new Error("Failed to fetch user resources due to network error");
    }
  }
  //update user timezone
  async updateUserTimezone() {
    const unixTimestampString = Math.floor(Date.now() / 1e3).toString();
    const accessToken = this.plugin.settings.todoistAPIToken;
    const url = "https://api.todoist.com/sync/v9/sync";
    const commands = [
      {
        "type": "user_update",
        "uuid": unixTimestampString,
        "args": { "timezone": "Asia/Shanghai" }
      }
    ];
    const options = {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${accessToken}`,
        "Content-Type": "application/x-www-form-urlencoded"
      },
      body: new URLSearchParams({ commands: JSON.stringify(commands) })
    };
    try {
      const response = await fetch(url, options);
      if (!response.ok) {
        throw new Error(`Failed to fetch all resources: ${response.status} ${response.statusText}`);
      }
      const data = await response.json();
      console.log(data);
      return data;
    } catch (error) {
      console.error(error);
      throw new Error("Failed to fetch user resources due to network error");
    }
  }
  //get activity logs
  //result  {count:number,events:[]}
  async getAllActivityEvents() {
    const accessToken = this.plugin.settings.todoistAPIToken;
    const headers = new Headers({
      Authorization: `Bearer ${accessToken}`
    });
    try {
      const response = await fetch("https://api.todoist.com/sync/v9/activity/get", {
        method: "POST",
        headers,
        body: JSON.stringify({})
      });
      if (!response.ok) {
        throw new Error(`API returned error status: ${response.status}`);
      }
      const data = await response.json();
      return data;
    } catch (error) {
      throw error;
    }
  }
  async getNonObsidianAllActivityEvents() {
    try {
      const allActivity = await this.getAllActivityEvents();
      const allActivityEvents = allActivity.events;
      const filteredArray = allActivityEvents.filter((obj) => {
        var _a;
        return !((_a = obj.extra_data.client) == null ? void 0 : _a.includes("obsidian"));
      });
      return filteredArray;
    } catch (err) {
      console.error("An error occurred:", err);
    }
  }
  filterActivityEvents(events, options) {
    return events.filter(
      (event) => (options.event_type ? event.event_type === options.event_type : true) && (options.object_type ? event.object_type === options.object_type : true)
    );
  }
  //get completed items activity
  //result  {count:number,events:[]}
  async getCompletedItemsActivity() {
    const accessToken = this.plugin.settings.todoistAPIToken;
    const url = "https://api.todoist.com/sync/v9/activity/get";
    const options = {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${accessToken}`,
        "Content-Type": "application/x-www-form-urlencoded"
      },
      body: new URLSearchParams({
        "object_type": "item",
        "event_type": "completed"
      })
    };
    try {
      const response = await fetch(url, options);
      if (!response.ok) {
        throw new Error(`Failed to fetch completed items: ${response.status} ${response.statusText}`);
      }
      const data = await response.json();
      return data;
    } catch (error) {
      console.error(error);
      throw new Error("Failed to fetch completed items due to network error");
    }
  }
  //get uncompleted items activity
  //result  {count:number,events:[]}
  async getUncompletedItemsActivity() {
    const accessToken = this.plugin.settings.todoistAPIToken;
    const url = "https://api.todoist.com/sync/v9/activity/get";
    const options = {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${accessToken}`,
        "Content-Type": "application/x-www-form-urlencoded"
      },
      body: new URLSearchParams({
        "object_type": "item",
        "event_type": "uncompleted"
      })
    };
    try {
      const response = await fetch(url, options);
      if (!response.ok) {
        throw new Error(`Failed to fetch uncompleted items: ${response.status} ${response.statusText}`);
      }
      const data = await response.json();
      return data;
    } catch (error) {
      console.error(error);
      throw new Error("Failed to fetch uncompleted items due to network error");
    }
  }
  //get non-obsidian completed event
  async getNonObsidianCompletedItemsActivity() {
    const accessToken = this.plugin.settings.todoistAPIToken;
    const completedItemsActivity = await this.getCompletedItemsActivity();
    const completedItemsActivityEvents = completedItemsActivity.events;
    const filteredArray = completedItemsActivityEvents.filter((obj) => !obj.extra_data.client.includes("obsidian"));
    return filteredArray;
  }
  //get non-obsidian uncompleted event
  async getNonObsidianUncompletedItemsActivity() {
    const uncompletedItemsActivity = await this.getUncompletedItemsActivity();
    const uncompletedItemsActivityEvents = uncompletedItemsActivity.events;
    const filteredArray = uncompletedItemsActivityEvents.filter((obj) => !obj.extra_data.client.includes("obsidian"));
    return filteredArray;
  }
  //get updated items activity
  //result  {count:number,events:[]}
  async getUpdatedItemsActivity() {
    const accessToken = this.plugin.settings.todoistAPIToken;
    const url = "https://api.todoist.com/sync/v9/activity/get";
    const options = {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${accessToken}`,
        "Content-Type": "application/x-www-form-urlencoded"
      },
      body: new URLSearchParams({
        "object_type": "item",
        "event_type": "updated"
      })
    };
    try {
      const response = await fetch(url, options);
      if (!response.ok) {
        throw new Error(`Failed to fetch updated items: ${response.status} ${response.statusText}`);
      }
      const data = await response.json();
      return data;
    } catch (error) {
      console.error(error);
      throw new Error("Failed to fetch updated items due to network error");
    }
  }
  //get non-obsidian updated event
  async getNonObsidianUpdatedItemsActivity() {
    const updatedItemsActivity = await this.getUpdatedItemsActivity();
    const updatedItemsActivityEvents = updatedItemsActivity.events;
    const filteredArray = updatedItemsActivityEvents.filter((obj) => {
      const client = obj.extra_data && obj.extra_data.client;
      return !client || !client.includes("obsidian");
    });
    return filteredArray;
  }
  //get completed items activity
  //result  {count:number,events:[]}
  async getProjectsActivity() {
    const accessToken = this.plugin.settings.todoistAPIToken;
    const url = "https://api.todoist.com/sync/v9/activity/get";
    const options = {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${accessToken}`,
        "Content-Type": "application/x-www-form-urlencoded"
      },
      body: new URLSearchParams({
        "object_type": "project"
      })
    };
    try {
      const response = await fetch(url, options);
      if (!response.ok) {
        throw new Error(`Failed to fetch  projects activities: ${response.status} ${response.statusText}`);
      }
      const data = await response.json();
      return data;
    } catch (error) {
      console.error(error);
      throw new Error("Failed to fetch projects activities due to network error");
    }
  }
};

// src/taskParser.ts
var keywords = {
  TODOIST_TAG: "#todoist",
  DUE_DATE: "\u{1F5D3}\uFE0F|\u{1F4C5}|\u{1F4C6}|\u{1F5D3}",
  DUE_TIME: "\u23F0"
};
var REGEX = {
  TODOIST_TAG: new RegExp(`^[\\s]*[-] \\[[x ]\\] [\\s\\S]*${keywords.TODOIST_TAG}[\\s\\S]*$`, "i"),
  TODOIST_ID: /\[todoist_id::\s*\d+\]/,
  TODOIST_ID_NUM: /\[todoist_id::\s*(.*?)\]/,
  TODOIST_LINK: /\[link\]\(.*?\)/,
  DUE_DATE_WITH_EMOJ: new RegExp(`(${keywords.DUE_DATE})\\s?\\d{4}-\\d{2}-\\d{2}`),
  DUE_DATE: new RegExp(`(?:${keywords.DUE_DATE})\\s?(\\d{4}-\\d{2}-\\d{2})`),
  DUE_TIME: new RegExp(`(?:${keywords.DUE_TIME})\\s?(\\d{2}:\\d{2})`),
  PROJECT_NAME: /\[project::\s*(.*?)\]/,
  TASK_CONTENT: {
    REMOVE_PRIORITY: /\s!!([1-4])\s/,
    REMOVE_TAGS: /(^|\s)(#[a-zA-Z\d\u4e00-\u9fa5-]+)/g,
    REMOVE_SPACE: /^\s+|\s+$/g,
    REMOVE_DATE: new RegExp(`(${keywords.DUE_DATE})\\s?\\d{4}-\\d{2}-\\d{2}`),
    REMOVE_TIME: new RegExp(`(${keywords.DUE_TIME})\\s?\\d{2}:\\d{2}`),
    REMOVE_INLINE_METADATA: /%%\[\w+::\s*\w+\]%%/,
    REMOVE_CHECKBOX: /^(-|\*)\s+\[(x|X| )\]\s/,
    REMOVE_CHECKBOX_WITH_INDENTATION: /^([ \t]*)?(-|\*)\s+\[(x|X| )\]\s/,
    REMOVE_TODOIST_LINK: /\[link\]\(.*?\)/
  },
  ALL_TAGS: /#[\w\u4e00-\u9fa5-]+/g,
  TASK_CHECKBOX_CHECKED: /- \[(x|X)\] /,
  TASK_INDENTATION: /^(\s{2,}|\t)(-|\*)\s+\[(x|X| )\]/,
  TAB_INDENTATION: /^(\t+)/,
  TASK_PRIORITY: /\s!!([1-4])\s/,
  BLANK_LINE: /^\s*$/,
  TODOIST_EVENT_DATE: /(\d{4})-(\d{2})-(\d{2})/
};
var TaskParser = class {
  constructor(app, plugin) {
    this.app = app;
    this.plugin = plugin;
  }
  //convert line text to a task object
  async convertTextToTodoistTaskObject(lineText, filepath, lineNumber, fileContent) {
    let hasParent = false;
    let parentId = null;
    let parentTaskObject = null;
    let textWithoutIndentation = lineText;
    if (this.getTabIndentation(lineText) > 0) {
      textWithoutIndentation = this.removeTaskIndentation(lineText);
      const lines = fileContent.split("\n");
      for (let i = lineNumber - 1; i >= 0; i--) {
        const line = lines[i];
        if (this.isLineBlank(line)) {
          break;
        }
        if (this.getTabIndentation(line) >= this.getTabIndentation(lineText)) {
          continue;
        }
        if (this.getTabIndentation(line) < this.getTabIndentation(lineText)) {
          if (this.hasTodoistId(line)) {
            parentId = this.getTodoistIdFromLineText(line);
            hasParent = true;
            parentTaskObject = this.plugin.cacheOperation.loadTaskFromCacheyID(parentId);
            break;
          } else {
            break;
          }
        }
      }
    }
    const dueDate = this.getDueDateFromLineText(textWithoutIndentation);
    const labels = this.getAllTagsFromLineText(textWithoutIndentation);
    let projectId = this.plugin.cacheOperation.getDefaultProjectIdForFilepath(filepath);
    let projectName = this.plugin.cacheOperation.getProjectNameByIdFromCache(projectId);
    if (hasParent) {
      projectId = parentTaskObject.projectId;
      projectName = this.plugin.cacheOperation.getProjectNameByIdFromCache(projectId);
    }
    if (!hasParent) {
      for (const label of labels) {
        let labelName = label.replace(/#/g, "");
        let hasProjectId = this.plugin.cacheOperation.getProjectIdByNameFromCache(labelName);
        if (!hasProjectId) {
          continue;
        }
        projectName = labelName;
        projectId = hasProjectId;
        break;
      }
    }
    let content = this.getTaskContentFromLineText(textWithoutIndentation);
    if (content === "") {
      content = filepath.replace(/^.*[\\/]/, "").replace(".md", "");
    }
    const isCompleted = this.isTaskCheckboxChecked(textWithoutIndentation);
    let description = "";
    const todoist_id = this.getTodoistIdFromLineText(textWithoutIndentation);
    const priority = this.getTaskPriority(textWithoutIndentation);
    if (filepath) {
      let url = encodeURI(`obsidian://open?vault=${this.app.vault.getName()}&file=${filepath}`);
      description = `[${filepath}](${url})`;
    }
    const todoistTask = {
      projectId,
      content: content || "",
      parentId: parentId || null,
      dueDate: dueDate || "",
      labels: labels || [],
      description,
      isCompleted,
      todoist_id: todoist_id || null,
      hasParent,
      priority
    };
    return todoistTask;
  }
  hasTodoistTag(text) {
    return REGEX.TODOIST_TAG.test(text);
  }
  hasTodoistId(text) {
    const result = REGEX.TODOIST_ID.test(text);
    return result;
  }
  hasDueDate(text) {
    return REGEX.DUE_DATE_WITH_EMOJ.test(text);
  }
  getDueDateFromLineText(text) {
    const date = REGEX.DUE_DATE.exec(text);
    if (date === null) {
      return null;
    }
    const time = REGEX.DUE_TIME.exec(text);
    return time ? date[1] + "T" + time[1] : date[1] + "T08:00";
  }
  getProjectNameFromLineText(text) {
    const result = REGEX.PROJECT_NAME.exec(text);
    return result ? result[1] : null;
  }
  getTodoistIdFromLineText(text) {
    const result = REGEX.TODOIST_ID_NUM.exec(text);
    return result ? result[1] : null;
  }
  getDueDateFromDataview(dataviewTask) {
    if (!dataviewTask.due) {
      return "";
    } else {
      const dataviewTaskDue = dataviewTask.due.toString().slice(0, 10);
      return dataviewTaskDue;
    }
  }
  /*
  //convert line task to dataview task object
  async  getLineTask(filepath,line){
      //const tasks = this.app.plugins.plugins.dataview.api.pages(`"${filepath}"`).file.tasks
      const tasks = await getAPI(this.app).pages(`"${filepath}"`).file.tasks
      const tasksValues = tasks.values
      //console.log(`dataview filepath is ${filepath}`)
      //console.log(`dataview line is ${line}`)
      //console.log(tasksValues)
      const currentLineTask = tasksValues.find(obj => obj.line === line )	
      console.log(currentLineTask)
      return(currentLineTask)
  
  }
  */
  getTaskContentFromLineText(lineText) {
    const TaskContent = lineText.replace(REGEX.TASK_CONTENT.REMOVE_INLINE_METADATA, "").replace(REGEX.TASK_CONTENT.REMOVE_TODOIST_LINK, "").replace(REGEX.TASK_CONTENT.REMOVE_PRIORITY, " ").replace(REGEX.TASK_CONTENT.REMOVE_TAGS, "").replace(REGEX.TASK_CONTENT.REMOVE_DATE, "").replace(REGEX.TASK_CONTENT.REMOVE_TIME, "").replace(REGEX.TASK_CONTENT.REMOVE_CHECKBOX, "").replace(REGEX.TASK_CONTENT.REMOVE_CHECKBOX_WITH_INDENTATION, "").replace(REGEX.TASK_CONTENT.REMOVE_SPACE, "");
    return TaskContent;
  }
  //get all tags from task text
  getAllTagsFromLineText(lineText) {
    let tags = lineText.match(REGEX.ALL_TAGS);
    if (tags) {
      tags = tags.map((tag) => tag.replace("#", ""));
    }
    return tags;
  }
  //get checkbox status
  isTaskCheckboxChecked(lineText) {
    return REGEX.TASK_CHECKBOX_CHECKED.test(lineText);
  }
  //task content compare
  taskContentCompare(lineTask, todoistTask) {
    const lineTaskContent = lineTask.content;
    const todoistTaskContent = todoistTask.content;
    const contentModified = lineTaskContent === todoistTaskContent;
    return contentModified;
  }
  //tag compare
  taskTagCompare(lineTask, todoistTask) {
    const lineTaskTags = lineTask.labels;
    const todoistTaskTags = todoistTask.labels;
    const tagsModified = lineTaskTags.length === todoistTaskTags.length && lineTaskTags.sort().every((val, index) => val === todoistTaskTags.sort()[index]);
    return tagsModified;
  }
  //task status compare
  taskStatusCompare(lineTask, todoistTask) {
    const statusModified = lineTask.isCompleted === todoistTask.isCompleted;
    return statusModified;
  }
  //task due date compare
  async compareTaskDueDate(lineTask, todoistTask) {
    var _a;
    const lineTaskDue = lineTask.dueDate;
    const todoistTaskDue = (_a = todoistTask.due) != null ? _a : "";
    if (lineTaskDue === "" && todoistTaskDue === "") {
      return true;
    }
    if ((lineTaskDue || todoistTaskDue) === "") {
      console.log(lineTaskDue);
      console.log(todoistTaskDue);
      return false;
    }
    const oldDueDateUTCString = this.localDateStringToUTCDateString(lineTaskDue);
    if (oldDueDateUTCString === todoistTaskDue.date) {
      return true;
    } else if (lineTaskDue.toString() === "Invalid Date" || todoistTaskDue.toString() === "Invalid Date") {
      console.log("invalid date");
      return false;
    } else {
      return false;
    }
  }
  //task project id compare
  async taskProjectCompare(lineTask, todoistTask) {
    return lineTask.projectId === todoistTask.projectId;
  }
  //判断任务是否缩进
  isIndentedTask(text) {
    return REGEX.TASK_INDENTATION.test(text);
  }
  //判断制表符的数量
  //console.log(getTabIndentation("\t\t- [x] This is a task with two tabs")); // 2
  //console.log(getTabIndentation("  - [x] This is a task without tabs")); // 0
  getTabIndentation(lineText) {
    const match = REGEX.TAB_INDENTATION.exec(lineText);
    return match ? match[1].length : 0;
  }
  //	Task priority from 1 (normal) to 4 (urgent).
  getTaskPriority(lineText) {
    const match = REGEX.TASK_PRIORITY.exec(lineText);
    return match ? Number(match[1]) : 1;
  }
  //remove task indentation
  removeTaskIndentation(text) {
    const regex = /^([ \t]*)?- \[(x| )\] /;
    return text.replace(regex, "- [$2] ");
  }
  //判断line是不是空行
  isLineBlank(lineText) {
    return REGEX.BLANK_LINE.test(lineText);
  }
  //在linetext中插入日期
  insertDueDateBeforeTodoist(text, dueDate) {
    const regex = new RegExp(`(${keywords.TODOIST_TAG})`);
    return text.replace(regex, `\u{1F4C5} ${dueDate} $1`);
  }
  //extra date from obsidian event
  // 使用示例
  //const str = "2023-03-27T15:59:59.000000Z";
  //const dateStr = ISOStringToLocalDateString(str);
  //console.log(dateStr); // 输出 2023-03-27
  ISOStringToLocalDateString(utcTimeString) {
    try {
      if (utcTimeString === null) {
        return null;
      }
      let utcDateString = utcTimeString;
      let dateObj = new Date(utcDateString);
      let year = dateObj.getFullYear();
      let month = (dateObj.getMonth() + 1).toString().padStart(2, "0");
      let date = dateObj.getDate().toString().padStart(2, "0");
      let localDateString = `${year}-${month}-${date}`;
      return localDateString;
      return localDateString;
    } catch (error) {
      console.error(`Error extracting date from string '${utcTimeString}': ${error}`);
      return null;
    }
  }
  //extra date from obsidian event
  // 使用示例
  //const str = "2023-03-27T15:59:59.000000Z";
  //const dateStr = ISOStringToLocalDatetimeString(str);
  //console.log(dateStr); // 输出 Mon Mar 27 2023 23:59:59 GMT+0800 (China Standard Time)
  ISOStringToLocalDatetimeString(utcTimeString) {
    try {
      if (utcTimeString === null) {
        return null;
      }
      let utcDateString = utcTimeString;
      let dateObj = new Date(utcDateString);
      let result = dateObj.toString();
      return result;
    } catch (error) {
      console.error(`Error extracting date from string '${utcTimeString}': ${error}`);
      return null;
    }
  }
  //convert date from obsidian event
  // 使用示例
  //const str = "2023-03-27";
  //const utcStr = localDateStringToUTCDatetimeString(str);
  //console.log(dateStr); // 输出 2023-03-27T00:00:00.000Z
  localDateStringToUTCDatetimeString(localDateString) {
    try {
      if (localDateString === null) {
        return null;
      }
      localDateString = localDateString;
      let localDateObj = new Date(localDateString);
      let ISOString = localDateObj.toISOString();
      return ISOString;
    } catch (error) {
      console.error(`Error extracting date from string '${localDateString}': ${error}`);
      return null;
    }
  }
  //convert date from obsidian event
  // 使用示例
  //const str = "2023-03-27";
  //const utcStr = localDateStringToUTCDateString(str);
  //console.log(dateStr); // 输出 2023-03-27
  localDateStringToUTCDateString(localDateString) {
    try {
      if (localDateString === null) {
        return null;
      }
      localDateString = localDateString;
      let localDateObj = new Date(localDateString);
      let ISOString = localDateObj.toISOString();
      let utcDateString = ISOString.slice(0, 10);
      return utcDateString;
    } catch (error) {
      console.error(`Error extracting date from string '${localDateString}': ${error}`);
      return null;
    }
  }
  isMarkdownTask(str) {
    const taskRegex = /^\s*-\s+\[([x ])\]/;
    return taskRegex.test(str);
  }
  addTodoistTag(str) {
    return str + ` ${keywords.TODOIST_TAG}`;
  }
  getObsidianUrlFromFilepath(filepath) {
    const url = encodeURI(`obsidian://open?vault=${this.app.vault.getName()}&file=${filepath}`);
    const obsidianUrl = `[${filepath}](${url})`;
    return obsidianUrl;
  }
  addTodoistLink(linetext, todoistLink) {
    const regex = new RegExp(`${keywords.TODOIST_TAG}`, "g");
    return linetext.replace(regex, todoistLink + " $&");
  }
  //检查是否包含todoist link
  hasTodoistLink(lineText) {
    return REGEX.TODOIST_LINK.test(lineText);
  }
};

// src/cacheOperation.ts
var CacheOperation = class {
  constructor(app, plugin) {
    this.app = app;
    this.plugin = plugin;
  }
  async getFileMetadata(filepath) {
    var _a;
    return (_a = this.plugin.settings.fileMetadata[filepath]) != null ? _a : null;
  }
  async getFileMetadatas() {
    var _a;
    return (_a = this.plugin.settings.fileMetadata) != null ? _a : null;
  }
  async newEmptyFileMetadata(filepath) {
    const metadatas = this.plugin.settings.fileMetadata;
    if (metadatas[filepath]) {
      return;
    } else {
      metadatas[filepath] = {};
    }
    metadatas[filepath].todoistTasks = [];
    metadatas[filepath].todoistCount = 0;
    this.plugin.settings.fileMetadata = metadatas;
  }
  async updateFileMetadata(filepath, newMetadata) {
    const metadatas = this.plugin.settings.fileMetadata;
    if (!metadatas[filepath]) {
      metadatas[filepath] = {};
    }
    metadatas[filepath].todoistTasks = newMetadata.todoistTasks;
    metadatas[filepath].todoistCount = newMetadata.todoistCount;
    this.plugin.settings.fileMetadata = metadatas;
  }
  async deleteTaskIdFromMetadata(filepath, taskId) {
    console.log(filepath);
    const metadata = await this.getFileMetadata(filepath);
    console.log(metadata);
    const newTodoistTasks = metadata.todoistTasks.filter(function(element) {
      return element !== taskId;
    });
    const newTodoistCount = metadata.todoistCount - 1;
    let newMetadata = {};
    newMetadata.todoistTasks = newTodoistTasks;
    newMetadata.todoistCount = newTodoistCount;
    console.log(`new metadata ${newMetadata}`);
  }
  //delete filepath from filemetadata
  async deleteFilepathFromMetadata(filepath) {
    Reflect.deleteProperty(this.plugin.settings.fileMetadata, filepath);
    this.plugin.saveSettings();
    console.log(`${filepath} is deleted from file metadatas.`);
  }
  //Check errors in filemata where the filepath is incorrect.
  async checkFileMetadata() {
    var _a, _b;
    const metadatas = await this.getFileMetadatas();
    for (const key in metadatas) {
      let filepath = key;
      const value = metadatas[key];
      let file = this.app.vault.getAbstractFileByPath(key);
      if (!file && (((_a = value.todoistTasks) == null ? void 0 : _a.length) === 0 || !value.todoistTasks)) {
        console.log(`${key} is not existed and metadata is empty.`);
        await this.deleteFilepathFromMetadata(key);
        continue;
      }
      if (((_b = value.todoistTasks) == null ? void 0 : _b.length) === 0 || !value.todoistTasks) {
        continue;
      }
      if (!file) {
        console.log(`file ${filepath} is not exist`);
        const todoistId1 = value.todoistTasks[0];
        console.log(todoistId1);
        const searchResult = await this.plugin.fileOperation.searchFilepathsByTaskidInVault(todoistId1);
        console.log(`new file path is`);
        console.log(searchResult);
        await this.updateRenamedFilePath(filepath, searchResult);
        this.plugin.saveSettings();
      }
    }
  }
  getDefaultProjectNameForFilepath(filepath) {
    const metadatas = this.plugin.settings.fileMetadata;
    if (!metadatas[filepath] || metadatas[filepath].defaultProjectId === void 0) {
      return this.plugin.settings.defaultProjectName;
    } else {
      const defaultProjectId = metadatas[filepath].defaultProjectId;
      const defaultProjectName = this.getProjectNameByIdFromCache(defaultProjectId);
      return defaultProjectName;
    }
  }
  getDefaultProjectIdForFilepath(filepath) {
    const metadatas = this.plugin.settings.fileMetadata;
    if (!metadatas[filepath] || metadatas[filepath].defaultProjectId === void 0) {
      return this.plugin.settings.defaultProjectId;
    } else {
      const defaultProjectId = metadatas[filepath].defaultProjectId;
      return defaultProjectId;
    }
  }
  setDefaultProjectIdForFilepath(filepath, defaultProjectId) {
    const metadatas = this.plugin.settings.fileMetadata;
    if (!metadatas[filepath]) {
      metadatas[filepath] = {};
    }
    metadatas[filepath].defaultProjectId = defaultProjectId;
    this.plugin.settings.fileMetadata = metadatas;
  }
  // 从 Cache读取所有task
  loadTasksFromCache() {
    try {
      const savedTasks = this.plugin.settings.todoistTasksData.tasks;
      return savedTasks;
    } catch (error) {
      console.error(`Error loading tasks from Cache: ${error}`);
      return [];
    }
  }
  // 覆盖保存所有task到cache
  saveTasksToCache(newTasks) {
    try {
      this.plugin.settings.todoistTasksData.tasks = newTasks;
    } catch (error) {
      console.error(`Error saving tasks to Cache: ${error}`);
      return false;
    }
  }
  // append event 到 Cache
  appendEventToCache(event) {
    try {
      this.plugin.settings.todoistTasksData.events.push(event);
    } catch (error) {
      console.error(`Error append event to Cache: ${error}`);
    }
  }
  // append events 到 Cache
  appendEventsToCache(events) {
    try {
      this.plugin.settings.todoistTasksData.events.push(...events);
    } catch (error) {
      console.error(`Error append events to Cache: ${error}`);
    }
  }
  // 从 Cache 文件中读取所有events
  loadEventsFromCache() {
    try {
      const savedEvents = this.plugin.settings.todoistTasksData.events;
      return savedEvents;
    } catch (error) {
      console.error(`Error loading events from Cache: ${error}`);
    }
  }
  // 追加到 Cache 文件
  appendTaskToCache(task) {
    try {
      if (task === null) {
        return;
      }
      const savedTasks = this.plugin.settings.todoistTasksData.tasks;
      this.plugin.settings.todoistTasksData.tasks.push(task);
    } catch (error) {
      console.error(`Error appending task to Cache: ${error}`);
    }
  }
  //读取指定id的任务
  loadTaskFromCacheyID(taskId) {
    try {
      const savedTasks = this.plugin.settings.todoistTasksData.tasks;
      const savedTask = savedTasks.find((t) => t.id === taskId);
      return savedTask;
    } catch (error) {
      console.error(`Error finding task from Cache: ${error}`);
      return [];
    }
  }
  //覆盖update指定id的task
  updateTaskToCacheByID(task) {
    try {
      this.deleteTaskFromCache(task.id);
      this.appendTaskToCache(task);
    } catch (error) {
      console.error(`Error updating task to Cache: ${error}`);
      return [];
    }
  }
  //due 的结构  {date: "2025-02-25",isRecurring: false,lang: "en",string: "2025-02-25"}
  modifyTaskToCacheByID(taskId, { content, due }) {
    try {
      const savedTasks = this.plugin.settings.todoistTasksData.tasks;
      const taskIndex = savedTasks.findIndex((task) => task.id === taskId);
      if (taskIndex !== -1) {
        const updatedTask = { ...savedTasks[taskIndex] };
        if (content !== void 0) {
          updatedTask.content = content;
        }
        if (due !== void 0) {
          if (due === null) {
            updatedTask.due = null;
          } else {
            updatedTask.due = due;
          }
        }
        savedTasks[taskIndex] = updatedTask;
        this.plugin.settings.todoistTasksData.tasks = savedTasks;
      } else {
        throw new Error(`Task with ID ${taskId} not found in cache.`);
      }
    } catch (error) {
    }
  }
  //open a task status
  reopenTaskToCacheByID(taskId) {
    try {
      const savedTasks = this.plugin.settings.todoistTasksData.tasks;
      for (let i = 0; i < savedTasks.length; i++) {
        if (savedTasks[i].id === taskId) {
          savedTasks[i].isCompleted = false;
          break;
        }
      }
      this.plugin.settings.todoistTasksData.tasks = savedTasks;
    } catch (error) {
      console.error(`Error open task to Cache file: ${error}`);
      return [];
    }
  }
  //close a task status
  closeTaskToCacheByID(taskId) {
    try {
      const savedTasks = this.plugin.settings.todoistTasksData.tasks;
      for (let i = 0; i < savedTasks.length; i++) {
        if (savedTasks[i].id === taskId) {
          savedTasks[i].isCompleted = true;
          break;
        }
      }
      this.plugin.settings.todoistTasksData.tasks = savedTasks;
    } catch (error) {
      console.error(`Error close task to Cache file: ${error}`);
      throw error;
    }
  }
  // 通过 ID 删除任务
  deleteTaskFromCache(taskId) {
    try {
      const savedTasks = this.plugin.settings.todoistTasksData.tasks;
      const newSavedTasks = savedTasks.filter((t) => t.id !== taskId);
      this.plugin.settings.todoistTasksData.tasks = newSavedTasks;
    } catch (error) {
      console.error(`Error deleting task from Cache file: ${error}`);
    }
  }
  // 通过 ID 数组 删除task
  deleteTaskFromCacheByIDs(deletedTaskIds) {
    try {
      const savedTasks = this.plugin.settings.todoistTasksData.tasks;
      const newSavedTasks = savedTasks.filter((t) => !deletedTaskIds.includes(t.id));
      this.plugin.settings.todoistTasksData.tasks = newSavedTasks;
    } catch (error) {
      console.error(`Error deleting task from Cache : ${error}`);
    }
  }
  //通过 name 查找 project id
  getProjectIdByNameFromCache(projectName) {
    try {
      const savedProjects = this.plugin.settings.todoistTasksData.projects;
      const targetProject = savedProjects.find((obj) => obj.name === projectName);
      const projectId = targetProject ? targetProject.id : null;
      return projectId;
    } catch (error) {
      console.error(`Error finding project from Cache file: ${error}`);
      return false;
    }
  }
  getProjectNameByIdFromCache(projectId) {
    try {
      const savedProjects = this.plugin.settings.todoistTasksData.projects;
      const targetProject = savedProjects.find((obj) => obj.id === projectId);
      const projectName = targetProject ? targetProject.name : null;
      return projectName;
    } catch (error) {
      console.error(`Error finding project from Cache file: ${error}`);
      return false;
    }
  }
  //save projects data to json file
  async saveProjectsToCache() {
    try {
      const projects = await this.plugin.todoistRestAPI.GetAllProjects();
      if (!projects) {
        return false;
      }
      this.plugin.settings.todoistTasksData.projects = projects;
      return true;
    } catch (error) {
      return false;
      console.log(`error downloading projects: ${error}`);
    }
  }
  async updateRenamedFilePath(oldpath, newpath) {
    try {
      console.log(`oldpath is ${oldpath}`);
      console.log(`newpath is ${newpath}`);
      const savedTask = await this.loadTasksFromCache();
      const newTasks = savedTask.map((obj) => {
        if (obj.path === oldpath) {
          return { ...obj, path: newpath };
        } else {
          return obj;
        }
      });
      await this.saveTasksToCache(newTasks);
      const fileMetadatas = this.plugin.settings.fileMetadata;
      fileMetadatas[newpath] = fileMetadatas[oldpath];
      delete fileMetadatas[oldpath];
      this.plugin.settings.fileMetadata = fileMetadatas;
    } catch (error) {
      console.log(`Error updating renamed file path to cache: ${error}`);
    }
  }
};

// src/fileOperation.ts
var FileOperation = class {
  constructor(app, plugin) {
    this.app = app;
    this.plugin = plugin;
  }
  /*
  async getFrontMatter(file:TFile): Promise<FrontMatter | null> {
      return new Promise((resolve) => {
        this.app.fileManager.processFrontMatter(file, (frontMatter) => {
          resolve(frontMatter);
        });
      });
  }
  */
  /*
  async updateFrontMatter(
  file:TFile,
  updater: (frontMatter: FrontMatter) => void
  ): Promise<void> {
      //console.log(`prepare to update front matter`)
      this.app.fileManager.processFrontMatter(file, (frontMatter) => {
      if (frontMatter !== null) {
      const updatedFrontMatter = { ...frontMatter } as FrontMatter;
      updater(updatedFrontMatter);
      this.app.fileManager.processFrontMatter(file, (newFrontMatter) => {
          if (newFrontMatter !== null) {
          newFrontMatter.todoistTasks = updatedFrontMatter.todoistTasks;
          newFrontMatter.todoistCount = updatedFrontMatter.todoistCount;
          }
      });
      }
  });
  }
  */
  // 完成一个任务，将其标记为已完成
  async completeTaskInTheFile(taskId) {
    const currentTask = await this.plugin.cacheOperation.loadTaskFromCacheyID(taskId);
    const filepath = currentTask.path;
    const file = this.app.vault.getAbstractFileByPath(filepath);
    const content = await this.app.vault.read(file);
    const lines = content.split("\n");
    let modified = false;
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      if (line.includes(taskId) && this.plugin.taskParser.hasTodoistTag(line)) {
        lines[i] = line.replace("[ ]", "[x]");
        modified = true;
        break;
      }
    }
    if (modified) {
      const newContent = lines.join("\n");
      await this.app.vault.modify(file, newContent);
    }
  }
  // uncheck 已完成的任务，
  async uncompleteTaskInTheFile(taskId) {
    const currentTask = await this.plugin.cacheOperation.loadTaskFromCacheyID(taskId);
    const filepath = currentTask.path;
    const file = this.app.vault.getAbstractFileByPath(filepath);
    const content = await this.app.vault.read(file);
    const lines = content.split("\n");
    let modified = false;
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      if (line.includes(taskId) && this.plugin.taskParser.hasTodoistTag(line)) {
        lines[i] = line.replace(/- \[(x|X)\]/g, "- [ ]");
        modified = true;
        break;
      }
    }
    if (modified) {
      const newContent = lines.join("\n");
      await this.app.vault.modify(file, newContent);
    }
  }
  //add #todoist at the end of task line, if full vault sync enabled
  async addTodoistTagToFile(filepath) {
    const file = this.app.vault.getAbstractFileByPath(filepath);
    const content = await this.app.vault.read(file);
    const lines = content.split("\n");
    let modified = false;
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      if (!this.plugin.taskParser.isMarkdownTask(line)) {
        continue;
      }
      if (this.plugin.taskParser.getTaskContentFromLineText(line) == "") {
        continue;
      }
      if (!this.plugin.taskParser.hasTodoistId(line) && !this.plugin.taskParser.hasTodoistTag(line)) {
        const newLine = this.plugin.taskParser.addTodoistTag(line);
        lines[i] = newLine;
        modified = true;
      }
    }
    if (modified) {
      console.log(`New task found in files ${filepath}`);
      const newContent = lines.join("\n");
      await this.app.vault.modify(file, newContent);
      const metadata = await this.plugin.cacheOperation.getFileMetadata(filepath);
      if (!metadata) {
        await this.plugin.cacheOperation.newEmptyFileMetadata(filepath);
      }
    }
  }
  //add todoist at the line
  async addTodoistLinkToFile(filepath) {
    const file = this.app.vault.getAbstractFileByPath(filepath);
    const content = await this.app.vault.read(file);
    const lines = content.split("\n");
    let modified = false;
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      if (this.plugin.taskParser.hasTodoistId(line) && this.plugin.taskParser.hasTodoistTag(line)) {
        if (this.plugin.taskParser.hasTodoistLink(line)) {
          return;
        }
        console.log(line);
        const taskID = this.plugin.taskParser.getTodoistIdFromLineText(line);
        const taskObject = this.plugin.cacheOperation.loadTaskFromCacheyID(taskID);
        const todoistLink = taskObject.url;
        const link = `[link](${todoistLink})`;
        const newLine = this.plugin.taskParser.addTodoistLink(line, link);
        console.log(newLine);
        lines[i] = newLine;
        modified = true;
      } else {
        continue;
      }
    }
    if (modified) {
      const newContent = lines.join("\n");
      await this.app.vault.modify(file, newContent);
    }
  }
  //add #todoist at the end of task line, if full vault sync enabled
  async addTodoistTagToLine(filepath, lineText, lineNumber, fileContent) {
    const file = this.app.vault.getAbstractFileByPath(filepath);
    const content = fileContent;
    const lines = content.split("\n");
    let modified = false;
    const line = lineText;
    if (!this.plugin.taskParser.isMarkdownTask(line)) {
      return;
    }
    if (this.plugin.taskParser.getTaskContentFromLineText(line) == "") {
      return;
    }
    if (!this.plugin.taskParser.hasTodoistId(line) && !this.plugin.taskParser.hasTodoistTag(line)) {
      const newLine = this.plugin.taskParser.addTodoistTag(line);
      lines[lineNumber] = newLine;
      modified = true;
    }
    if (modified) {
      console.log(`New task found in files ${filepath}`);
      const newContent = lines.join("\n");
      console.log(newContent);
      await this.app.vault.modify(file, newContent);
      const metadata = await this.plugin.cacheOperation.getFileMetadata(filepath);
      if (!metadata) {
        await this.plugin.cacheOperation.newEmptyFileMetadata(filepath);
      }
    }
  }
  // sync updated task content  to file
  async syncUpdatedTaskContentToTheFile(evt) {
    const taskId = evt.object_id;
    const currentTask = await this.plugin.cacheOperation.loadTaskFromCacheyID(taskId);
    const filepath = currentTask.path;
    const file = this.app.vault.getAbstractFileByPath(filepath);
    const content = await this.app.vault.read(file);
    const lines = content.split("\n");
    let modified = false;
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      if (line.includes(taskId) && this.plugin.taskParser.hasTodoistTag(line)) {
        const oldTaskContent = this.plugin.taskParser.getTaskContentFromLineText(line);
        const newTaskContent = evt.extra_data.content;
        lines[i] = line.replace(oldTaskContent, newTaskContent);
        modified = true;
        break;
      }
    }
    if (modified) {
      const newContent = lines.join("\n");
      await this.app.vault.modify(file, newContent);
    }
  }
  // sync updated task due date  to the file
  async syncUpdatedTaskDueDateToTheFile(evt) {
    const taskId = evt.object_id;
    const currentTask = await this.plugin.cacheOperation.loadTaskFromCacheyID(taskId);
    const filepath = currentTask.path;
    const file = this.app.vault.getAbstractFileByPath(filepath);
    const content = await this.app.vault.read(file);
    const lines = content.split("\n");
    let modified = false;
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      if (line.includes(taskId) && this.plugin.taskParser.hasTodoistTag(line)) {
        const oldTaskDueDate = this.plugin.taskParser.getDueDateFromLineText(line) || "";
        const newTaskDueDate = this.plugin.taskParser.ISOStringToLocalDateString(evt.extra_data.due_date) || "";
        console.log(oldTaskDueDate);
        console.log(newTaskDueDate);
        if (oldTaskDueDate === "") {
          lines[i] = this.plugin.taskParser.insertDueDateBeforeTodoist(line, newTaskDueDate);
          modified = true;
        } else if (newTaskDueDate === "") {
          const regexRemoveDate = /(🗓️|📅|📆|🗓)\s?\d{4}-\d{2}-\d{2}/;
          lines[i] = line.replace(regexRemoveDate, "");
          modified = true;
        } else {
          lines[i] = line.replace(oldTaskDueDate, newTaskDueDate);
          modified = true;
        }
        break;
      }
    }
    if (modified) {
      const newContent = lines.join("\n");
      await this.app.vault.modify(file, newContent);
    }
  }
  // sync new task note to file
  async syncAddedTaskNoteToTheFile(evt) {
    const taskId = evt.parent_item_id;
    const note = evt.extra_data.content;
    const datetime = this.plugin.taskParser.ISOStringToLocalDatetimeString(evt.event_date);
    const currentTask = await this.plugin.cacheOperation.loadTaskFromCacheyID(taskId);
    const filepath = currentTask.path;
    const file = this.app.vault.getAbstractFileByPath(filepath);
    const content = await this.app.vault.read(file);
    const lines = content.split("\n");
    let modified = false;
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      if (line.includes(taskId) && this.plugin.taskParser.hasTodoistTag(line)) {
        const indent = "	".repeat(line.length - line.trimStart().length + 1);
        const noteLine = `${indent}- ${datetime} ${note}`;
        lines.splice(i + 1, 0, noteLine);
        modified = true;
        break;
      }
    }
    if (modified) {
      const newContent = lines.join("\n");
      await this.app.vault.modify(file, newContent);
    }
  }
  //避免使用该方式，通过view可以获得实时更新的value
  async readContentFromFilePath(filepath) {
    try {
      const file = this.app.vault.getAbstractFileByPath(filepath);
      const content = await this.app.vault.read(file);
      return content;
    } catch (error) {
      console.error(`Error loading content from ${filepath}: ${error}`);
      return false;
    }
  }
  //get line text from file path
  //请使用 view.editor.getLine，read 方法有延迟
  async getLineTextFromFilePath(filepath, lineNumber) {
    const file = this.app.vault.getAbstractFileByPath(filepath);
    const content = await this.app.vault.read(file);
    const lines = content.split("\n");
    return lines[lineNumber];
  }
  //search todoist_id by content
  async searchTodoistIdFromFilePath(filepath, searchTerm) {
    const file = this.app.vault.getAbstractFileByPath(filepath);
    const fileContent = await this.app.vault.read(file);
    const fileLines = fileContent.split("\n");
    let todoistId = null;
    for (let i = 0; i < fileLines.length; i++) {
      const line = fileLines[i];
      if (line.includes(searchTerm)) {
        const regexResult = /\[todoist_id::\s*(\w+)\]/.exec(line);
        if (regexResult) {
          todoistId = regexResult[1];
        }
        break;
      }
    }
    return todoistId;
  }
  //get all files in the vault
  async getAllFilesInTheVault() {
    const files = this.app.vault.getFiles();
    return files;
  }
  //search filepath by taskid in vault
  async searchFilepathsByTaskidInVault(taskId) {
    console.log(`preprare to search task ${taskId}`);
    const files = await this.getAllFilesInTheVault();
    const tasks = files.map(async (file) => {
      if (!this.isMarkdownFile(file.path)) {
        return;
      }
      const fileContent = await this.app.vault.cachedRead(file);
      if (fileContent.includes(taskId)) {
        return file.path;
      }
    });
    const results = await Promise.all(tasks);
    const filePaths = results.filter((filePath) => filePath !== void 0);
    return filePaths[0] || null;
  }
  isMarkdownFile(filename) {
    let extension = filename.split(".").pop();
    extension = extension.toLowerCase();
    if (extension === "md") {
      return true;
    } else {
      return false;
    }
  }
};

// src/syncModule.ts
var import_obsidian2 = require("obsidian");
var TodoistSync = class {
  constructor(app, plugin) {
    this.app = app;
    this.plugin = plugin;
  }
  async deletedTaskCheck(file_path) {
    let file;
    let currentFileValue;
    let view;
    let filepath;
    if (file_path) {
      file = this.app.vault.getAbstractFileByPath(file_path);
      filepath = file_path;
      currentFileValue = await this.app.vault.read(file);
    } else {
      view = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
      file = this.app.workspace.getActiveFile();
      filepath = file == null ? void 0 : file.path;
      currentFileValue = view == null ? void 0 : view.data;
    }
    const frontMatter = await this.plugin.cacheOperation.getFileMetadata(filepath);
    if (!frontMatter || !frontMatter.todoistTasks) {
      console.log("frontmatter\u6CA1\u6709task");
      return;
    }
    const currentFileValueWithOutFrontMatter = currentFileValue.replace(/^---[\s\S]*?---\n/, "");
    const frontMatter_todoistTasks = frontMatter.todoistTasks;
    const frontMatter_todoistCount = frontMatter.todoistCount;
    const deleteTasksPromises = frontMatter_todoistTasks.filter((taskId) => !currentFileValueWithOutFrontMatter.includes(taskId)).map(async (taskId) => {
      try {
        const api = this.plugin.todoistRestAPI.initializeAPI();
        const response = await api.deleteTask(taskId);
        if (response) {
          new import_obsidian2.Notice(`task ${taskId} is deleted`);
          return taskId;
        }
      } catch (error) {
        console.error(`Failed to delete task ${taskId}: ${error}`);
      }
    });
    const deletedTaskIds = await Promise.all(deleteTasksPromises);
    const deletedTaskAmount = deletedTaskIds.length;
    if (!deletedTaskIds.length) {
      return;
    }
    this.plugin.cacheOperation.deleteTaskFromCacheByIDs(deletedTaskIds);
    this.plugin.saveSettings();
    const newFrontMatter_todoistTasks = frontMatter_todoistTasks.filter(
      (taskId) => !deletedTaskIds.includes(taskId)
    );
    const newFileMetadata = { todoistTasks: newFrontMatter_todoistTasks, todoistCount: frontMatter_todoistCount - deletedTaskAmount };
    await this.plugin.cacheOperation.updateFileMetadata(filepath, newFileMetadata);
  }
  async lineContentNewTaskCheck(editor, view) {
    var _a, _b, _c, _d;
    const filepath = (_a = view.file) == null ? void 0 : _a.path;
    const fileContent = view == null ? void 0 : view.data;
    const cursor = editor.getCursor();
    const line = cursor.line;
    const linetxt = editor.getLine(line);
    if (!this.plugin.taskParser.hasTodoistId(linetxt) && this.plugin.taskParser.hasTodoistTag(linetxt)) {
      console.log("this is a new task");
      console.log(linetxt);
      const currentTask = await this.plugin.taskParser.convertTextToTodoistTaskObject(linetxt, filepath, line, fileContent);
      try {
        const newTask = await this.plugin.todoistRestAPI.AddTask(currentTask);
        const { id: todoist_id, projectId: todoist_projectId, url: todoist_url } = newTask;
        newTask.path = filepath;
        new import_obsidian2.Notice(`new task ${newTask.content} id is ${newTask.id}`);
        this.plugin.cacheOperation.appendTaskToCache(newTask);
        if (currentTask.isCompleted === true) {
          await this.plugin.todoistRestAPI.CloseTask(newTask.id);
          this.plugin.cacheOperation.closeTaskToCacheByID(todoist_id);
        }
        this.plugin.saveSettings();
        const text_with_out_link = `${linetxt} %%[todoist_id:: ${todoist_id}]%%`;
        const link = `[link](${newTask.url})`;
        const text = this.plugin.taskParser.addTodoistLink(text_with_out_link, link);
        const from = { line: cursor.line, ch: 0 };
        const to = { line: cursor.line, ch: linetxt.length };
        (_c = (_b = view.app.workspace.activeEditor) == null ? void 0 : _b.editor) == null ? void 0 : _c.replaceRange(text, from, to);
        try {
          const frontMatter = await this.plugin.cacheOperation.getFileMetadata(filepath);
          if (!frontMatter) {
          }
          const newFrontMatter = { ...frontMatter };
          newFrontMatter.todoistCount = ((_d = newFrontMatter.todoistCount) != null ? _d : 0) + 1;
          newFrontMatter.todoistTasks = [...newFrontMatter.todoistTasks || [], todoist_id];
          await this.plugin.cacheOperation.updateFileMetadata(filepath, newFrontMatter);
        } catch (error) {
          console.error(error);
        }
      } catch (error) {
        console.error("Error adding task:", error);
        console.log(`The error occurred in the file: ${filepath}`);
        return;
      }
    }
  }
  async fullTextNewTaskCheck(file_path) {
    var _a;
    let file;
    let currentFileValue;
    let view;
    let filepath;
    if (file_path) {
      file = this.app.vault.getAbstractFileByPath(file_path);
      filepath = file_path;
      currentFileValue = await this.app.vault.read(file);
    } else {
      view = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
      file = this.app.workspace.getActiveFile();
      filepath = file == null ? void 0 : file.path;
      currentFileValue = view == null ? void 0 : view.data;
    }
    if (this.plugin.settings.enableFullVaultSync) {
      await this.plugin.fileOperation.addTodoistTagToFile(filepath);
    }
    const content = currentFileValue;
    let newFrontMatter;
    const frontMatter = await this.plugin.cacheOperation.getFileMetadata(filepath);
    if (!frontMatter) {
      console.log("frontmatter is empty");
      newFrontMatter = {};
    } else {
      newFrontMatter = { ...frontMatter };
    }
    let hasNewTask = false;
    const lines = content.split("\n");
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      if (!this.plugin.taskParser.hasTodoistId(line) && this.plugin.taskParser.hasTodoistTag(line)) {
        console.log(filepath);
        const currentTask = await this.plugin.taskParser.convertTextToTodoistTaskObject(line, filepath, i, content);
        if (typeof currentTask === "undefined") {
          continue;
        }
        console.log(currentTask);
        try {
          const newTask = await this.plugin.todoistRestAPI.AddTask(currentTask);
          const { id: todoist_id, projectId: todoist_projectId, url: todoist_url } = newTask;
          newTask.path = filepath;
          console.log(newTask);
          new import_obsidian2.Notice(`new task ${newTask.content} id is ${newTask.id}`);
          this.plugin.cacheOperation.appendTaskToCache(newTask);
          if (currentTask.isCompleted === true) {
            await this.plugin.todoistRestAPI.CloseTask(newTask.id);
            this.plugin.cacheOperation.closeTaskToCacheByID(todoist_id);
          }
          this.plugin.saveSettings();
          const text_with_out_link = `${line} %%[todoist_id:: ${todoist_id}]%%`;
          const link = `[link](${newTask.url})`;
          const text = this.plugin.taskParser.addTodoistLink(text_with_out_link, link);
          lines[i] = text;
          newFrontMatter.todoistCount = ((_a = newFrontMatter.todoistCount) != null ? _a : 0) + 1;
          newFrontMatter.todoistTasks = [...newFrontMatter.todoistTasks || [], todoist_id];
          hasNewTask = true;
        } catch (error) {
          console.error("Error adding task:", error);
          continue;
        }
      }
    }
    if (hasNewTask) {
      try {
        const newContent = lines.join("\n");
        await this.app.vault.modify(file, newContent);
        await this.plugin.cacheOperation.updateFileMetadata(filepath, newFrontMatter);
      } catch (error) {
        console.error(error);
      }
    }
  }
  async lineModifiedTaskCheck(filepath, lineText, lineNumber, fileContent) {
    if (this.plugin.settings.enableFullVaultSync) {
      const metadata = await this.plugin.cacheOperation.getFileMetadata(filepath);
      if (!metadata) {
        await this.plugin.cacheOperation.newEmptyFileMetadata(filepath);
      }
      this.plugin.saveSettings();
    }
    if (this.plugin.taskParser.hasTodoistId(lineText) && this.plugin.taskParser.hasTodoistTag(lineText)) {
      const lineTask = await this.plugin.taskParser.convertTextToTodoistTaskObject(lineText, filepath, lineNumber, fileContent);
      const lineTask_todoist_id = lineTask.todoist_id.toString();
      const savedTask = await this.plugin.cacheOperation.loadTaskFromCacheyID(lineTask_todoist_id);
      if (!savedTask) {
        console.log(`\u672C\u5730\u7F13\u5B58\u4E2D\u6CA1\u6709task ${lineTask.todoist_id}`);
        const url = this.plugin.taskParser.getObsidianUrlFromFilepath(filepath);
        console.log(url);
        return;
      }
      const lineTaskContent = lineTask.content;
      const contentModified = !this.plugin.taskParser.taskContentCompare(lineTask, savedTask);
      const tagsModified = !this.plugin.taskParser.taskTagCompare(lineTask, savedTask);
      const projectModified = !await this.plugin.taskParser.taskProjectCompare(lineTask, savedTask);
      const statusModified = !this.plugin.taskParser.taskStatusCompare(lineTask, savedTask);
      const dueDateModified = !await this.plugin.taskParser.compareTaskDueDate(lineTask, savedTask);
      const parentIdModified = !(lineTask.parentId === savedTask.parentId);
      const priorityModified = !(lineTask.priority === savedTask.priority);
      try {
        let contentChanged = false;
        let tagsChanged = false;
        let projectChanged = false;
        let statusChanged = false;
        let dueDateChanged = false;
        let parentIdChanged = false;
        let priorityChanged = false;
        let updatedContent = {};
        if (contentModified) {
          console.log(`Content modified for task ${lineTask_todoist_id}`);
          updatedContent.content = lineTaskContent;
          contentChanged = true;
        }
        if (tagsModified) {
          console.log(`Tags modified for task ${lineTask_todoist_id}`);
          updatedContent.labels = lineTask.labels;
          tagsChanged = true;
        }
        if (dueDateModified) {
          console.log(`Due date modified for task ${lineTask_todoist_id}`);
          console.log(lineTask.dueDate);
          if (lineTask.dueDate === "") {
            updatedContent.dueString = "no date";
          } else {
            updatedContent.dueDate = lineTask.dueDate;
          }
          dueDateChanged = true;
        }
        if (projectModified) {
        }
        if (parentIdModified) {
        }
        if (priorityModified) {
          updatedContent.priority = lineTask.priority;
          priorityChanged = true;
        }
        if (contentChanged || tagsChanged || dueDateChanged || projectChanged || parentIdChanged || priorityChanged) {
          const updatedTask = await this.plugin.todoistRestAPI.UpdateTask(lineTask.todoist_id.toString(), updatedContent);
          updatedTask.path = filepath;
          this.plugin.cacheOperation.updateTaskToCacheByID(updatedTask);
        }
        if (statusModified) {
          console.log(`Status modified for task ${lineTask_todoist_id}`);
          if (lineTask.isCompleted === true) {
            console.log(`task completed`);
            this.plugin.todoistRestAPI.CloseTask(lineTask.todoist_id.toString());
            this.plugin.cacheOperation.closeTaskToCacheByID(lineTask.todoist_id.toString());
          } else {
            console.log(`task umcompleted`);
            this.plugin.todoistRestAPI.OpenTask(lineTask.todoist_id.toString());
            this.plugin.cacheOperation.reopenTaskToCacheByID(lineTask.todoist_id.toString());
          }
          statusChanged = true;
        }
        if (contentChanged || statusChanged || dueDateChanged || tagsChanged || projectChanged || priorityChanged) {
          console.log(lineTask);
          console.log(savedTask);
          this.plugin.saveSettings();
          let message = `Task ${lineTask_todoist_id} is updated.`;
          if (contentChanged) {
            message += " Content was changed.";
          }
          if (statusChanged) {
            message += " Status was changed.";
          }
          if (dueDateChanged) {
            message += " Due date was changed.";
          }
          if (tagsChanged) {
            message += " Tags were changed.";
          }
          if (projectChanged) {
            message += " Project was changed.";
          }
          if (priorityChanged) {
            message += " Priority was changed.";
          }
          new import_obsidian2.Notice(message);
        } else {
        }
      } catch (error) {
        console.error("Error updating task:", error);
      }
    }
  }
  async fullTextModifiedTaskCheck(file_path) {
    let file;
    let currentFileValue;
    let view;
    let filepath;
    try {
      if (file_path) {
        file = this.app.vault.getAbstractFileByPath(file_path);
        filepath = file_path;
        currentFileValue = await this.app.vault.read(file);
      } else {
        view = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
        file = this.app.workspace.getActiveFile();
        filepath = file == null ? void 0 : file.path;
        currentFileValue = view == null ? void 0 : view.data;
      }
      const content = currentFileValue;
      let hasModifiedTask = false;
      const lines = content.split("\n");
      for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        if (this.plugin.taskParser.hasTodoistId(line) && this.plugin.taskParser.hasTodoistTag(line)) {
          try {
            await this.lineModifiedTaskCheck(filepath, line, i, content);
            hasModifiedTask = true;
          } catch (error) {
            console.error("Error modifying task:", error);
            continue;
          }
        }
      }
      if (hasModifiedTask) {
        try {
        } catch (error) {
          console.error("Error processing modified content:", error);
        }
      }
    } catch (error) {
      console.error("Error:", error);
    }
  }
  // Close a task by calling API and updating JSON file
  async closeTask(taskId) {
    try {
      await this.plugin.todoistRestAPI.CloseTask(taskId);
      await this.plugin.fileOperation.completeTaskInTheFile(taskId);
      await this.plugin.cacheOperation.closeTaskToCacheByID(taskId);
      this.plugin.saveSettings();
      new import_obsidian2.Notice(`Task ${taskId} is closed.`);
    } catch (error) {
      console.error("Error closing task:", error);
      throw error;
    }
  }
  //open task
  async repoenTask(taskId) {
    try {
      await this.plugin.todoistRestAPI.OpenTask(taskId);
      await this.plugin.fileOperation.uncompleteTaskInTheFile(taskId);
      await this.plugin.cacheOperation.reopenTaskToCacheByID(taskId);
      this.plugin.saveSettings();
      new import_obsidian2.Notice(`Task ${taskId} is reopend.`);
    } catch (error) {
      console.error("Error opening task:", error);
      throw error;
    }
  }
  /**
   * 从任务列表中删除指定 ID 的任务并更新 JSON 文件
   * @param taskIds 要删除的任务 ID 数组
   * @returns 返回被成功删除的任务 ID 数组
   */
  async deleteTasksByIds(taskIds) {
    const deletedTaskIds = [];
    for (const taskId of taskIds) {
      const api = await this.plugin.todoistRestAPI.initializeAPI();
      try {
        const response = await api.deleteTask(taskId);
        console.log(`response is ${response}`);
        if (response) {
          new import_obsidian2.Notice(`Task ${taskId} is deleted.`);
          deletedTaskIds.push(taskId);
        }
      } catch (error) {
        console.error(`Failed to delete task ${taskId}: ${error}`);
      }
    }
    if (!deletedTaskIds.length) {
      console.log("\u6CA1\u6709\u5220\u9664\u4EFB\u52A1");
      return [];
    }
    await this.plugin.cacheOperation.deleteTaskFromCacheByIDs(deletedTaskIds);
    this.plugin.saveSettings();
    return deletedTaskIds;
  }
  // 同步已完成的任务状态到 Obsidian file
  async syncCompletedTaskStatusToObsidian(unSynchronizedEvents) {
    try {
      const processedEvents = [];
      for (const e of unSynchronizedEvents) {
        await this.plugin.fileOperation.completeTaskInTheFile(e.object_id);
        await this.plugin.cacheOperation.closeTaskToCacheByID(e.object_id);
        new import_obsidian2.Notice(`Task ${e.object_id} is closed.`);
        processedEvents.push(e);
      }
      await this.plugin.cacheOperation.appendEventsToCache(processedEvents);
      this.plugin.saveSettings();
    } catch (error) {
      console.error("\u540C\u6B65\u4EFB\u52A1\u72B6\u6001\u65F6\u51FA\u9519\uFF1A", error);
    }
  }
  // 同步已完成的任务状态到 Obsidian file
  async syncUncompletedTaskStatusToObsidian(unSynchronizedEvents) {
    try {
      const processedEvents = [];
      for (const e of unSynchronizedEvents) {
        await this.plugin.fileOperation.uncompleteTaskInTheFile(e.object_id);
        await this.plugin.cacheOperation.reopenTaskToCacheByID(e.object_id);
        new import_obsidian2.Notice(`Task ${e.object_id} is reopend.`);
        processedEvents.push(e);
      }
      await this.plugin.cacheOperation.appendEventsToCache(processedEvents);
      this.plugin.saveSettings();
    } catch (error) {
      console.error("\u540C\u6B65\u4EFB\u52A1\u72B6\u6001\u65F6\u51FA\u9519\uFF1A", error);
    }
  }
  // 同步updated item状态到 Obsidian 中
  async syncUpdatedTaskToObsidian(unSynchronizedEvents) {
    try {
      const processedEvents = [];
      for (const e of unSynchronizedEvents) {
        console.log(e);
        console.log(typeof e.extra_data.last_due_date === "undefined");
        if (!(typeof e.extra_data.last_due_date === "undefined")) {
          await this.syncUpdatedTaskDueDateToObsidian(e);
        }
        if (!(typeof e.extra_data.last_content === "undefined")) {
          await this.syncUpdatedTaskContentToObsidian(e);
        }
        processedEvents.push(e);
      }
      await this.plugin.cacheOperation.appendEventsToCache(processedEvents);
      this.plugin.saveSettings();
    } catch (error) {
      console.error("Error syncing updated item", error);
    }
  }
  async syncUpdatedTaskContentToObsidian(e) {
    this.plugin.fileOperation.syncUpdatedTaskContentToTheFile(e);
    const content = e.extra_data.content;
    this.plugin.cacheOperation.modifyTaskToCacheByID(e.object_id, { content });
    new import_obsidian2.Notice(`The content of Task ${e.parent_item_id} has been modified.`);
  }
  async syncUpdatedTaskDueDateToObsidian(e) {
    this.plugin.fileOperation.syncUpdatedTaskDueDateToTheFile(e);
    const due = await this.plugin.todoistRestAPI.getTaskDueById(e.object_id);
    this.plugin.cacheOperation.modifyTaskToCacheByID(e.object_id, { due });
    new import_obsidian2.Notice(`The due date of Task ${e.parent_item_id} has been modified.`);
  }
  // sync added task note to obsidian
  async syncAddedTaskNoteToObsidian(unSynchronizedEvents) {
    try {
      const processedEvents = [];
      for (const e of unSynchronizedEvents) {
        console.log(e);
        await this.plugin.fileOperation.syncAddedTaskNoteToTheFile(e);
        new import_obsidian2.Notice(`Task ${e.parent_item_id} note is added.`);
        processedEvents.push(e);
      }
      await this.plugin.cacheOperation.appendEventsToCache(processedEvents);
      this.plugin.saveSettings();
    } catch (error) {
      console.error("\u540C\u6B65\u4EFB\u52A1\u72B6\u6001\u65F6\u51FA\u9519\uFF1A", error);
    }
  }
  async syncTodoistToObsidian() {
    try {
      const all_activity_events = await this.plugin.todoistSyncAPI.getNonObsidianAllActivityEvents();
      const savedEvents = await this.plugin.cacheOperation.loadEventsFromCache();
      const result1 = all_activity_events.filter(
        (objA) => !savedEvents.some((objB) => objB.id === objA.id)
      );
      const savedTasks = await this.plugin.cacheOperation.loadTasksFromCache();
      const result2 = result1.filter(
        (objA) => savedTasks.some((objB) => objB.id === objA.object_id)
      );
      const result3 = result1.filter(
        (objA) => savedTasks.some((objB) => objB.id === objA.parent_item_id)
      );
      const unsynchronized_item_completed_events = this.plugin.todoistSyncAPI.filterActivityEvents(result2, { event_type: "completed", object_type: "item" });
      const unsynchronized_item_uncompleted_events = this.plugin.todoistSyncAPI.filterActivityEvents(result2, { event_type: "uncompleted", object_type: "item" });
      const unsynchronized_item_updated_events = this.plugin.todoistSyncAPI.filterActivityEvents(result2, { event_type: "updated", object_type: "item" });
      const unsynchronized_notes_added_events = this.plugin.todoistSyncAPI.filterActivityEvents(result3, { event_type: "added", object_type: "note" });
      const unsynchronized_project_events = this.plugin.todoistSyncAPI.filterActivityEvents(result1, { object_type: "project" });
      console.log(unsynchronized_item_completed_events);
      console.log(unsynchronized_item_uncompleted_events);
      console.log(unsynchronized_item_updated_events);
      console.log(unsynchronized_project_events);
      console.log(unsynchronized_notes_added_events);
      await this.syncCompletedTaskStatusToObsidian(unsynchronized_item_completed_events);
      await this.syncUncompletedTaskStatusToObsidian(unsynchronized_item_uncompleted_events);
      await this.syncUpdatedTaskToObsidian(unsynchronized_item_updated_events);
      await this.syncAddedTaskNoteToObsidian(unsynchronized_notes_added_events);
      if (unsynchronized_project_events.length) {
        console.log("New project event");
        await this.plugin.cacheOperation.saveProjectsToCache();
        await this.plugin.cacheOperation.appendEventsToCache(unsynchronized_project_events);
      }
    } catch (err) {
      console.error("An error occurred while synchronizing:", err);
    }
  }
  async backupTodoistAllResources() {
    try {
      const resources = await this.plugin.todoistSyncAPI.getAllResources();
      const now = new Date();
      const timeString = `${now.getFullYear()}${now.getMonth() + 1}${now.getDate()}${now.getHours()}${now.getMinutes()}${now.getSeconds()}`;
      const name = "todoist-backup-" + timeString + ".json";
      this.app.vault.create(name, JSON.stringify(resources));
      new import_obsidian2.Notice(`Todoist backup data is saved in the path ${name}`);
    } catch (error) {
      console.error("An error occurred while creating Todoist backup:", error);
    }
  }
  //After renaming the file, check all tasks in the file and update all links.
  async updateTaskDescription(filepath) {
    const metadata = await this.plugin.cacheOperation.getFileMetadata(filepath);
    if (!metadata || !metadata.todoistTasks) {
      return;
    }
    const description = this.plugin.taskParser.getObsidianUrlFromFilepath(filepath);
    let updatedContent = {};
    updatedContent.description = description;
    try {
      metadata.todoistTasks.forEach(async (taskId) => {
        const updatedTask = await this.plugin.todoistRestAPI.UpdateTask(taskId, updatedContent);
        updatedTask.path = filepath;
        this.plugin.cacheOperation.updateTaskToCacheByID(updatedTask);
      });
    } catch (error) {
      console.error("An error occurred in updateTaskDescription:", error);
    }
  }
};

// src/modal.ts
var import_obsidian3 = require("obsidian");
var SetDefalutProjectInTheFilepathModal = class extends import_obsidian3.Modal {
  constructor(app, plugin, filepath) {
    super(app);
    this.filepath = filepath;
    this.plugin = plugin;
    this.open();
  }
  async onOpen() {
    var _a, _b;
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h5", { text: "Set default project for todoist tasks in the current file" });
    this.defaultProjectId = await this.plugin.cacheOperation.getDefaultProjectIdForFilepath(this.filepath);
    this.defaultProjectName = await this.plugin.cacheOperation.getProjectNameByIdFromCache(this.defaultProjectId);
    console.log(this.defaultProjectId);
    console.log(this.defaultProjectName);
    const myProjectsOptions = (_b = (_a = this.plugin.settings.todoistTasksData) == null ? void 0 : _a.projects) == null ? void 0 : _b.reduce(
      (obj, item) => {
        obj[item.id.toString()] = item.name;
        return obj;
      },
      {}
    );
    new import_obsidian3.Setting(contentEl).setName("Default project").addDropdown(
      (component) => component.addOption(this.defaultProjectId, this.defaultProjectName).addOptions(myProjectsOptions).onChange((value) => {
        console.log(`project id  is ${value}`);
        this.plugin.cacheOperation.setDefaultProjectIdForFilepath(this.filepath, value);
        this.plugin.setStatusBarText();
        this.close();
      })
    );
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};

// main.ts
var UltimateTodoistSyncForObsidian = class extends import_obsidian4.Plugin {
  async onload() {
    const isSettingsLoaded = await this.loadSettings();
    if (!isSettingsLoaded) {
      new import_obsidian4.Notice("Settings failed to load.Please reload the ultimate todoist sync plugin.");
      return;
    }
    this.addSettingTab(new UltimateTodoistSyncSettingTab(this.app, this));
    if (!this.settings.todoistAPIToken) {
      new import_obsidian4.Notice("Please enter your Todoist API.");
    } else {
      await this.initializePlugin();
    }
    this.lastLines = /* @__PURE__ */ new Map();
    this.registerDomEvent(document, "keyup", async (evt) => {
      var _a, _b, _c;
      if (!this.settings.apiInitialized) {
        return;
      }
      if (!((_b = (_a = this.app.workspace.activeEditor) == null ? void 0 : _a.editor) == null ? void 0 : _b.hasFocus())) {
        console.log(`editor is not focused`);
        return;
      }
      const view = this.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
      const editor = (_c = view == null ? void 0 : view.app.workspace.activeEditor) == null ? void 0 : _c.editor;
      if (evt.key === "ArrowUp" || evt.key === "ArrowDown" || evt.key === "ArrowLeft" || evt.key === "ArrowRight" || evt.key === "PageUp" || evt.key === "PageDown") {
        if (!this.checkModuleClass()) {
          return;
        }
        this.lineNumberCheck();
      }
      if (evt.key === "Delete" || evt.key === "Backspace") {
        try {
          if (!this.checkModuleClass()) {
            return;
          }
          if (!await this.checkAndHandleSyncLock())
            return;
          await this.todoistSync.deletedTaskCheck();
          this.syncLock = false;
          this.saveSettings();
        } catch (error) {
          console.error(`An error occurred while deleting tasks: ${error}`);
          this.syncLock = false;
        }
      }
    });
    this.registerDomEvent(document, "click", async (evt) => {
      var _a, _b, _c;
      if (!this.settings.apiInitialized) {
        return;
      }
      if ((_b = (_a = this.app.workspace.activeEditor) == null ? void 0 : _a.editor) == null ? void 0 : _b.hasFocus()) {
        const view = this.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
        const editor = (_c = this.app.workspace.activeEditor) == null ? void 0 : _c.editor;
        this.lineNumberCheck();
      } else {
      }
      const target = evt.target;
      if (target.type === "checkbox") {
        if (!this.checkModuleClass()) {
          return;
        }
        this.checkboxEventhandle(evt);
      }
    });
    this.registerEvent(this.app.workspace.on("editor-change", async (editor, view) => {
      try {
        if (!this.settings.apiInitialized) {
          return;
        }
        this.lineNumberCheck();
        if (!this.checkModuleClass()) {
          return;
        }
        if (this.settings.enableFullVaultSync) {
          return;
        }
        if (!await this.checkAndHandleSyncLock())
          return;
        await this.todoistSync.lineContentNewTaskCheck(editor, view);
        this.syncLock = false;
        this.saveSettings();
      } catch (error) {
        console.error(`An error occurred while check new task in line: ${error.message}`);
        this.syncLock = false;
      }
    }));
    this.registerEvent(this.app.vault.on("rename", async (file, oldpath) => {
      if (!this.settings.apiInitialized) {
        return;
      }
      console.log(`${oldpath} is renamed`);
      const frontMatter = await this.cacheOperation.getFileMetadata(oldpath);
      console.log(frontMatter);
      if (frontMatter === null || frontMatter.todoistTasks === void 0) {
        return;
      }
      if (!this.checkModuleClass()) {
        return;
      }
      await this.cacheOperation.updateRenamedFilePath(oldpath, file.path);
      this.saveSettings();
      if (!await this.checkAndHandleSyncLock())
        return;
      try {
        await this.todoistSync.updateTaskDescription(file.path);
      } catch (error) {
        console.error("An error occurred in updateTaskDescription:", error);
      }
      this.syncLock = false;
    }));
    this.registerEvent(this.app.vault.on("modify", async (file) => {
      try {
        if (!this.settings.apiInitialized) {
          return;
        }
        const filepath = file.path;
        console.log(`${filepath} is modified`);
        const activateFile = this.app.workspace.getActiveFile();
        console.log(activateFile == null ? void 0 : activateFile.path);
        if ((activateFile == null ? void 0 : activateFile.path) == filepath) {
          return;
        }
        if (!await this.checkAndHandleSyncLock())
          return;
        await this.todoistSync.fullTextNewTaskCheck(filepath);
        this.syncLock = false;
      } catch (error) {
        console.error(`An error occurred while modifying the file: ${error.message}`);
        this.syncLock = false;
      }
    }));
    this.registerInterval(window.setInterval(async () => await this.scheduledSynchronization(), this.settings.automaticSynchronizationInterval * 1e3));
    this.app.workspace.on("active-leaf-change", (leaf) => {
      this.setStatusBarText();
    });
    this.addCommand({
      id: "set-default-project-for-todoist-task-in-the-current-file",
      name: "Set default project for todoist task in the current file",
      editorCallback: (editor, view) => {
        if (!view) {
          return;
        }
        const filepath = view.file.path;
        new SetDefalutProjectInTheFilepathModal(this.app, this, filepath);
      }
    });
    this.statusBar = this.addStatusBarItem();
  }
  async onunload() {
    console.log(`Ultimate Todoist Sync for Obsidian id unloaded!`);
    await this.saveSettings();
  }
  async loadSettings() {
    try {
      const data = await this.loadData();
      this.settings = Object.assign({}, DEFAULT_SETTINGS, data);
      return true;
    } catch (error) {
      console.error("Failed to load data:", error);
      return false;
    }
  }
  async saveSettings() {
    try {
      if (this.settings && Object.keys(this.settings).length > 0) {
        await this.saveData(this.settings);
      } else {
        console.error("Settings are empty or invalid, not saving to avoid data loss.");
      }
    } catch (error) {
      console.error("Error saving settings:", error);
    }
  }
  async modifyTodoistAPI(api) {
    await this.initializePlugin();
  }
  // return true of false
  async initializePlugin() {
    this.todoistRestAPI = new TodoistRestAPI(this.app, this);
    this.cacheOperation = new CacheOperation(this.app, this);
    const isProjectsSaved = await this.cacheOperation.saveProjectsToCache();
    if (!isProjectsSaved) {
      this.todoistRestAPI = void 0;
      this.todoistSyncAPI = void 0;
      this.taskParser = void 0;
      this.taskParser = void 0;
      this.cacheOperation = void 0;
      this.fileOperation = void 0;
      this.todoistSync = void 0;
      new import_obsidian4.Notice(`Ultimate Todoist Sync plugin initialization failed, please check the todoist api`);
      return;
    }
    if (!this.settings.initialized) {
      try {
        this.taskParser = new TaskParser(this.app, this);
        this.fileOperation = new FileOperation(this.app, this);
        this.todoistSyncAPI = new TodoistSyncAPI(this.app, this);
        this.todoistSync = new TodoistSync(this.app, this);
        this.todoistSync.backupTodoistAllResources();
      } catch (error) {
        console.log(`error creating user data folder: ${error}`);
        new import_obsidian4.Notice(`error creating user data folder`);
        return;
      }
      this.settings.initialized = true;
      this.saveSettings();
      new import_obsidian4.Notice(`Ultimate Todoist Sync initialization successful. Todoist data has been backed up.`);
    }
    this.initializeModuleClass();
    this.settings.apiInitialized = true;
    this.syncLock = false;
    new import_obsidian4.Notice(`Ultimate Todoist Sync loaded successfully.`);
    return true;
  }
  async initializeModuleClass() {
    this.todoistRestAPI = new TodoistRestAPI(this.app, this);
    this.cacheOperation = new CacheOperation(this.app, this);
    this.taskParser = new TaskParser(this.app, this);
    this.fileOperation = new FileOperation(this.app, this);
    this.todoistSyncAPI = new TodoistSyncAPI(this.app, this);
    this.todoistSync = new TodoistSync(this.app, this);
  }
  async lineNumberCheck() {
    var _a, _b, _c, _d, _e, _f, _g;
    const view = this.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
    if (view) {
      const cursor = (_a = view.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView)) == null ? void 0 : _a.editor.getCursor();
      const line = cursor == null ? void 0 : cursor.line;
      const fileContent = view.data;
      const fileName = (_d = (_c = (_b = view.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView)) == null ? void 0 : _b.app.workspace.activeEditor) == null ? void 0 : _c.file) == null ? void 0 : _d.name;
      const filepath = (_g = (_f = (_e = view.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView)) == null ? void 0 : _e.app.workspace.activeEditor) == null ? void 0 : _f.file) == null ? void 0 : _g.path;
      if (typeof this.lastLines === "undefined" || typeof this.lastLines.get(fileName) === "undefined") {
        this.lastLines.set(fileName, line);
        return;
      }
      if (this.lastLines.has(fileName) && line !== this.lastLines.get(fileName)) {
        const lastLine = this.lastLines.get(fileName);
        if (this.settings.debugMode) {
          console.log("Line changed!", `current line is ${line}`, `last line is ${lastLine}`);
        }
        const lastLineText = view.editor.getLine(lastLine);
        if (!this.checkModuleClass()) {
          return;
        }
        this.lastLines.set(fileName, line);
        try {
          if (!await this.checkAndHandleSyncLock())
            return;
          await this.todoistSync.lineModifiedTaskCheck(filepath, lastLineText, lastLine, fileContent);
          this.syncLock = false;
        } catch (error) {
          console.error(`An error occurred while check modified task in line text: ${error}`);
          this.syncLock = false;
        }
      } else {
      }
    }
  }
  async checkboxEventhandle(evt) {
    var _a;
    if (!this.checkModuleClass()) {
      return;
    }
    const target = evt.target;
    const taskElement = target.closest("div");
    if (!taskElement)
      return;
    const regex = /\[todoist_id:: (\d+)\]/;
    const match = ((_a = taskElement.textContent) == null ? void 0 : _a.match(regex)) || false;
    if (match) {
      const taskId = match[1];
      if (target.checked) {
        this.todoistSync.closeTask(taskId);
      } else {
        this.todoistSync.repoenTask(taskId);
      }
    } else {
      try {
        if (!await this.checkAndHandleSyncLock())
          return;
        await this.todoistSync.fullTextModifiedTaskCheck();
        this.syncLock = false;
      } catch (error) {
        console.error(`An error occurred while check modified tasks in the file: ${error}`);
        this.syncLock = false;
      }
    }
  }
  //return true
  checkModuleClass() {
    if (this.settings.apiInitialized === true) {
      if (this.todoistRestAPI === void 0 || this.todoistSyncAPI === void 0 || this.cacheOperation === void 0 || this.fileOperation === void 0 || this.todoistSync === void 0 || this.taskParser === void 0) {
        this.initializeModuleClass();
      }
      return true;
    } else {
      new import_obsidian4.Notice(`Please enter the correct Todoist API token"`);
      return false;
    }
  }
  async setStatusBarText() {
    var _a;
    if (!this.checkModuleClass()) {
      return;
    }
    const view = this.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
    if (!view) {
      this.statusBar.setText("");
    } else {
      const filepath = (_a = this.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView)) == null ? void 0 : _a.file.path;
      if (filepath === void 0) {
        console.log(`file path undefined`);
        return;
      }
      const defaultProjectName = await this.cacheOperation.getDefaultProjectNameForFilepath(filepath);
      if (defaultProjectName === void 0) {
        console.log(`projectName undefined`);
        return;
      }
      this.statusBar.setText(defaultProjectName);
    }
  }
  async scheduledSynchronization() {
    if (!this.checkModuleClass()) {
      return;
    }
    console.log("Todoist scheduled synchronization task started at", new Date().toLocaleString());
    try {
      if (!await this.checkAndHandleSyncLock())
        return;
      try {
        await this.todoistSync.syncTodoistToObsidian();
      } catch (error) {
        console.error("An error occurred in syncTodoistToObsidian:", error);
      }
      this.syncLock = false;
      try {
        await this.saveSettings();
      } catch (error) {
        console.error("An error occurred in saveSettings:", error);
      }
      await new Promise((resolve) => setTimeout(resolve, 5e3));
      const filesToSync = this.settings.fileMetadata;
      if (this.settings.debugMode) {
        console.log(filesToSync);
      }
      for (let fileKey in filesToSync) {
        if (this.settings.debugMode) {
          console.log(fileKey);
        }
        if (!await this.checkAndHandleSyncLock())
          return;
        try {
          await this.todoistSync.fullTextNewTaskCheck(fileKey);
        } catch (error) {
          console.error("An error occurred in fullTextNewTaskCheck:", error);
        }
        this.syncLock = false;
        if (!await this.checkAndHandleSyncLock())
          return;
        try {
          await this.todoistSync.deletedTaskCheck(fileKey);
        } catch (error) {
          console.error("An error occurred in deletedTaskCheck:", error);
        }
        this.syncLock = false;
        if (!await this.checkAndHandleSyncLock())
          return;
        try {
          await this.todoistSync.fullTextModifiedTaskCheck(fileKey);
        } catch (error) {
          console.error("An error occurred in fullTextModifiedTaskCheck:", error);
        }
        this.syncLock = false;
      }
    } catch (error) {
      console.error("An error occurred:", error);
      new import_obsidian4.Notice("An error occurred:", error);
      this.syncLock = false;
    }
    console.log("Todoist scheduled synchronization task completed at", new Date().toLocaleString());
  }
  async checkSyncLock() {
    let checkCount = 0;
    while (this.syncLock == true && checkCount < 10) {
      await new Promise((resolve) => setTimeout(resolve, 1e3));
      checkCount++;
    }
    if (this.syncLock == true) {
      return false;
    }
    return true;
  }
  async checkAndHandleSyncLock() {
    if (this.syncLock) {
      console.log("sync locked.");
      const isSyncLockChecked = await this.checkSyncLock();
      if (!isSyncLockChecked) {
        return false;
      }
      console.log("sync unlocked.");
    }
    this.syncLock = true;
    return true;
  }
};
/*! Bundled license information:

@babel/runtime/helpers/regeneratorRuntime.js:
  (*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE *)
*/
//# sourceMappingURL=data:application/json;base64,
